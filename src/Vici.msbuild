<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!-- Directories -->
    <PropertyGroup>
        <BasePath>$(MSBuildProjectDirectory)\..\</BasePath>
        <ToolsPath>$(BasePath)tools\</ToolsPath>
        <BuildOutputPath>$(BasePath)_build\</BuildOutputPath>
        <ReportOutputPath>$(BuildOutputPath)Reports\</ReportOutputPath>
        <SourceCodePath>$(BasePath)src\</SourceCodePath>
    </PropertyGroup>
    
    <PropertyGroup>
        <MSBuildCommunityTasksPath>$(ToolsPath)MsBuild.CommunityTasks\1.3.0.489</MSBuildCommunityTasksPath>
    </PropertyGroup>
    
    <Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets" />

    <!-- Executable Related -->
    <PropertyGroup>
        <ZipExe>&quot;$(ToolsPath)7zip\7za.exe&quot;</ZipExe>
        <GitExe>&quot;$(ToolsPath)Git\cmd\git.cmd&quot;</GitExe>
        <FxCopExe>&quot;$(ToolsPath)FxCop\FxCopCmd.exe&quot;</FxCopExe>
        <MspecExe>&quot;$(ToolsPath)Machine.Spec\mspec.exe&quot;</MspecExe>
        <NcoverExe>&quot;$(ToolsPath)NCover\v3.4.12.6869\NCover.Console.exe&quot;</NcoverExe>
        <NCoverReportingExe>&quot;$(ToolsPath)NCover\v3.4.12.6869\NCover.Reporting.exe&quot;</NCoverReportingExe>
        
        <FxCopReport>&quot;$(ReportOutputPath)FxCop_Analysis.html&quot;</FxCopReport>
        <MspecXmlReport>$(ReportOutputPath)Mspec_Report.xml</MspecXmlReport>
        <CodeAnalysisDictionary>&quot;$(SourceCodePath)CodeAnalysisDictionary.xml&quot;</CodeAnalysisDictionary>
        <NCoverTrendFile>$(ReportOutputPath)coverage.trend</NCoverTrendFile>
        <NCoverCoverageFile>$(ReportOutputPath)coverage.xml</NCoverCoverageFile>
        <NCoverLogFile>&quot;$(ReportOutputPath)coverage.log&quot;</NCoverLogFile>
        <NCoverHtmlPath>$(ReportOutputPath)NCover</NCoverHtmlPath>
    </PropertyGroup>
    
    <PropertyGroup>
        <Configuration>Release</Configuration>
    </PropertyGroup>
    
    <ItemGroup>
        <SourceFiles Include="$(SourceCodePath)**\*.cs" Exclude="$(SourceCodePath)**\*.Designer.cs;$(SourceCodePath)VersionInfo.cs;$(SourceCodePath)**\*.Tests\*;$(SourceCodePath)**\*.Tests\**\*;" />
    </ItemGroup>
    
    <UsingTask TaskName="InsertLine" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <Path ParameterType="System.String" Required="true" />
            <LineNumber ParameterType="System.Int32" Required="false" />
            <Text ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Code Type="Fragment" Language="cs"><![CDATA[
            IEnumerable<string> readLines = File.ReadLines(Path);
            int lineCount = 0;
            StringBuilder newContent = new StringBuilder();
            foreach (string readLine in readLines)
            {
                if (lineCount == LineNumber)
                {
                    newContent.AppendLine(Text);
                }

                newContent.AppendLine(readLine);

                lineCount++;
            }

            File.WriteAllText(Path, newContent.ToString());
]]></Code>
        </Task>
    </UsingTask>
    
    <Target Name="__removeEmptyDirectories">
        <Message Text="##### Removing empty directories after running '$(CallingTarget)' #####" />
        <Exec Command="for /f &quot;usebackq&quot; %%d in (`&quot;dir /S /B /AD $(BuildOutputPath) | sort /R&quot;`) do rd &quot;%%d&quot;" />
    </Target>

    <Target Name="Clean">
        <ItemGroup>
            <BuildArtifactsToDelete Include="$(BuildOutputPath)**\*;$(BuildOutputPath)*.*" Exclude="$(NCoverTrendFile)"/>
        </ItemGroup>
        <Delete Files="@(BuildArtifactsToDelete)" Condition=" Exists('$(BuildOutputPath)') " />
        
        <Exec Command="set" />
        
        <MSBuild Targets="__removeEmptyDirectories" Projects="$(MSBuildProjectFile)" Properties="CallingTarget=Clean" />
    </Target>
    
    <Target Name="Init" DependsOnTargets="Clean">
        <MakeDir Directories="$(BuildOutputPath)" />
        <MakeDir Directories="$(ReportOutputPath)" Condition=" !Exists('$(ReportOutputPath)')" />
    </Target>
    
    <Target Name="UpdateVersion">
        <!--<Exec Command="$(GitExe) fetch" ContinueOnError="true" /> -->
        <Exec Command="$(GitExe) describe --tags > $(BuildOutputPath)_version" Condition=" Exists('$(BasePath).git\') " ContinueOnError="true"/>
        <ReadLinesFromFile File="$(BuildOutputPath)_version" Condition=" Exists('$(BuildOutputPath)_version') ">
            <Output TaskParameter="Lines" ItemName="VersionLines" />
        </ReadLinesFromFile>
        <Delete Files="$(BuildOutputPath)_version" Condition=" Exists('$(BuildOutputPath)_version') " />
        <RegexReplace Input="@(VersionLines)" Expression="-.{8}$" Replacement="" Condition=" '@(VersionLines)' != '' ">
            <Output TaskParameter="Output" ItemName="VersionTag" />
        </RegexReplace>
        <RegexReplace Input="@(VersionTag)" Expression="v" Replacement="" Condition=" '@(VersionTag)' != ''">
            <Output TaskParameter="Output" ItemName="VersionTag1" />
        </RegexReplace>
        <RegexReplace Input="@(VersionTag1)" Expression="-" Replacement="." Condition=" '@(VersionTag1)' != '' ">
            <Output TaskParameter="Output" ItemName="VersionTag2" />
        </RegexReplace>
        <RegexReplace Input="@(VersionTag1)" Expression="-\d+$" Replacement=".0" Condition=" '@(VersionTag1)' != '' ">
            <Output TaskParameter="Output" ItemName="AssemblyVersion" />
        </RegexReplace>
        <CreateProperty Value="@(VersionTag2)" Condition=" '@(VersionTag2)' != '' ">
            <Output TaskParameter="Value" PropertyName="Version" />
        </CreateProperty>
        <CreateProperty Value="@(AssemblyVersion)" Condition=" '@(AssemblyVersion)' != '' ">
            <Output TaskParameter="Value" PropertyName="AssemblyVersion" />
        </CreateProperty>
        <Message Text="Unable to find Git tag information.  Using default value" Importance="high" Condition=" '@(VersionTag2)' == '' OR '@(AssemblyVersion)' == '' " />
        <CreateProperty Value="100.255.255.255" Condition=" '@(VersionTag2)' == '' ">
            <Output TaskParameter="Value" PropertyName="Version" />
        </CreateProperty>
        <CreateProperty Value="100.255.255.255" Condition=" '@(AssemblyVersion)' == '' ">
            <Output TaskParameter="Value" PropertyName="AssemblyVersion" />
        </CreateProperty>
        <Message Text="The assembly version of this build is '$(AssemblyVersion)'" />
        <Message Text="The version of this build is '$(Version)'" />
    </Target>
    
    <Target Name="UpdateVersionFile" DependsOnTargets="UpdateVersion">
        <Copy SourceFiles="$(SourceCodePath)VersionInfo.Example.cs" DestinationFiles="$(SourceCodePath)VersionInfo.cs" Condition="!Exists('$(SourceCodePath)VersionInfo.cs')" />
        <!-- Update VersionInfo.cs for assembly versions -->
        <ReadLinesFromFile File="$(SourceCodePath)VersionInfo.cs">
            <Output TaskParameter="Lines" ItemName="_versionInfoLines" />
        </ReadLinesFromFile>
        <RegexReplace Input="@(_versionInfoLines)" Expression="\d+\.\d+\.\d+\.\d+" Replacement="$(Version)">
            <Output TaskParameter="Output" ItemName="_newVersionInfoLines" />
        </RegexReplace>
        <RegexReplace Input="@(_newVersionInfoLines)" Expression="AssemblyVersion\(&quot;\d+\.\d+\.\d+\.\d+" Replacement="AssemblyVersion(&quot;$(AssemblyVersion)">
            <Output TaskParameter="Output" ItemName="_newVersionInfoLines1" />
        </RegexReplace>
        <WriteLinesToFile File="$(SourceCodePath)VersionInfo.cs" Lines="@(_newVersionInfoLines1)" Overwrite="true" />
    </Target>
    
    <Target Name="Build" DependsOnTargets="Init;UpdateVersionFile">
        <Message Text="===== Building main projects =====" />
        <ItemGroup>
            <ProjectsToBuild Include="$(SourceCodePath)**\Vici.Client.csproj" />
            <ProjectsToBuild Include="$(SourceCodePath)**\Vici.Contracts.csproj" />
            <ProjectsToBuild Include="$(SourceCodePath)**\Vici.Core.csproj" />
            <ProjectsToBuild Include="$(SourceCodePath)**\Vici.Console.csproj" />
            <ProjectsToBuild Include="$(SourceCodePath)**\Vici.WindowsService.csproj" />
            <ProjectsToBuild Include="$(SourceCodePath)**\Vici.Weather.csproj" />
        </ItemGroup>
        <MSBuild Projects="@(ProjectsToBuild )" Properties="Configuration=$(Configuration);TrackFileAccess=false" Targets="Rebuild" />
    </Target>
    
    <Target Name="Build_Tests" DependsOnTargets="Build">
        <Message Text="===== Building test projects =====" />
        <ItemGroup>
            <TestProjectsToBuild Include="$(SourceCodePath)**\Vici.Core.Tests.csproj" />
            <TestProjectsToBuild Include="$(SourceCodePath)**\Vici.Contracts.Tests.csproj" />
        </ItemGroup>
        <MSBuild Projects="@(TestProjectsToBuild)" Properties="Configuration=$(Configuration);TrackFileAccess=false" Targets="Rebuild" />
    </Target>
    
    <Target Name="Build_Installer" DependsOnTargets="Build;UpdateVersionFile">
        <Message Text="===== Building installer =====" />
        <!-- Copy the installer project to the build folder so updates don't affect source control -->
        <ItemGroup>
            <InstallerFiles Include="$(SourceCodePath)Vici.Installer\**\*.*" Exclude="$(SourceCodePath)Vici.Installer\bin\**\*.*;$(SourceCodePath)Vici.Installer\obj\**\*.*" />
        </ItemGroup>
        <Copy SourceFiles="@(InstallerFiles)" DestinationFolder="$(BuildOutputPath)Installer\%(RecursiveDir)" />
        
        
        <ItemGroup>
            <InstallerProject Include="$(BuildOutputPath)**\*.wixproj" />
            <InstallerProperties Include="$(BuildOutputPath)**\BuildProperties.wxi" />
        </ItemGroup>
        
        <!-- Update the version information -->
        <ReadLinesFromFile File="@(InstallerProperties)">
            <Output TaskParameter="Lines" ItemName="_installerPropertiesLines" />
        </ReadLinesFromFile>
        <RegexReplace Input="@(_installerPropertiesLines)" Expression="&quot;\d+\.\d+\.\d+\.\d+&quot;" Replacement="&quot;$(Version)&quot;">
            <Output TaskParameter="Output" ItemName="_newInstallerProperties" />
        </RegexReplace>
        <WriteLinesToFile File="@(InstallerProperties)" Lines="@(_newInstallerProperties)" Overwrite="true" />
        
        <!-- Build the installer & move it to the root of the build folder -->
        <MSBuild Projects="@(InstallerProject)" Properties="Configuration=$(Configuration);DefineSolutionProperties=false;TrackFileAccess=false" />
        <Delete Files="$(BuildOutputPath)$(Configuration)\Vici.Installer.wixpdb" />
        <Copy SourceFiles="$(BuildOutputPath)$(Configuration)\Vici.Installer.msi" DestinationFiles="$(BuildOutputPath)$(MSBuildProjectName)_$(Version)_Install.msi" />
        <Delete Files="$(BuildOutputPath)$(Configuration)\Vici.Installer.msi" />
        
        <!-- Clear out the copied Installer project files -->
        <ItemGroup>
            <_CopiedInstallerFiles Include="$(BuildOutputPath)Installer\**\*;$(BuildOutputPath)Installer\*" />
        </ItemGroup>
        <Delete Files="@(_CopiedInstallerFiles)" />
        <RemoveDir Directories="$(BuildOutputPath)Installer" ContinueOnError="true" />
    </Target>
    
    <Target Name="Build_All" DependsOnTargets="Build;Build_Tests;Build_Installer">
    </Target>
    
    <Target Name="ArchiveSource" DependsOnTargets="UpdateVersion;Init">
        <Exec Command="$(GitExe) archive --format=zip -9 --output=&quot;$(BuildOutputPath)$(MSBuildProjectName)_$(Version)_src.zip&quot; master" WorkingDirectory="$(BasePath)" Condition=" Exists('$(BasePath).git\') " />
        <Message Text="Skipping ArchiveSource because the code does not look to be under git source control.  (.git folder doesn't exist)" Condition=" !Exists('$(BasePath).git\') " />
    </Target>
    
    <Target Name="ArchiveBinaries" DependsOnTargets="UpdateVersion;Init;Build;">
        <ItemGroup>
            <BinariesToArchive Include="$(BuildOutputPath)$(Configuration)\**\*.*" Exclude="$(BuildOutputPath)**\*.pdb;$(BuildOutputPath)**\*.CodeAnalysisLog.xml;$(BuildOutputPath)**\*.lastcodeanalysissucceeded;$(BuildOutputPath)**\*.Tests*;$(BuildOutputPath)**\*.Spec*;$(BuildOutputPath)**\Moq.*" />
        </ItemGroup>
        <!-- The @(BinariesToArchive) needs to be projected this way due to how 7za.exe handles relative paths and preserving subdirectories. -->
        <Exec Command="$(ZipExe) a -tzip -mx9 -mmt -w&quot;$(BuildOutputPath)$(Configuration)\&quot; &quot;$(BuildOutputPath)$(MSBuildProjectName)_$(Version)_bin.zip&quot; @(BinariesToArchive->'%(RecursiveDir)%(Filename)%(Extension)', ' ')" WorkingDirectory="$(BuildOutputPath)$(Configuration)\" />
    </Target>

    <Import Project="$(ToolsPath)StyleCop\v4.4.0.12\Microsoft.StyleCop.Targets" />

    <Target Name="AnalyzeAssemblies" DependsOnTargets="Init;Build;Build_Tests">
        <!-- Attempt to make the directory, just in case it doesn't exist.  Occasionally running into errors of a path not existing. -->
        <MakeDir Directories="$(ReportOutputPath)" Condition=" !Exists('$(ReportOutputPath)')" />
        <ItemGroup>
            <AssembliesToAnalyze Include="$(BuildOutputPath)$(Configuration)\**\Vici*.dll;$(BuildOutputPath)$(Configuration)\**\Vici*.exe" Exclude="$(BuildOutputPath)$(Configuration)\**\*.Tests.dll;$(BuildOutputPath)$(Configuration)\**\*.Tests.exe;" />
        </ItemGroup>
        <Exec Command="$(FxCopExe) &quot;@(AssembliesToAnalyze->'/file:%(FullPath)','&quot; &quot;')&quot; /out:$(FxCopReport) /dictionary:$(CodeAnalysisDictionary) /axsl /s /fo /searchgac /quiet" Condition=" '@(AssembliesToAnalyze)' != '' "/>
        <StyleCopTask
            SourceFiles="@(SourceFiles)"
            ForceFullAnalysis="true"
            OutputFile="$(ReportOutputPath)Stylecop.xml"
            CacheResults="false"
            ProjectFullPath="$(SourceCodePath)"
            OverrideSettingsFile="$(SourceCodePath)Settings.StyleCop"
            TreatErrorsAsWarnings="true" />
        <ItemGroup>
        </ItemGroup>
        <InsertLine Path="$(ReportOutputPath)Stylecop.xml" LineNumber="0" Text="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;" />
        <InsertLine Path="$(ReportOutputPath)Stylecop.xml" LineNumber="1" Text="&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;StyleCop.xsl&quot;?&gt;" />
        
        <!-- Need to have the ContinueOnError because it fails if KeyName doesn't exist. -->
        <RegistryRead KeyName="HKEY_LOCAL_MACHINE\SOFTWARE\Gnoso\NCover" ValueName="Key" DefaultValue="" ContinueOnError="true">
            <Output TaskParameter="Value" PropertyName="NCoverKeyValue" />
        </RegistryRead>
        <ItemGroup>
            <TestAssembliesToAnalyze Include="$(BuildOutputPath)$(Configuration)\**\*.Tests.dll;$(BuildOutputPath)$(Configuration)\**\*.Specs.dll;" />
        </ItemGroup>
        
        <!-- Only run MSpec by itself if NCover isn't registered on this machine -->
        <Exec Command="$(MspecExe) --xml &quot;$(MspecXmlReport)&quot; -t &quot;@(TestAssembliesToAnalyze, '&quot; &quot;')&quot;" Condition=" '$(NCoverKeyValue)' == '' " ContinueOnError="true">
            <Output TaskParameter="ExitCode" PropertyName="NcoverExitCode" />
        </Exec>
        
        <!-- Run NCover (et. al.) if it is registered on this machine. -->
        <Exec Command="$(NcoverExe) $(MspecExe) --xml &quot;$(MspecXmlReport)&quot; -t &quot;@(TestAssembliesToAnalyze, '&quot; &quot;')&quot; //at &quot;$(NCoverTrendFile)&quot; //l $(NCoverLogFile) //x &quot;$(NCoverCoverageFile)&quot; //eas &quot;CommandLine;Machine\.Specifications.*;mspec;Spark;Moq;.*\.Tests$;.*\.Specs$&quot;" Condition=" '@(TestAssembliesToAnalyze)' != '' and '$(NCoverKeyValue)' != '' " ContinueOnError="true">
            <Output TaskParameter="ExitCode" PropertyName="NcoverExitCode" />
        </Exec>
        <Message Text="Generating the report from the coverage..." Condition=" '$(NCoverKeyValue)' != '' " />
        <Exec Command="$(NCoverReportingExe) &quot;$(NCoverCoverageFile)&quot; //or FullCoverageReport //op &quot;$(NCoverHtmlPath)&quot; //at &quot;$(NCoverTrendFile)&quot; //p $(MSBuildProjectName)" Condition=" Exists('$(NCoverCoverageFile)') and '$(NCoverKeyValue)' != '' " />
        <ItemGroup>
            <XslFile Include="$(ToolsPath)Machine.Spec\Mspec_Report.xsl" />
            <XslFile Include="$(ToolsPath)StyleCop\v4.4.0.12\StyleCop.xsl" />
        </ItemGroup>
        <Copy SourceFiles="@(XslFile)" DestinationFolder="$(ReportOutputPath)" />
        <InsertLine Path="$(MspecXmlReport)" LineNumber="1" Text="&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;Mspec_Report.xsl&quot;?&gt;" />
        
        <Error Code="$(NcoverExitCode)" Text="NCover has returned with an error, most likely due to failing specifications.  Please review all the report outputs." Condition=" '$(NcoverExitCode)' != '0' and '$(NcoverExitCode)' != ''" />
    </Target>
    
    <Target Name="Everything" DependsOnTargets="Build_All;AnalyzeAssemblies;ArchiveSource;ArchiveBinaries">
        <Message Text="Building everything" />
        <MSBuild Targets="__removeEmptyDirectories" Projects="$(MSBuildProjectFile)" Properties="CallingTarget=Everything" />
    </Target>
    
    <Target Name="Development" DependsOnTargets="Build;Build_Tests;AnalyzeAssemblies;">
        <Message Text="Building development build" />
        <MSBuild Targets="__removeEmptyDirectories" Projects="$(MSBuildProjectFile)" Properties="CallingTarget=Development" />
    </Target>
</Project>