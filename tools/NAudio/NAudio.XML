<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NAudio</name>
    </assembly>
    <members>
        <member name="T:NAudio.Dmo.OutputStreamInfoFlags">
            <summary>
            The Output Stream Info Flags
            </summary>
        </member>
        <member name="F:NAudio.Dmo.OutputStreamInfoFlags.DMO_OUTPUT_STREAMF_WHOLE_SAMPLES">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.OutputStreamInfoFlags.DMO_OUTPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.OutputStreamInfoFlags.DMO_OUTPUT_STREAMF_FIXED_SAMPLE_SIZE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.OutputStreamInfoFlags.DMO_OUTPUT_STREAMF_DISCARDABLE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.OutputStreamInfoFlags.DMO_OUTPUT_STREAMF_OPTIONAL">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveInStream">
            <summary>
            A class to allow recording from WaveIn
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveStream">
            <summary>
            Base class for all WaveStream classes. Derives from stream.
            </summary>
        </member>
        <member name="T:NAudio.Wave.IWaveProvider">
            <summary>
            Generic interface for all WaveProviders.
            </summary>
        </member>
        <member name="M:NAudio.Wave.IWaveProvider.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Fill the specified buffer with wave data.
            </summary>
            <param name="buffer">The buffer to fill of wave data.</param>
            <param name="offset">Offset into buffer</param>
            <param name="count">The number of bytes to read</param>
            <returns>the number of bytes written to the buffer.</returns>
        </member>
        <member name="P:NAudio.Wave.IWaveProvider.WaveFormat">
            <summary>
            Gets the WaveFormat of this WaveProvider.
            </summary>
            <value>The wave format.</value>
        </member>
        <member name="M:NAudio.Wave.WaveStream.Flush">
            <summary>
            Flush does not need to do anything
            See <see cref="M:System.IO.Stream.Flush"/>
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            An alternative way of repositioning.
            See <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/>
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking, such as if the stream is constructed from a pipe or console output.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="M:NAudio.Wave.WaveStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the WaveStream. Not Supported.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="M:NAudio.Wave.WaveStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the WaveStream. Not Supported.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="offset"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="M:NAudio.Wave.WaveStream.GetReadSize(System.Int32)">
            <summary>
            Recommends a number of bytes to read, given a desired number of
            milliseconds. Use this in subsequent calls to Read, to ensure that
            full blocks are read
            </summary>
            <param name="milliseconds">Number of milliseconds desired</param>
            <returns>Number of bytes to read</returns>
        </member>
        <member name="M:NAudio.Wave.WaveStream.Skip(System.Int32)">
            <summary>
            Moves forward or backwards the specified number of seconds in the stream
            </summary>
            <param name="seconds">Number of seconds to move, can be negative</param>
        </member>
        <member name="M:NAudio.Wave.WaveStream.HasData(System.Int32)">
            <summary>
            Whether the WaveStream has non-zero sample data at the current position for the
            specified count
            </summary>
            <param name="count">Number of bytes to read</param>
            <returns>
            <c>true</c> if the specified count has data; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:NAudio.Wave.WaveStream.WaveFormat">
            <summary>
            Gets Retrieves the WaveFormat for this stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStream.CanRead">
            <summary>
            We can read from this stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStream.CanSeek">
            <summary>
            We can seek within this stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStream.CanWrite">
            <summary>
            We can't write to this stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStream.CurrentTime">
            <summary>
            Gets or sets The current position in the stream in Time format
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStream.TotalTime">
            <summary>
            Gets Total length in real-time of the stream (may be an estimate for compressed files)
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStream.BlockAlign">
            <summary>
            Gets The block alignment for this wavestream. Do not modify the Position
            to anything that is not a whole multiple of this value
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInStream.waveInHandle">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInStream.waveFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInStream.length">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInStream.position">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInStream.recording">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInStream.buffers">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInStream.numBuffers">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInStream.callback">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInStream.waveInWindow">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveInStream.#ctor(System.Int32,NAudio.Wave.WaveFormat,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveInStream"/> class. 
            Creates a new Wave input stream
            </summary>
            <param name="deviceNumber">
            The device to open - 0 is default
            </param>
            <param name="desiredFormat">
            The PCM format to record in
            </param>
            <param name="callbackWindow">
            If this parameter is non-null, the Wave In Messages
            will be sent to the message loop of the supplied control. This is considered a
            safer way to use the waveIn functionality
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveInStream.StartRecording">
            <summary>
            Start recording
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveInStream.StopRecording">
            <summary>
            Stop recording
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveInStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from this stream. For future use.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="offset"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="M:NAudio.Wave.WaveInStream.Dispose(System.Boolean)">
            <summary>
            Dispose pattern
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Wave.WaveInStream.Callback(System.IntPtr,NAudio.Wave.MmeInterop.WaveInterop.WaveMessage,System.IntPtr,NAudio.Wave.WaveHeader,System.IntPtr)">
            <summary>
            Called when we get a new buffer of recorded data
            </summary>
            <param name="waveInHandle">The wave in handle.</param>
            <param name="message">The message.</param>
            <param name="userData">The user data.</param>
            <param name="waveHeader">The wave header.</param>
            <param name="reserved">The reserved.</param>
        </member>
        <member name="E:NAudio.Wave.WaveInStream.DataAvailable">
            <summary>
            Indicates recorded data is available 
            </summary>
        </member>
        <member name="E:NAudio.Wave.WaveInStream.RecordingStopped">
            <summary>
            Indicates that all recorded data has now been received.
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveInStream.Length">
            <summary>
            number of bytes received in this recording session
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveInStream.Position">
            <summary>
            Current position in the stream. For future use
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveInStream.WaveFormat">
            <summary>
            WaveFormat we are recording in
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveStreams.CueList">
            <summary>
            Holds a list of cues
            </summary>
            <remarks>
            The specs for reading and writing cues from the cue and list RIFF chunks 
            are from http://www.sonicspot.com/guide/wavefiles.html and http://www.wotsit.org/
            ------------------------------
            The cues are stored like this:
            ------------------------------
            <code>
            struct CuePoint
            {
             Int32 dwIdentifier;
             Int32 dwPosition;
             Int32 fccChunk;
             Int32 dwChunkStart;
             Int32 dwBlockStart;
             Int32 dwSampleOffset;
            } 
            </code>
            <code>
            struct CueChunk
            {
             Int32 chunkID;
             Int32 chunkSize;
             Int32 dwCuePoints;
             CuePoint[] points;
            }
            </code>
            ------------------------------
            Labels look like this:
            ------------------------------
            <code>
            struct ListHeader 
            {
              Int32 listID;      /* 'list' */
              Int32 chunkSize;   /* includes the Type ID below */
              Int32 typeID;      /* 'adtl' */
            } 
            </code>
            <code>
            struct LabelChunk 
            {
              Int32 chunkID;
              Int32 chunkSize;
              Int32 dwIdentifier;
              Char[] dwText;  /* Encoded with extended ASCII */
            } LabelChunk;
            </code>
            </remarks>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.CueList.cues">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.CueList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveStreams.CueList"/> class. 
            Creates an empty cue list
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.CueList.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveStreams.CueList"/> class. 
            Creates a cue list from the cue RIFF chunk and the list RIFF chunk
            </summary>
            <param name="cueChunkData">
            The data contained in the cue chunk
            </param>
            <param name="listChunkData">
            The data contained in the list chunk
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.CueList.Add(NAudio.Wave.Cue)">
            <summary>
            Adds an item to the list
            </summary>
            <param name="cue">The Cue to add</param>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.CueList.FromChunks(NAudio.Wave.WaveFileReader)">
            <summary>
            Checks if the cue and list chunks exist and if so, creates a cue list
            </summary>
            <param name="reader">The reader.</param>
            <returns>The Cue List.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.CueList.GetRIFFChunks">
            <summary>
            Gets the cues as the concatenated cue and list RIFF chunks.
            </summary>
            <returns>RIFF chunks containing the cue data</returns>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.CueList.CuePositions">
            <summary>
            Gets sample positions for the embedded cues
            </summary>
            <returns>Array containing the cue positions</returns>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.CueList.CueLabels">
            <summary>
            Gets labels for the embedded cues
            </summary>
            <returns>Array containing the labels</returns>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.CueList.Count">
            <summary>
            Gets Number of cues
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.CueList.Item(System.Int32)">
            <summary>
            Accesses the cue at the specified index
            </summary>
            <param name="index">The index to get.</param>
            <value>A cue at the specific index</value>
            <returns>The Cue at the index.</returns>
        </member>
        <member name="T:NAudio.Wave.WaveFormatExtensible">
            <summary>
            <para>Originally known as WaveFormatExtensible</para>
            <para>For more information, see http://www.microsoft.com/whdc/device/audio/multichaud.mspx.</para>
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveFormat">
            <summary>
            Represents a Wave file format
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormat.waveFormatTag">
            <summary>format type</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormat.channels">
            <summary>number of channels</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormat.sampleRate">
            <summary>sample rate</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormat.averageBytesPerSecond">
            <summary>for buffer estimation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormat.blockAlign">
            <summary>block size of data</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormat.bitsPerSample">
            <summary>number of bits per sample of mono data</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormat.extraSize">
            <summary>number of following bytes</summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveFormat"/> class. 
            Creates a new PCM 44.1Khz stereo 16 bit format
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveFormat"/> class. 
            Creates a new 16 bit wave format with the specified sample
            rate and channel count
            </summary>
            <param name="sampleRate">
            Sample Rate
            </param>
            <param name="channels">
            Number of channels
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveFormat"/> class.
            Creates a new PCM format with the specified sample rate, bit depth and channels
            </summary>
            <param name="rate">The sample rate.</param>
            <param name="bits">The bits per sample.</param>
            <param name="channels">The channels.</param>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.CreateCustomFormat(NAudio.Wave.WaveFormatEncoding,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a WaveFormat with custom members
            </summary>
            <param name="tag">The encoding</param>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of channels</param>
            <param name="averageBytesPerSecond">Average Bytes Per Second</param>
            <param name="blockAlign">Block Align</param>
            <param name="bitsPerSample">Bits Per Sample</param>
            <returns>The new Wave Format</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.CreateALawFormat(System.Int32,System.Int32)">
            <summary>
            Creates an A-law wave format
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of Channels</param>
            <returns>Wave Format</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.CreateMuLawFormat(System.Int32,System.Int32)">
            <summary>
            Creates a Mu-law wave format
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of Channels</param>
            <returns>Wave Format</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.CreateIeeeFloatWaveFormat(System.Int32,System.Int32)">
            <summary>
            Creates a new 32 bit IEEE floating point wave format
            </summary>
            <param name="sampleRate">sample rate</param>
            <param name="channels">number of channels</param>
            <returns>The Wave Format.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.MarshalFromPtr(System.IntPtr)">
            <summary>
            Helper function to retrieve a WaveFormat structure from a pointer
            </summary>
            <param name="pointer">WaveFormat structure</param>
            <returns>The WaveFormat based on the pointer.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.MarshalToPtr(NAudio.Wave.WaveFormat)">
            <summary>
            Helper function to marshal WaveFormat to an IntPtr
            </summary>
            <param name="format">The WaveFormat</param>
            <returns>IntPtr to WaveFormat structure (needs to be freed by callee)</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.FromFormatChunk(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads in a WaveFormat (with extra data) from a fmt chunk (chunk identifier and
            length should already have been read)
            </summary>
            <param name="br">Binary reader</param>
            <param name="formatChunkLength">Format chunk length</param>
            <returns>A WaveFormatExtraData</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.ConvertLatencyToByteSize(System.Int32)">
            <summary>
            Gets the size of a wave buffer equivalent to the latency in milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns>The converted latency</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveFormat"/> class. 
            Reads a new WaveFormat object from a stream
            </summary>
            <param name="br">
            A binary reader that wraps the stream
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.ToString">
            <summary>
            Reports this WaveFormat as a string
            </summary>
            <returns>String describing the wave format</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.Equals(System.Object)">
            <summary>
            Compares with another WaveFormat object
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>True if the objects are the same</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.GetHashCode">
            <summary>
            Provides a Hashcode for this WaveFormat
            </summary>
            <returns>A hashcode</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.Serialize(System.IO.BinaryWriter)">
            <summary>
            Writes this WaveFormat object to a stream
            </summary>
            <param name="writer">the output stream</param>
        </member>
        <member name="M:NAudio.Wave.WaveFormat.ReadWaveFormat(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads the wave format.
            </summary>
            <param name="br">The binary reader.</param>
            <param name="formatChunkLength">Length of the format chunk.</param>
        </member>
        <member name="P:NAudio.Wave.WaveFormat.Encoding">
            <summary>
            Gets Returns the encoding type used
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormat.Channels">
            <summary>
            Gets Returns the number of channels (1=mono,2=stereo etc)
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormat.SampleRate">
            <summary>
            Gets Returns the sample rate (samples per second)
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormat.AverageBytesPerSecond">
            <summary>
            Gets Returns the average number of bytes used per second
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormat.BlockAlign">
            <summary>
            Gets Returns the block alignment
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormat.BitsPerSample">
            <summary>
            Gets Returns the number of bits per sample (usually 16 or 32, sometimes 24 or 8)
            Can be 0 for some codecs
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormat.ExtraSize">
            <summary>
            Gets Returns the number of extra bytes used by this waveformat. Often 0,
            except for compressed formats which store extra data after the WAVEFORMATEX header
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatExtensible.wValidBitsPerSample">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatExtensible.dwChannelMask">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatExtensible.subFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormatExtensible.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveFormatExtensible"/> class.
            Creates a new WaveFormatExtensible for PCM or IEEE
            </summary>
            <param name="rate">The sample rate.</param>
            <param name="bits">The bits per sample.</param>
            <param name="channels">The channels.</param>
        </member>
        <member name="M:NAudio.Wave.WaveFormatExtensible.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NAudio.Wave.WaveFormatExtensible"/> class from being created. 
            Parameterless constructor for marshalling
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormatExtensible.Serialize(System.IO.BinaryWriter)">
            <summary>
            Writes this WaveFormat object to a stream
            </summary>
            <param name="writer">the output stream</param>
        </member>
        <member name="M:NAudio.Wave.WaveFormatExtensible.ToString">
            <summary>
            String representation
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:NAudio.Wave.WaveFormatEncoding">
            <summary>
            Defines what type of format the wave is encoded in.
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Unknown">
            <summary>WAVE_FORMAT_UNKNOWN,    Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Pcm">
            <summary>WAVE_FORMAT_PCM        Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Adpcm">
            <summary>WAVE_FORMAT_ADPCM        Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.IeeeFloat">
            <summary>WAVE_FORMAT_IEEE_FLOAT Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Vselp">
            <summary>WAVE_FORMAT_VSELP        Compaq Computer Corp.</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.IbmCvsd">
            <summary>WAVE_FORMAT_IBM_CVSD    IBM Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.ALaw">
            <summary>WAVE_FORMAT_ALAW        Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.MuLaw">
            <summary>WAVE_FORMAT_MULAW        Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Dts">
            <summary>WAVE_FORMAT_DTS        Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Drm">
            <summary>WAVE_FORMAT_DRM        Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.OkiAdpcm">
            <summary>WAVE_FORMAT_OKI_ADPCM    OKI</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DviAdpcm">
            <summary>WAVE_FORMAT_DVI_ADPCM    Intel Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.ImaAdpcm">
            <summary>WAVE_FORMAT_IMA_ADPCM  Intel Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.MediaspaceAdpcm">
            <summary>WAVE_FORMAT_MEDIASPACE_ADPCM Videologic</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.SierraAdpcm">
            <summary>WAVE_FORMAT_SIERRA_ADPCM Sierra Semiconductor Corp </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.G723Adpcm">
            <summary>WAVE_FORMAT_G723_ADPCM Antex Electronics Corporation </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DigiStd">
            <summary>WAVE_FORMAT_DIGISTD DSP Solutions, Inc.</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DigiFix">
            <summary>WAVE_FORMAT_DIGIFIX DSP Solutions, Inc.</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DialogicOkiAdpcm">
            <summary>WAVE_FORMAT_DIALOGIC_OKI_ADPCM Dialogic Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.MediaVisionAdpcm">
            <summary>WAVE_FORMAT_MEDIAVISION_ADPCM Media Vision, Inc.</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.CUCodec">
            <summary>WAVE_FORMAT_CU_CODEC Hewlett-Packard Company </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.YamahaAdpcm">
            <summary>WAVE_FORMAT_YAMAHA_ADPCM Yamaha Corporation of America</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.SonarC">
            <summary>WAVE_FORMAT_SONARC Speech Compression</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DspGroupTruespeech">
            <summary>WAVE_FORMAT_DSPGROUP_TRUESPEECH DSP Group, Inc </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.EchoSpeechCorporation1">
            <summary>WAVE_FORMAT_ECHOSC1 Echo Speech Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.AudioFileAf36">
            <summary>WAVE_FORMAT_AUDIOFILE_AF36, Virtual Music, Inc.</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Aptx">
            <summary>WAVE_FORMAT_APTX Audio Processing Technology</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.AudioFileAf10">
            <summary>WAVE_FORMAT_AUDIOFILE_AF10, Virtual Music, Inc.</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Prosody1612">
            <summary>WAVE_FORMAT_PROSODY_1612, Aculab plc</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Lrc">
            <summary>WAVE_FORMAT_LRC, Merging Technologies S.A. </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DolbyAc2">
            <summary>WAVE_FORMAT_DOLBY_AC2, Dolby Laboratories</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Gsm610">
            <summary>WAVE_FORMAT_GSM610, Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.MsnAudio">
            <summary>WAVE_FORMAT_MSNAUDIO, Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.AntexAdpcme">
            <summary>WAVE_FORMAT_ANTEX_ADPCME, Antex Electronics Corporation</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.ControlResVqlpc">
            <summary>WAVE_FORMAT_CONTROL_RES_VQLPC, Control Resources Limited </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DigiReal">
            <summary>WAVE_FORMAT_DIGIREAL, DSP Solutions, Inc. </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.DigiAdpcm">
            <summary>WAVE_FORMAT_DIGIADPCM, DSP Solutions, Inc.</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.ControlResCr10">
            <summary>WAVE_FORMAT_CONTROL_RES_CR10, Control Resources Limited</summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_NMS_VBXADPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_CS_IMAADPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ECHOSC3">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ROCKWELL_ADPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ROCKWELL_DIGITALK">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_XEBEC">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_G721_ADPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_G728_CELP">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_MSG723">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Mpeg">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_RT24">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_PAC">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.MpegLayer3">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_LUCENT_G723">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_CIRRUS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ESPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_CANOPUS_ATRAC">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_G726_ADPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_G722_ADPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_DSAT_DISPLAY">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_BYTE_ALIGNED">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC8">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC10">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC16">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC20">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT24">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT29">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT29HW">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_VR12">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_VR18">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_TQ40">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SOFTSOUND">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_TQ60">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_MSRT24">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_G729A">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_MVI_MVI2">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_DF_G726">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_DF_GSM610">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ISIAUDIO">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ONLIVE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SBC24">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_DOLBY_AC3_SPDIF">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_MEDIASONIC_G723">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_PROSODY_8KBPS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ZYXEL_ADPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_PHILIPS_LPCBB">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_PACKED">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_MALDEN_PHONYTALK">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Gsm">
            <summary>
            Originally known as WAVE_FORMAT_GSM
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.G729">
            <summary>
            Originally known as WAVE_FORMAT_G729
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.G723">
            <summary>
            Originally known as WAVE_FORMAT_G723
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Acelp">
            <summary>
            Originally known as WAVE_FORMAT_ACELP
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_RHETOREX_ADPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_IRAT">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VIVO_G723">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VIVO_SIREN">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_DIGITAL_G723">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SANYO_LD_ADPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACEPLNET">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACELP4800">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACELP8V3">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_G729">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_G729A">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_KELVIN">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_G726ADPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_QUALCOMM_PUREVOICE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_QUALCOMM_HALFRATE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_TUBGSM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_MSAUDIO1">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_WMAUDIO2">
            <summary>
            WAVE_FORMAT_WMAUDIO2, Microsoft Corporation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_WMAUDIO3">
            <summary>
            WAVE_FORMAT_WMAUDIO3, Microsoft Corporation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ADPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ULAW">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ALAW">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_16K">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_ADPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH8">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH10">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_UHER_ADPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_QUARTERDECK">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ILINK_VC">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_RAW_SPORT">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_ESST_AC3">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_IPI_HSX">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_IPI_RPELP">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_CS2">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SONY_SCX">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_FM_TOWNS_SND">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_BTV_DIGITAL">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_QDESIGN_MUSIC">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_VME_VMPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_TPC">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_OLIGSM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_OLIADPCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_OLICELP">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_OLISBC">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_OLIOPR">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_LH_CODEC">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_NORRIS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_DVM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Extensible">
            <summary>
            Originally known as WAVE_FORMAT_EXTENSIBLE
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.WAVE_FORMAT_DEVELOPMENT">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Vorbis1">
            <summary>
            WAVE_FORMAT_VORBIS1 "Og" Original stream compatible
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Vorbis2">
            <summary>
            WAVE_FORMAT_VORBIS2 "Pg" Have independent header
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Vorbis3">
            <summary>
            WAVE_FORMAT_VORBIS3 "Qg" Have no codebook header
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Vorbis1P">
            <summary>
            WAVE_FORMAT_VORBIS1P "og" Original stream compatible
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Vorbis2P">
            <summary>
            WAVE_FORMAT_VORBIS2P "pg" Have independent header
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatEncoding.Vorbis3P">
            <summary>
            WAVE_FORMAT_VORBIS3P "qg" Have no codebook header
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveFormats.OggWaveFormat">
            <summary>
            The ogg wave format
            </summary>
            <remarks>
            For more information, see http://svn.xiph.org/tags/vorbisacm_20020708/src/vorbisacm/vorbisacm.h
            </remarks>
        </member>
        <member name="F:NAudio.Wave.WaveFormats.OggWaveFormat.dwVorbisACMVersion">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormats.OggWaveFormat.dwLibVorbisVersion">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveInCapabilities">
            <summary>
            WaveInCapabilities structure (based on WAVEINCAPS from mmsystem.h)
            http://msdn.microsoft.com/en-us/library/ms713726(VS.85).aspx
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInCapabilities.MaxProductNameLength">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInCapabilities.manufacturerId">
            <summary>
            Originally known as wMid
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInCapabilities.productId">
            <summary>
            Originally known as wPid
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInCapabilities.driverVersion">
            <summary>
            Originally known as vDriverVersion
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInCapabilities.productName">
            <summary>
            Product Name (szPname)
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInCapabilities.supportedFormats">
            <summary>
            Supported formats (bit flags) dwFormats 
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInCapabilities.channels">
            <summary>
            Supported channels (1 for mono 2 for stereo) (wChannels)
            Seems to be set to -1 on a lot of devices
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveInCapabilities.reserved">
            <summary>
            Originally known as wReserved1
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveInCapabilities.Channels">
            <summary>
            Gets Number of channels supported
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveInCapabilities.ProductName">
            <summary>
            Gets The product name
            </summary>
        </member>
        <member name="T:NAudio.Wave.AcmStreamConvertFlags">
            <summary>
            The ACM Stream Convert Flags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.AcmStreamConvertFlags.BlockAlign">
            <summary>
            Originally known as ACM_STREAMCONVERTF_BLOCKALIGN
            </summary>
        </member>
        <member name="F:NAudio.Wave.AcmStreamConvertFlags.Start">
            <summary>
            Originally known as ACM_STREAMCONVERTF_START
            </summary>
        </member>
        <member name="F:NAudio.Wave.AcmStreamConvertFlags.End">
            <summary>
            Originally known as ACM_STREAMCONVERTF_END
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOTimeCode">
            <summary>
            The ASIO Time Code
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTimeCode.speed">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTimeCode.timeCodeSamples">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTimeCode.flags">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTimeCode.future">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOMessageSelector">
            <summary>
            The ASIO Message Selector enum.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioSelectorSupported">
            <summary>
            selector in &lt;value&gt;, returns 1L if supported,
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioEngineVersion">
            <summary>
            returns engine (host) asio implementation version,
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioResetRequest">
            <summary>
            request driver reset. if accepted, this
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioBufferSizeChange">
            <summary>
            not yet supported, will currently always return 0L.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioResyncRequest">
            <summary>
            the driver went out of sync, such that
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioLatenciesChanged">
            <summary>
            the drivers latencies have changed. The engine
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioSupportsTimeInfo">
            <summary>
            if host returns true here, it will expect the
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioSupportsTimeCode">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioMMCCommand">
            <summary>
            unused - value: number of commands, message points to mmc commands
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioSupportsInputMonitor">
            <summary>
            kAsioSupportsXXX return 1 if host supports this
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioSupportsInputGain">
            <summary>
            unused and undefined
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioSupportsInputMeter">
            <summary>
            unused and undefined
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioSupportsOutputGain">
            <summary>
            unused and undefined
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioSupportsOutputMeter">
            <summary>
            unused and undefined
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOMessageSelector.kAsioOverload">
            <summary>
            driver detected an overload
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.Blob">
            <summary>
            The blob struct.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.Blob.Length">
            <summary>
            The length field.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.Blob.Data">
            <summary>
            The data field.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.Blob.FixCS0649">
            <summary>
            Fixes the CS0649.
            </summary>
        </member>
        <member name="T:NAudio.Midi.ChannelAfterTouchEvent">
            <summary>
            Represents a MIDI Channel AfterTouch Event.
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiEvent">
            <summary>
            Represents an individual MIDI event
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiEvent.commandCode">
            <summary>The MIDI command code</summary>
        </member>
        <member name="F:NAudio.Midi.MidiEvent.channel">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiEvent.deltaTime">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiEvent.absoluteTime">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiEvent.#ctor(System.Int64,System.Int32,NAudio.Midi.MidiCommandCode)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.MidiEvent"/> class. 
            Creates a MIDI event with specified parameters
            </summary>
            <param name="absoluteTime">
            Absolute time of this event
            </param>
            <param name="channel">
            MIDI channel number
            </param>
            <param name="commandCode">
            MIDI command code
            </param>
        </member>
        <member name="M:NAudio.Midi.MidiEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.MidiEvent"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiEvent.IsNoteOff(NAudio.Midi.MidiEvent)">
            <summary>
            Whether this is a note off event
            </summary>
            <param name="midiEvent">The midi event.</param>
            <returns>
            <c>true</c> if [is note off] [the specified midi event]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.Midi.MidiEvent.IsNoteOn(NAudio.Midi.MidiEvent)">
            <summary>
            Whether this is a note on event
            </summary>
            <param name="midiEvent">The midi event.</param>
            <returns>
            <c>true</c> if [is note on] [the specified midi event]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.Midi.MidiEvent.IsEndTrack(NAudio.Midi.MidiEvent)">
            <summary>
            Determines if this is an end track event
            </summary>
            <param name="midiEvent">The midi event.</param>
            <returns>
            <c>true</c> if [is end track] [the specified midi event]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.Midi.MidiEvent.FromRawMessage(System.Int32)">
            <summary>
            Creates a MidiEvent from a raw message received using
            the MME MIDI In APIs
            </summary>
            <param name="rawMessage">The short MIDI message</param>
            <returns>A new MIDI Event</returns>
        </member>
        <member name="M:NAudio.Midi.MidiEvent.ReadNextEvent(System.IO.BinaryReader,NAudio.Midi.MidiEvent)">
            <summary>
            Constructs a MidiEvent from a BinaryStream
            </summary>
            <param name="br">The binary stream of MIDI data</param>
            <param name="previous">The previous MIDI event (pass null for first event)</param>
            <returns>A new MidiEvent</returns>
        </member>
        <member name="M:NAudio.Midi.MidiEvent.ReadVarInt(System.IO.BinaryReader)">
            <summary>
            Utility function that can read a variable length integer from a binary stream
            </summary>
            <param name="br">The binary stream</param>
            <returns>The integer read</returns>
        </member>
        <member name="M:NAudio.Midi.MidiEvent.WriteVarInt(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes a variable length integer to a binary stream
            </summary>
            <param name="writer">Binary stream</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:NAudio.Midi.MidiEvent.GetAsShortMessage">
            <summary>
            Converts this MIDI event to a short message (32 bit integer) that
            can be sent by the Windows MIDI out short message APIs
            Cannot be implemented for all MIDI messages
            </summary>
            <returns>A short message</returns>
        </member>
        <member name="M:NAudio.Midi.MidiEvent.ToString">
            <summary>
            Displays a summary of the MIDI event
            </summary>
            <returns>A string containing a brief description of this MIDI event</returns>
        </member>
        <member name="M:NAudio.Midi.MidiEvent.Export(System.Int64@,System.IO.BinaryWriter)">
            <summary>
            Exports this MIDI event's data
            Overriden in derived classes, but they should call this version
            </summary>
            <param name="absoluteTime">Absolute time used to calculate delta. 
            Is updated ready for the next delta calculation</param>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="P:NAudio.Midi.MidiEvent.Channel">
            <summary>
            Gets or sets The MIDI Channel Number for this event
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiEvent.DeltaTime">
            <summary>
            Gets The Delta time for this event
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiEvent.AbsoluteTime">
            <summary>
            Gets or sets The absolute time for this event
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiEvent.CommandCode">
            <summary>
            Gets The command code for this event
            </summary>
        </member>
        <member name="F:NAudio.Midi.ChannelAfterTouchEvent.afterTouchPressure">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.ChannelAfterTouchEvent.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.ChannelAfterTouchEvent"/> class. 
            Creates a new ChannelAfterTouchEvent from raw MIDI data
            </summary>
            <param name="br">
            A binary reader
            </param>
        </member>
        <member name="M:NAudio.Midi.ChannelAfterTouchEvent.#ctor(System.Int64,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.ChannelAfterTouchEvent"/> class. 
            Creates a new Channel After-Touch Event
            </summary>
            <param name="absoluteTime">
            Absolute time
            </param>
            <param name="channel">
            The Channel
            </param>
            <param name="afterTouchPressure">
            After-touch pressure
            </param>
        </member>
        <member name="M:NAudio.Midi.ChannelAfterTouchEvent.Export(System.Int64@,System.IO.BinaryWriter)">
            <summary>
            Calls base class export first, then exports the data
            specific to this event
            <seealso cref="M:NAudio.Midi.MidiEvent.Export(System.Int64@,System.IO.BinaryWriter)">MidiEvent.Export</seealso>
            </summary>
            <param name="absoluteTime">Absolute time used to calculate delta.
            Is updated ready for the next delta calculation</param>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="P:NAudio.Midi.ChannelAfterTouchEvent.AfterTouchPressure">
            <summary>
            Gets or sets The aftertouch pressure value
            </summary>
        </member>
        <member name="T:NAudio.Gui.TrackView.TrackView">
            <summary>
            TrackView is a control similar to those found in the main view of
            DAWs, showing time in the X axis and tracks / channels in the Y
            It is currently in the preliminary stages of development
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TrackView.tracks">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TrackView.pixelsPerSecond">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TrackView.nowTime">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.TrackView.TrackView"/> class. 
            Create a new trackview control
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackView.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse click event handler
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackView.TimeToX(System.TimeSpan)">
            <summary>
            Times to X.
            </summary>
            <param name="t">The timespan.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackView.XToTime(System.Int32)">
            <summary>
            Xs to time.
            </summary>
            <param name="x">The number of pixels.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackView.PaintTrack(NAudio.Gui.TrackView.Track,System.Drawing.Graphics)">
            <summary>
            Paints the track.
            </summary>
            <param name="track">The track.</param>
            <param name="g">The graphics object.</param>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackView.PaintClip(NAudio.Gui.TrackView.Clip,System.Int32,System.Drawing.Graphics)">
            <summary>
            Paints the clip.
            </summary>
            <param name="clip">The clipping.</param>
            <param name="trackHeight">Height of the track.</param>
            <param name="g">The graphics object.</param>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackView.TrackAtY(System.Int32)">
            <summary>
            Tracks at Y.
            </summary>
            <param name="y">The y position.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="F:NAudio.Gui.TrackView.TrackView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:NAudio.Gui.TrackView.TrackView.RightClick">
            <summary>
            Right-click detected
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.TrackView.Tracks">
            <summary>
            Gets The tracks displayed by this control
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.TrackView.NowTime">
            <summary>
            Gets or sets The location of the current time cursor
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.TrackView.PixelsPerSecond">
            <summary>
            Gets or sets Pixels per second.
            Effectively a zoom level
            </summary>
        </member>
        <member name="T:NAudio.Gui.TrackView.Track">
            <summary>
            Holds details of a track for the trackvew
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.Track.name">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.Track.height">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.Track.volume">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.Track.pan">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.Track.clips">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.Track.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.TrackView.Track"/> class.
            Creates a new track
            </summary>
            <param name="name">The name of the track.</param>
        </member>
        <member name="M:NAudio.Gui.TrackView.Track.ClipAtTime(System.TimeSpan)">
            <summary>
            Finds the clip at a specified time
            </summary>
            <param name="time">The time span.</param>
            <returns>The clip at the specific time.</returns>
        </member>
        <member name="P:NAudio.Gui.TrackView.Track.Name">
            <summary>
            Gets or sets Track name
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.Track.Height">
            <summary>
            Gets or sets Track height
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.Track.Volume">
            <summary>
            Gets or sets The Volume
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.Track.Pan">
            <summary>
            Gets or sets The Pan
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.Track.Clips">
            <summary>
            Gets Clips contained in this track
            </summary>
        </member>
        <member name="T:NAudio.Gui.Pot">
            <summary>
            Control that represents a potentiometer
            TODO list:
            Optional Log scale
            Optional reverse scale
            Keyboard control
            Optional bitmap mode
            Optional complete draw mode
            Tooltip support
            </summary>
        </member>
        <member name="F:NAudio.Gui.Pot.minimum">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.Pot.maximum">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.Pot.value">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.Pot.beginDragY">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.Pot.beginDragValue">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.Pot.dragging">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.Pot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.Pot"/> class. 
            Creates a new pot control
            </summary>
        </member>
        <member name="M:NAudio.Gui.Pot.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the control
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.Pot.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse down event to allow changing value by dragging
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.Pot.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse up event to allow changing value by dragging
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.Pot.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse down event to allow changing value by dragging
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.Pot.SetValue(System.Double,System.Boolean)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="raiseEvents">if set to <c>true</c> [raise events].</param>
        </member>
        <member name="F:NAudio.Gui.Pot.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NAudio.Gui.Pot.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NAudio.Gui.Pot.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:NAudio.Gui.Pot.ValueChanged">
            <summary>
            Value changed event
            </summary>
        </member>
        <member name="P:NAudio.Gui.Pot.Minimum">
            <summary>
            Gets or sets Minimum Value of the Pot
            </summary>
        </member>
        <member name="P:NAudio.Gui.Pot.Maximum">
            <summary>
            Gets or sets Maximum Value of the Pot
            </summary>
        </member>
        <member name="P:NAudio.Gui.Pot.Value">
            <summary>
            Gets or sets The current value of the pot
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.SFVersion">
            <summary>
            SoundFont Version Structure
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SFVersion.major">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SFVersion.minor">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.SFVersion.Major">
            <summary>
            Gets or sets Major Version
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.SFVersion.Minor">
            <summary>
            Gets or sets Minor Version
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.SampleMode">
            <summary>
            SoundFont sample modes
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleMode.NoLoop">
            <summary>
            No loop option
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleMode.LoopContinuously">
            <summary>
            Loop Continuously
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleMode.ReservedNoLoop">
            <summary>
            Reserved no loop
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleMode.LoopAndContinue">
            <summary>
            Loop and continue
            </summary>
        </member>
        <member name="T:NAudio.FileFormats.Mp3.ChannelMode">
            <summary>
            Channel Mode
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.ChannelMode.Stereo">
            <summary>
            Stereo Mode
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.ChannelMode.JointStereo">
            <summary>
            Joint Stereo
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.ChannelMode.DualChannel">
            <summary>
            Dual Channel
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.ChannelMode.Mono">
            <summary>
            Mono Channel Mode
            </summary>
        </member>
        <member name="T:NAudio.Dmo.MediaBuffer">
            <summary>
            Attempting to implement the COM IMediaBuffer interface as a .NET object
            Not sure what will happen when I pass this to an unmanaged object
            </summary>
        </member>
        <member name="T:NAudio.Dmo.IMediaBuffer">
            <summary>
            IMediaBuffer Interface
            </summary>
        </member>
        <member name="M:NAudio.Dmo.IMediaBuffer.SetLength(System.Int32)">
            <summary>
            Set Length
            </summary>
            <param name="length">The Length</param>
            <returns>The HRESULT</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaBuffer.GetMaxLength(System.Int32@)">
            <summary>
            Get Max Length
            </summary>
            <param name="maxLength">Max Length</param>
            <returns>The HRESULT</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaBuffer.GetBufferAndLength(System.IntPtr,System.IntPtr)">
            <summary>
            Get Buffer and Length
            </summary>
            <param name="bufferPointerPointer">Pointer to variable into which to write the Buffer Pointer </param>
            <param name="validDataLengthPointer">Pointer to variable into which to write the Valid Data Length</param>
            <returns>The HRESULT</returns>
        </member>
        <member name="F:NAudio.Dmo.MediaBuffer.buffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaBuffer.length">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaBuffer.maxLength">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Dmo.MediaBuffer"/> class. 
            Creates a new Media Buffer
            </summary>
            <param name="maxLength">
            Maximum length in bytes
            </param>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NAudio.Dmo.MediaBuffer"/> class.  Releases unmanaged resources and performs other cleanup operations before the <see cref="T:NAudio.Dmo.MediaBuffer"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.Dispose">
            <summary>
            Dispose and free memory for buffer
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.NAudio#Dmo#IMediaBuffer#SetLength(System.Int32)">
            <summary>
            Set length of valid data in the buffer
            </summary>
            <param name="length">The length</param>
            <returns>The HRESULT</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.NAudio#Dmo#IMediaBuffer#GetMaxLength(System.Int32@)">
            <summary>
            Gets the maximum length of the buffer
            </summary>
            <param name="maxLength">Max length (output parameter)</param>
            <returns>The HRESULT</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.NAudio#Dmo#IMediaBuffer#GetBufferAndLength(System.IntPtr,System.IntPtr)">
            <summary>
            Gets buffer and / or length
            </summary>
            <param name="bufferPointerPointer">Pointer to variable into which buffer pointer should be written</param>
            <param name="validDataLengthPointer">Pointer to variable into which valid data length should be written</param>
            <returns>The HRESULT</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.LoadData(System.Byte[],System.Int32)">
            <summary>
            Loads data into this buffer
            </summary>
            <param name="data">Data to load</param>
            <param name="bytes">Number of bytes to load</param>
        </member>
        <member name="M:NAudio.Dmo.MediaBuffer.RetrieveData(System.Byte[],System.Int32)">
            <summary>
            Retrieves the data in the output buffer
            </summary>
            <param name="data">buffer to retrieve into</param>
            <param name="offset">offset within that buffer</param>
        </member>
        <member name="P:NAudio.Dmo.MediaBuffer.Length">
            <summary>
            Gets or sets Length of data in the media buffer
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.PropertyKeys">
            <summary>
            Property Keys
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.PropertyKeys.DeviceInterface">
            <summary>
            The device interface specific properties.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.DeviceInterface.FriendlyName">
            <summary>
            Originally known as PKEY_DeviceInterface_FriendlyName
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.PropertyKeys.AudioEndpoint">
            <summary>
            The audio endpoint specific properties.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.AudioEndpoint.FormFactor">
            <summary>
            Originally known as PKEY_AudioEndpoint_FormFactor
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.AudioEndpoint.ControlPanelPageProvider">
            <summary>
            Originally known as PKEY_AudioEndpoint_ControlPanelPageProvider
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.AudioEndpoint.Association">
            <summary>
            Originally known as PKEY_AudioEndpoint_Association
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.AudioEndpoint.PhysicalSpeakers">
            <summary>
            Originally known as PKEY_AudioEndpoint_PhysicalSpeakers
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.AudioEndpoint.Guid">
            <summary>
            Originally known as PKEY_AudioEndpoint_GUID
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.AudioEndpoint.DisableSystemEffects">
            <summary>
            Originally known as PKEY_AudioEndpoint_Disable_SysFx 
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.AudioEndpoint.FullRangeSpeakers">
            <summary>
            Originally known as PKEY_AudioEndpoint_FullRangeSpeakers 
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.PropertyKeys.AudioEngine">
            <summary>
            The audio engine specific properties.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKeys.AudioEngine.DeviceFormat">
            <summary>
            Originally known as PKEY_AudioEngine_DeviceFormat 
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.AudioClientErrors">
            <summary>
            The Audio Client Errors.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrors.NotInitialized">
            <summary>
            Originally known as AUDCLNT_E_NOT_INITIALIZED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrors.UnsupportedFormat">
            <summary>
            Originally known as AUDCLNT_E_UNSUPPORTED_FORMAT
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioClientErrors.DeviceInUse">
            <summary>
            Originally known as AUDCLNT_E_DEVICE_IN_USE
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioClient">
            <summary>
            Windows Vista CoreAudio AudioClient
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClient.audioClientInterface">
            <summary>
            The audio client.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClient.mixFormat">
            <summary>
            The wave mix format.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClient.audioRenderClient">
            <summary>
            The audio render client.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClient.audioCaptureClient">
            <summary>
            The audio capture client.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.#ctor(NAudio.CoreAudioApi.Interfaces.IAudioClient)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.AudioClient"/> class.
            </summary>
            <param name="audioClientInterface">The audio client interface.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.Initialize(NAudio.CoreAudioApi.AudioClientShareMode,NAudio.CoreAudioApi.AudioClientStreamFlags,System.Int64,System.Int64,NAudio.Wave.WaveFormat,System.Guid)">
            <summary>
            Initialize the Audio Client
            </summary>
            <param name="shareMode">Share Mode</param>
            <param name="streamFlags">Stream Flags</param>
            <param name="bufferDuration">Buffer Duration</param>
            <param name="periodicity">Periodicity of the client.</param>
            <param name="waveFormat">Wave Format</param>
            <param name="audioSessionGuid">Audio Session GUID (can be null)</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.IsFormatSupported(NAudio.CoreAudioApi.AudioClientShareMode,NAudio.Wave.WaveFormat)">
            <summary>
            Determines whether if the specified output format is supported
            </summary>
            <param name="shareMode">The share mode.</param>
            <param name="desiredFormat">The desired format.</param>
            <returns>
                <c>true</c> if [is format supported] [the specified share mode]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.IsFormatSupported(NAudio.CoreAudioApi.AudioClientShareMode,NAudio.Wave.WaveFormat,NAudio.Wave.WaveFormatExtensible@)">
            <summary>
            Determines if the specified output format is supported in shared mode
            </summary>
            <param name="shareMode">Share Mode</param>
            <param name="desiredFormat">Desired Format</param>
            <param name="closestMatchFormat">Output The closest match format.</param>
            <returns>
                <c>true</c> if [is format supported] [the specified share mode]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.Start">
            <summary>
            Starts the audio stream
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.Stop">
            <summary>
            Stops the audio stream.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.SetEventHandle(System.Threading.EventWaitHandle)">
            <summary>
            Set the Event Handle for buffer synchro.
            </summary>
            <param name="eventWaitHandle">The Wait Handle to setup</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.Reset">
            <summary>
            Resets the audio stream
            Reset is a control method that the client calls to reset a stopped audio stream. 
            Resetting the stream flushes all pending data and resets the audio clock stream 
            position to 0. This method fails if it is called on a stream that is not stopped
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.MixFormat">
            <summary>
            Gets Mix Format,
            Can be called before initialize
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.BufferSize">
            <summary>
            Gets the buffer size (must initialize first)
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.StreamLatency">
            <summary>
            Gets the stream latency (must initialize first)
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.CurrentPadding">
            <summary>
            Gets the current padding (must initialize first)
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.DefaultDevicePeriod">
            <summary>
            Gets the default device period (can be called before initialize)
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.MinimumDevicePeriod">
            <summary>
            Gets the minimum device period (can be called before initialize)
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.AudioRenderClient">
            <summary>
            Gets the AudioRenderClient service
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioClient.AudioCaptureClient">
            <summary>
            Gets the AudioCaptureClient service
            </summary>
        </member>
        <member name="T:NAudio.Dmo.IMediaObject">
            <summary>
            defined in mediaobj.h
            </summary>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.GetStreamCount(System.Int32@,System.Int32@)">
            <summary>
            Gets the stream count.
            </summary>
            <param name="inputStreams">The input streams.</param>
            <param name="outputStreams">The output streams.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.GetInputStreamInfo(System.Int32,NAudio.Dmo.InputStreamInfoFlags@)">
            <summary>
            Gets the input stream info.
            </summary>
            <param name="inputStreamIndex">Index of the input stream.</param>
            <param name="flags">The flags.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.GetOutputStreamInfo(System.Int32,NAudio.Dmo.OutputStreamInfoFlags@)">
            <summary>
            Gets the output stream info.
            </summary>
            <param name="outputStreamIndex">Index of the output stream.</param>
            <param name="flags">The flags.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.GetInputType(System.Int32,System.Int32,NAudio.Dmo.DmoMediaType@)">
            <summary>
            Gets the type of the input.
            </summary>
            <param name="inputStreamIndex">Index of the input stream.</param>
            <param name="typeIndex">Index of the type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.GetOutputType(System.Int32,System.Int32,NAudio.Dmo.DmoMediaType@)">
            <summary>
            Gets the type of the output.
            </summary>
            <param name="outputStreamIndex">Index of the output stream.</param>
            <param name="typeIndex">Index of the type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.SetInputType(System.Int32,NAudio.Dmo.DmoMediaType@,NAudio.Dmo.DmoSetTypeFlags)">
            <summary>
            Sets the type of the input.
            </summary>
            <param name="inputStreamIndex">Index of the input stream.</param>
            <param name="mediaType">Type of the media.</param>
            <param name="flags">The flags.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.SetOutputType(System.Int32,NAudio.Dmo.DmoMediaType@,NAudio.Dmo.DmoSetTypeFlags)">
            <summary>
            Sets the type of the output.
            </summary>
            <param name="outputStreamIndex">Index of the output stream.</param>
            <param name="mediaType">Type of the media.</param>
            <param name="flags">The flags.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.GetInputCurrentType(System.Int32,NAudio.Dmo.DmoMediaType@)">
            <summary>
            Gets the type of the input current.
            </summary>
            <param name="inputStreamIndex">Index of the input stream.</param>
            <param name="mediaType">Type of the media.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.GetOutputCurrentType(System.Int32,NAudio.Dmo.DmoMediaType@)">
            <summary>
            Gets the type of the output current.
            </summary>
            <param name="outputStreamIndex">Index of the output stream.</param>
            <param name="mediaType">Type of the media.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.GetInputSizeInfo(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the input size info.
            </summary>
            <param name="inputStreamIndex">Index of the input stream.</param>
            <param name="size">The input size.</param>
            <param name="maxLookahead">The max lookahead.</param>
            <param name="alignment">The alignment.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.GetOutputSizeInfo(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the output size info.
            </summary>
            <param name="outputStreamIndex">Index of the output stream.</param>
            <param name="size">The output size.</param>
            <param name="alignment">The alignment.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.GetInputMaxLatency(System.Int32,System.Int64@)">
            <summary>
            Gets the input max latency.
            </summary>
            <param name="inputStreamIndex">Index of the input stream.</param>
            <param name="referenceTimeMaxLatency">The reference time max latency.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.SetInputMaxLatency(System.Int32,System.Int64)">
            <summary>
            Sets the input max latency.
            </summary>
            <param name="inputStreamIndex">Index of the input stream.</param>
            <param name="referenceTimeMaxLatency">The reference time max latency.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.Flush">
            <summary>
            Flushes this instance.
            </summary>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.Discontinuity(System.Int32)">
            <summary>
            Discontinuities the specified input stream index.
            </summary>
            <param name="inputStreamIndex">Index of the input stream.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.AllocateStreamingResources">
            <summary>
            Allocates the streaming resources.
            </summary>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.FreeStreamingResources">
            <summary>
            Frees the streaming resources.
            </summary>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.GetInputStatus(System.Int32,NAudio.Dmo.DmoInputStatusFlags@)">
            <summary>
            Gets the input status.
            </summary>
            <param name="inputStreamIndex">Index of the input stream.</param>
            <param name="flags">The flags.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.ProcessInput(System.Int32,NAudio.Dmo.IMediaBuffer,NAudio.Dmo.DmoInputDataBufferFlags,System.Int64,System.Int64)">
            <summary>
            Processes the input.
            </summary>
            <param name="inputStreamIndex">Index of the input stream.</param>
            <param name="mediaBuffer">The media buffer.</param>
            <param name="flags">The flags.</param>
            <param name="referenceTimeTimestamp">The reference time timestamp.</param>
            <param name="referenceTimeDuration">Duration of the reference time.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.ProcessOutput(NAudio.Dmo.DmoProcessOutputFlags,System.Int32,NAudio.Dmo.DmoOutputDataBuffer[],System.Int32@)">
            <summary>
            Processes the output.
            </summary>
            <param name="flags">The flags.</param>
            <param name="outputBufferCount">The output buffer count.</param>
            <param name="outputBuffers">The output buffers.</param>
            <param name="statusReserved">The status reserved.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaObject.Lock(System.Boolean)">
            <summary>
            Locks the specified acquire lock.
            </summary>
            <param name="acquireLock">if set to <c>true</c> [acquire lock].</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.Dmo.DmoProcessOutputFlags">
            <summary>
            DMO Process Output Flags
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoProcessOutputFlags.None">
            <summary>
            No Output flags
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoProcessOutputFlags.DiscardWhenNoBuffer">
            <summary>
            Originally known as DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER
            </summary>
        </member>
        <member name="T:NAudio.Wave.WasapiOut">
            <summary>
            Support for playback using Wasapi
            </summary>
        </member>
        <member name="T:NAudio.Wave.IWavePlayer">
            <summary>
            Represents the interface to a device that can play a WaveFile
            </summary>
        </member>
        <member name="M:NAudio.Wave.IWavePlayer.Play">
            <summary>
            Begin playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.IWavePlayer.Stop">
            <summary>
            Stop playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.IWavePlayer.Pause">
            <summary>
            Pause Playback
            </summary>        
        </member>
        <member name="M:NAudio.Wave.IWavePlayer.Init(NAudio.Wave.IWaveProvider)">
            <summary>
            Initialise playback
            </summary>
            <param name="waveProvider">The waveprovider to be played</param>
        </member>
        <member name="E:NAudio.Wave.IWavePlayer.PlaybackStopped">
            <summary>
            Indicates that playback has gone into a stopped state due to 
            reaching the end of the input stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.IWavePlayer.PlaybackState">
            <summary>
            Gets Current playback state
            </summary>
        </member>
        <member name="P:NAudio.Wave.IWavePlayer.Volume">
            <summary>
            Gets or sets The volume 1.0 is full scale
            </summary>
        </member>
        <member name="F:NAudio.Wave.WasapiOut.audioClient">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WasapiOut.shareMode">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WasapiOut.renderClient">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WasapiOut.sourceStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WasapiOut.latencyMilliseconds">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WasapiOut.bufferFrameCount">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WasapiOut.bytesPerFrame">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WasapiOut.isUsingEventSync">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WasapiOut.frameEventWaitHandle">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WasapiOut.readBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WasapiOut.playbackState">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WasapiOut.playThread">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WasapiOut.outputFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WasapiOut.dmoResamplerNeeded">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.#ctor(NAudio.CoreAudioApi.AudioClientShareMode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WasapiOut"/> class. 
            WASAPI Out using default audio endpoint
            </summary>
            <param name="shareMode">
            ShareMode - shared or exclusive
            </param>
            <param name="latency">
            Desired latency in milliseconds
            </param>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.#ctor(NAudio.CoreAudioApi.AudioClientShareMode,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WasapiOut"/> class. 
            WASAPI Out using default audio endpoint
            </summary>
            <param name="shareMode">
            ShareMode - shared or exclusive
            </param>
            <param name="useEventSync">
            true if sync is done with event. false use sleep.
            </param>
            <param name="latency">
            Desired latency in milliseconds
            </param>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.#ctor(NAudio.CoreAudioApi.MultimediaDevice,NAudio.CoreAudioApi.AudioClientShareMode,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WasapiOut"/> class.
            Creates a new WASAPI Output
            </summary>
            <param name="device">Device to use</param>
            <param name="shareMode">The share mode.</param>
            <param name="useEventSync">true if sync is done with event. false use sleep.</param>
            <param name="latency">The latency.</param>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.Play">
            <summary>
            Begin Playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.Stop">
            <summary>
            Stop playback and flush buffers
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.Pause">
            <summary>
            Stop playback without flushing buffers
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.Init(NAudio.Wave.IWaveProvider)">
            <summary>
            Initialize for playing the specified wave stream
            </summary>
            <param name="waveStream">IWaveProvider to play</param>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.GetDefaultAudioEndpoint">
            <summary>
            Gets the default audio endpoint.
            </summary>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.PlayThread">
            <summary>
            Plays the thread.
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.RaisePlaybackStopped">
            <summary>
            Raises the playback stopped.
            </summary>
        </member>
        <member name="M:NAudio.Wave.WasapiOut.FillBuffer(System.Int32)">
            <summary>
            Fills the buffer.
            </summary>
            <param name="frameCount">The frame count.</param>
        </member>
        <member name="E:NAudio.Wave.WasapiOut.PlaybackStopped">
            <summary>
            Playback Stopped
            </summary>
        </member>
        <member name="P:NAudio.Wave.WasapiOut.PlaybackState">
            <summary>
            Gets Playback State
            </summary>
        </member>
        <member name="P:NAudio.Wave.WasapiOut.Volume">
            <summary>
            Gets or sets The Volume 
            </summary>
        </member>
        <member name="T:NAudio.Wave.IWaveIn">
            <summary>
            Generic interface for wave recording
            </summary>
        </member>
        <member name="M:NAudio.Wave.IWaveIn.StartRecording">
            <summary>
            Start Recording
            </summary>
        </member>
        <member name="M:NAudio.Wave.IWaveIn.StopRecording">
            <summary>
            Stop Recording
            </summary>
        </member>
        <member name="E:NAudio.Wave.IWaveIn.DataAvailable">
            <summary>
            Indicates recorded data is available 
            </summary>
        </member>
        <member name="E:NAudio.Wave.IWaveIn.RecordingStopped">
            <summary>
            Indicates that all recorded data has now been received.
            </summary>
        </member>
        <member name="P:NAudio.Wave.IWaveIn.WaveFormat">
            <summary>
            Gets or sets Recording WaveFormat
            </summary>
        </member>
        <member name="T:NAudio.Wave.SupportedWaveFormat">
            <summary>
            Supported wave formats for WaveOutCapabilities
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_1M08">
            <summary>
            11.025 kHz, Mono,   8-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_1S08">
            <summary>
            11.025 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_1M16">
            <summary>
            11.025 kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_1S16">
            <summary>
            11.025 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_2M08">
            <summary>
            22.05  kHz, Mono,   8-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_2S08">
            <summary>
            22.05  kHz, Stereo, 8-bit 
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_2M16">
            <summary>
            22.05  kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_2S16">
            <summary>
            22.05  kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_4M08">
            <summary>
            44.1   kHz, Mono,   8-bit 
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_4S08">
            <summary>
            44.1   kHz, Stereo, 8-bit 
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_4M16">
            <summary>
            44.1   kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_4S16">
            <summary>
             44.1   kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_44M08">
            <summary>
            44.1   kHz, Mono,   8-bit 
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_44S08">
            <summary>
            44.1   kHz, Stereo, 8-bit 
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_44M16">
            <summary>
            44.1   kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_44S16">
            <summary>
            44.1   kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_48M08">
            <summary>
            48     kHz, Mono,   8-bit 
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_48S08">
            <summary>
             48     kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_48M16">
            <summary>
            48     kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_48S16">
            <summary>
            48     kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_96M08">
            <summary>
            96     kHz, Mono,   8-bit 
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_96S08">
            <summary>
            96     kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_96M16">
            <summary>
            96     kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:NAudio.Wave.SupportedWaveFormat.WAVE_FORMAT_96S16">
            <summary>
            96     kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmFormatChooseStyleFlags">
            <summary>
            The ACM Format Choose Style Flags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChooseStyleFlags.None">
            <summary>
            No style flags
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChooseStyleFlags.ShowHelp">
            <summary>
            Originally known as ACMFORMATCHOOSE_STYLEF_SHOWHELP
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChooseStyleFlags.EnableHook">
            <summary>
            Originally known as ACMFORMATCHOOSE_STYLEF_ENABLEHOOK
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChooseStyleFlags.EnableTemplate">
            <summary>
            Originally known as ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChooseStyleFlags.EnableTemplateHandle">
            <summary>
            Originally known as ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChooseStyleFlags.InitToWfxStruct">
            <summary>
            Originally known as ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChooseStyleFlags.ContextHelp">
            <summary>
            Originally known as ACMFORMATCHOOSE_STYLEF_CONTEXTHELP
            </summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmDriverEnumFlags">
            <summary>
            The ACM Driver Enum Flags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverEnumFlags.NoLocal">
            <summary>
            ACM_DRIVERENUMF_NOLOCAL, Only global drivers should be included in the enumeration
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverEnumFlags.Disabled">
            <summary>
            ACM_DRIVERENUMF_DISABLED, Disabled ACM drivers should be included in the enumeration
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IMMNotificationClient">
            <summary>
            This is the IMMNotificationClient COM interface.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IMMNotificationClient.OnDeviceStateChanged(System.String,NAudio.CoreAudioApi.DeviceState)">
            <summary>
            Device State Changed
            </summary>
            <param name="deviceId">The device id.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IMMNotificationClient.OnDeviceAdded(System.String)">
            <summary>
            Device Added
            </summary>
            <param name="pwstrDeviceId">The PWSTR device id.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IMMNotificationClient.OnDeviceRemoved(System.String)">
            <summary>
            Device Removed
            </summary>
            <param name="deviceId">The device id.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IMMNotificationClient.OnDefaultDeviceChanged(NAudio.CoreAudioApi.DataFlow,NAudio.CoreAudioApi.Role,System.String)">
            <summary>
            Default Device Changed
            </summary>
            <param name="flow">The data flow.</param>
            <param name="role">The device role.</param>
            <param name="defaultDeviceId">The default device id.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IMMNotificationClient.OnPropertyValueChanged(System.String,NAudio.CoreAudioApi.PropertyKey)">
            <summary>
            Property Value Changed
            </summary>
            <param name="pwstrDeviceId">The PWSTR device id.</param>
            <param name="key">The property key.</param>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IComMultimediaDeviceCollection">
            <summary>
            Represents the COM IMMDeviceCollection.
            </summary>
            <remarks>
            Originally known as IMMDeviceCollection.
            </remarks>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IComMultimediaDeviceCollection.GetCount(System.Int32@)">
            <summary>
            Gets the count.
            </summary>
            <param name="deviceCount">The device count.</param>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IComMultimediaDeviceCollection.Item(System.Int32,NAudio.CoreAudioApi.Interfaces.IComMultimediaDevice@)">
            <summary>
            Gets the <see cref="T:NAudio.CoreAudioApi.Interfaces.IComMultimediaDevice"/> at the specified index.
            </summary>
            <param name="index">The index of the collection.</param>
            <param name="device">The device.</param>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.EEndpointHardwareSupport">
            <summary>
            Endpoint Hardware Support
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.EEndpointHardwareSupport.Volume">
            <summary>
            Indicates that Volume is supported
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.EEndpointHardwareSupport.Mute">
            <summary>
            Indicates that Mute functionality is supported
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.EEndpointHardwareSupport.Meter">
            <summary>
            Indicates that Metering functionality is supported.
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerControlClass">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlClass.Custom">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlClass.Meter">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlClass.Switch">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlClass.Number">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlClass.Slider">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlClass.Fader">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlClass.Time">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlClass.List">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlClass.Mask">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Gui.WaveformPainter">
            <summary>
            Windows Forms control for painting audio waveforms
            </summary>
        </member>
        <member name="F:NAudio.Gui.WaveformPainter.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NAudio.Gui.WaveformPainter.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NAudio.Gui.WaveformPainter.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NAudio.Gui.WaveformPainter.foregroundPen">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.WaveformPainter.samples">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.WaveformPainter.maxSamples">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.WaveformPainter.insertPos">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.WaveformPainter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.WaveformPainter"/> class. 
            Constructs a new instance of the WaveFormPainter class
            </summary>
        </member>
        <member name="M:NAudio.Gui.WaveformPainter.AddMax(System.Single)">
            <summary>
            Add Max Value
            </summary>
            <param name="maxSample">The max sample.</param>
        </member>
        <member name="M:NAudio.Gui.WaveformPainter.OnResize(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Resize"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.WaveformPainter.OnForeColorChanged(System.EventArgs)">
            <summary>
            On ForeColor Changed
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.WaveformPainter.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="pe">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NAudio.Gui.WaveformPainter.GetSample(System.Int32)">
            <summary>
            Gets the sample.
            </summary>
            <param name="index">The index.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.FileFormats.SoundFont.SoundFontVersionBuilder">
            <summary>
            Builds a SoundFont version
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.StructureBuilder">
            <summary>
            base class for structures that can read themselves
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.StructureBuilder.data">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.StructureBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.SoundFont.StructureBuilder"/> class.
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.StructureBuilder.Read(System.IO.BinaryReader)">
            <summary>
            Reads the specified br.
            </summary>
            <param name="br">The binary reader.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.SoundFont.StructureBuilder.Write(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes the specified bw.
            </summary>
            <param name="bw">The binary writer.</param>
            <param name="o">The object.</param>
        </member>
        <member name="M:NAudio.SoundFont.StructureBuilder.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.StructureBuilder.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data array.</value>
        </member>
        <member name="P:NAudio.SoundFont.StructureBuilder.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.SoundFontVersionBuilder.Read(System.IO.BinaryReader)">
            <summary>
            Reads a SoundFont Version structure
            </summary>
            <param name="br">The binary reader.</param>
            <returns>The SFVersion from the binary reader.</returns>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.SoundFontVersionBuilder.Write(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes a SoundFont Version structure
            </summary>
            <param name="bw">The binary writer.</param>
            <param name="o">The object to write.</param>
        </member>
        <member name="P:NAudio.FileFormats.SoundFont.SoundFontVersionBuilder.Length">
            <summary>
            Gets the length of this structure
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.PresetsChunk">
            <summary>
            Class to read the SoundFont file presets chunk
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.PresetsChunk.presetHeaders">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.PresetsChunk.presetZones">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.PresetsChunk.presetZoneModulators">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.PresetsChunk.presetZoneGenerators">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.PresetsChunk.instruments">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.PresetsChunk.instrumentZones">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.PresetsChunk.instrumentZoneModulators">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.PresetsChunk.instrumentZoneGenerators">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.PresetsChunk.sampleHeaders">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.PresetsChunk.#ctor(NAudio.FileFormats.SoundFont.RiffChunk)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.SoundFont.PresetsChunk"/> class.
            </summary>
            <param name="chunk">The chunk.</param>
        </member>
        <member name="M:NAudio.SoundFont.PresetsChunk.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NAudio.SoundFont.PresetsChunk.Presets">
            <summary>
            Gets The Presets contained in this chunk
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.PresetsChunk.Instruments">
            <summary>
            Gets The instruments contained in this chunk
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.PresetsChunk.SampleHeaders">
            <summary>
            Gets The sample headers contained in this chunk
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.TransformEnum">
            <summary>
            Transform Types
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.TransformEnum.Linear">
            <summary>
            Linear option.
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.Modulator">
            <summary>
            The Modulator
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Modulator.sourceModulationData">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Modulator.destinationGenerator">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Modulator.amount">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Modulator.sourceModulationAmount">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Modulator.sourceTransform">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.Modulator.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NAudio.SoundFont.Modulator.SourceModulationData">
            <summary>
            Gets or sets Source Modulation data type
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.Modulator.DestinationGenerator">
            <summary>
            Gets or sets Destination generator type
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.Modulator.Amount">
            <summary>
            Gets or sets The Amount
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.Modulator.SourceModulationAmount">
            <summary>
            Gets or sets Source Modulation Amount Type
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.Modulator.SourceTransform">
            <summary>
            Gets or sets Source Transform Type
            </summary>
        </member>
        <member name="T:NAudio.Dmo.MediaTypes">
            <summary>
            uuids.h, ksuuids.h
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaTypes.MEDIATYPE_AnalogAudio">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaTypes.MEDIATYPE_AnalogVideo">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaTypes.MEDIATYPE_Audio">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaTypes.MEDIATYPE_AUXLine21Data">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaTypes.MEDIATYPE_File">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaTypes.MEDIATYPE_Interleaved">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaTypes.MEDIATYPE_Midi">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaTypes.MEDIATYPE_ScriptCommand">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaTypes.MEDIATYPE_Stream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaTypes.MEDIATYPE_Text">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaTypes.MEDIATYPE_Timecode">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaTypes.MEDIATYPE_Video">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaTypes.MajorTypes">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaTypes.MajorTypeNames">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaTypes.GetMediaTypeName(System.Guid)">
            <summary>
            Gets the name of the media type.
            </summary>
            <param name="majorType">Type of the major.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.Dmo.MediaObjectSizeInfo">
            <summary>
            Media Object Size Info
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObjectSizeInfo.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Dmo.MediaObjectSizeInfo"/> class.
            Media Object Size Info
            </summary>
            <param name="size">The media object size.</param>
            <param name="maxLookahead">The max lookahead.</param>
            <param name="alignment">The alignment.</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObjectSizeInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NAudio.Dmo.MediaObjectSizeInfo.Size">
            <summary>
            Gets Minimum Buffer Size, in bytes
            </summary>
        </member>
        <member name="P:NAudio.Dmo.MediaObjectSizeInfo.MaxLookahead">
            <summary>
            Gets Max Lookahead
            </summary>
        </member>
        <member name="P:NAudio.Dmo.MediaObjectSizeInfo.Alignment">
            <summary>
            Gets The Alignment
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoPartialMediaType">
            <summary>
            Originally known as DMO_PARTIAL_MEDIATYPE
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoPartialMediaType.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type value.</value>
        </member>
        <member name="P:NAudio.Dmo.DmoPartialMediaType.Subtype">
            <summary>
            Gets or sets the subtype.
            </summary>
            <value>The subtype.</value>
        </member>
        <member name="T:NAudio.Daw.Tempo">
            <summary>
            The Tempo class
            </summary>
        </member>
        <member name="M:NAudio.Daw.Tempo.#ctor(System.TimeSpan,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Daw.Tempo"/> class. 
            Create a new tempo
            </summary>
            <param name="beginTime">
            Start time
            </param>
            <param name="tempo">
            The initial Tempo
            </param>
        </member>
        <member name="P:NAudio.Daw.Tempo.BeginTime">
            <summary>
            Gets or sets Start time
            </summary>
        </member>
        <member name="P:NAudio.Daw.Tempo.Value">
            <summary>
            Gets or sets Tempo value in beats per minute
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioEndpointVolumeVolumeRange">
            <summary>
            Audio Endpoint Volume Volume Range
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioEndpointVolumeVolumeRange._VolumeMindB">
            <summary>
            The volume minimum decibels.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioEndpointVolumeVolumeRange._VolumeMaxdB">
            <summary>
            The volume maximum decibels.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioEndpointVolumeVolumeRange._VolumeIncrementdB">
            <summary>
            the volume increment decibels.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolumeVolumeRange.#ctor(NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.AudioEndpointVolumeVolumeRange"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeVolumeRange.MinDecibels">
            <summary>
            Gets Minimum Decibels
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeVolumeRange.MaxDecibels">
            <summary>
            Gets Maximum Decibels
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeVolumeRange.IncrementDecibels">
            <summary>
            Gets Increment Decibels
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioEndpointVolumeChannels">
            <summary>
            Audio Endpoint Volume Channels
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioEndpointVolumeChannels._AudioEndPointVolume">
            <summary>
            The audio endpoint volume.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioEndpointVolumeChannels._Channels">
            <summary>
            The channels array.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolumeChannels.#ctor(NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.AudioEndpointVolumeChannels"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeChannels.Count">
            <summary>
            Gets Channel Count
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeChannels.Item(System.Int32)">
            <summary>
            Indexer - get a specific channel
            </summary>
            <param name="index">The index to get.</param>
            <value>The Audio Endpoint Volume Channel</value>
        </member>
        <member name="T:NAudio.Wave.WaveFileReader">
            <summary>A read-only stream of WAVE data based on a wave file
            with an associated WaveFormat
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileReader.waveFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileReader.waveStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileReader.ownInput">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileReader.dataPosition">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileReader.dataChunkLength">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileReader.chunks">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFileReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveFileReader"/> class. Supports opening a WAV file
            </summary>
            <param name="waveFile">The wave file.</param>
            <remarks>
            The WAV file format is a real mess, but we will only
            support the basic WAV file format which actually covers the vast
            majority of WAV files out there. For more WAV file format information
            visit www.wotsit.org. If you have a WAV file that can't be read by
            this class, email it to the nAudio project and we will probably
            fix this reader to support it
            </remarks>
        </member>
        <member name="M:NAudio.Wave.WaveFileReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveFileReader"/> class. 
            Creates a Wave File Reader based on an input stream
            </summary>
            <param name="inputStream">
            The input stream containing a WAV file including header
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveFileReader.ReadWaveHeader(System.IO.Stream,NAudio.Wave.WaveFormat@,System.Int64@,System.Int32@,System.Collections.Generic.List{NAudio.Wave.WaveStreams.RiffChunk})">
            <summary>
            Reads the header part of a WAV file from a stream
            </summary>
            <param name="stream">The stream, positioned at the start of audio data</param>
            <param name="format">The format found</param>
            <param name="dataChunkPosition">The position of the data chunk</param>
            <param name="dataChunkLength">The length of the data chunk</param>
            <param name="chunks">Additional chunks found</param>
        </member>
        <member name="M:NAudio.Wave.WaveFileReader.GetChunkData(NAudio.Wave.WaveStreams.RiffChunk)">
            <summary>
            Gets the data for the specified chunk
            </summary>
            <param name="chunk">The chunk.</param>
            <returns>The chunk data.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFileReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from the Wave File
            <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
            <param name="array">The array.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFileReader.TryReadFloat(System.Single@)">
            <summary>
            Attempts to read a sample into a float
            </summary>
            <param name="sampleValue">The sample value.</param>
            <returns>Value indicating if the value was a float.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFileReader.Read(System.Single[][],System.Int32)">
            <summary>
            Reads floats into arrays of channels
            </summary>
            <param name="buffer">The buffer</param>
            <param name="samples">number of samples to read</param>
            <returns>The bytes read.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFileReader.Dispose(System.Boolean)">
            <summary>
            Cleans up the resources associated with this WaveFileReader
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:NAudio.Wave.WaveFileReader.ExtraChunks">
            <summary>
            Gets a list of the additional chunks found in this file
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFileReader.WaveFormat">
            <summary>
            Retrieves the WaveFormat for this stream
            </summary>
            <value></value>
        </member>
        <member name="P:NAudio.Wave.WaveFileReader.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">
            A class derived from Stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="P:NAudio.Wave.WaveFileReader.SampleCount">
            <summary>
            Gets Number of Samples (if possible to calculate)
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFileReader.Position">
            <summary>
            Position in the wave file
            <see cref="P:System.IO.Stream.Position"/>
            </summary>
        </member>
        <member name="T:NAudio.Wave.Wave32To16Stream">
            <summary>
            WaveStream that converts 32 bit audio back down to 16 bit, clipping if necessary
            </summary>
        </member>
        <member name="F:NAudio.Wave.Wave32To16Stream.sourceStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Wave32To16Stream.waveFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Wave32To16Stream.length">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Wave32To16Stream.position">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Wave32To16Stream.clip">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Wave32To16Stream.volume">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.Wave32To16Stream.#ctor(NAudio.Wave.WaveStream)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Wave32To16Stream"/> class. 
            Creates a new Wave32To16Stream
            </summary>
            <param name="sourceStream">
            the source stream
            </param>
        </member>
        <member name="M:NAudio.Wave.Wave32To16Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from this wave stream
            </summary>
            <param name="destBuffer">Destination buffer</param>
            <param name="offset">Offset into destination buffer</param>
            <param name="numBytes">The num bytes.</param>
            <returns>Number of bytes read.</returns>
        </member>
        <member name="M:NAudio.Wave.Wave32To16Stream.Dispose(System.Boolean)">
            <summary>
            Disposes this WaveStream
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Wave.Wave32To16Stream.Convert32To16(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Conversion to 16 bit and clipping
            </summary>
            <param name="destBuffer">The dest buffer.</param>
            <param name="offset">The offset.</param>
            <param name="sourceBuffer">The source buffer.</param>
            <param name="bytesRead">The bytes read.</param>
        </member>
        <member name="P:NAudio.Wave.Wave32To16Stream.Volume">
            <summary>
            Gets or sets Sets the volume for this stream. 1.0f is full scale
            </summary>
        </member>
        <member name="P:NAudio.Wave.Wave32To16Stream.BlockAlign">
            <summary>
            The block alignment for this wavestream. Do not modify the Position
            to anything that is not a whole multiple of this value
            </summary>
            <value></value>
        </member>
        <member name="P:NAudio.Wave.Wave32To16Stream.Length">
            <summary>
            Returns the stream length
            </summary>
        </member>
        <member name="P:NAudio.Wave.Wave32To16Stream.Position">
            <summary>
            Gets or sets the current position in the stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.Wave32To16Stream.WaveFormat">
            <summary>
            Retrieves the WaveFormat for this stream
            </summary>
            <value></value>
        </member>
        <member name="P:NAudio.Wave.Wave32To16Stream.Clip">
            <summary>
            Gets or sets a value indicating whether Clip indicator. Can be reset.
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveStreams.RiffChunk">
            <summary>
            Holds information about a RIFF file chunk
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.RiffChunk.identifier">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.RiffChunk.length">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.RiffChunk.streamPosition">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.RiffChunk.#ctor(System.Int32,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveStreams.RiffChunk"/> class.
            Creates a RiffChunk object
            </summary>
            <param name="identifier">The identifier.</param>
            <param name="length">The length.</param>
            <param name="streamPosition">The stream position.</param>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.RiffChunk.Identifier">
            <summary>
            Gets The chunk identifier
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.RiffChunk.IdentifierAsString">
            <summary>
            Gets The chunk identifier converted to a string
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.RiffChunk.Length">
            <summary>
            Gets The chunk length
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.RiffChunk.StreamPosition">
            <summary>
            Gets The stream position this chunk is located at
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveBuffer">
            <summary>
            <para>WaveBuffer class use to store wave datas. Data can be manipulated with arrays
            (<see cref="P:NAudio.Wave.WaveBuffer.ByteBuffer"/>,<see cref="P:NAudio.Wave.WaveBuffer.FloatBuffer"/>,<see cref="P:NAudio.Wave.WaveBuffer.ShortBuffer"/>,<see cref="P:NAudio.Wave.WaveBuffer.IntBuffer"/> ) that are pointing to the
            same memory buffer. Use the associated Count property based on the type of buffer to get the number of 
            data in the buffer.
            Implicit casting is now supported to float[], byte[], int[], short[].
            You must not use Length on returned arrays.</para>
            <para>NOT YET USED.</para>
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveOutputs.IWaveBuffer">
            <summary>
            <para>IWaveBuffer interface use to store wave datas. 
            Data can be manipulated with arrays (<see cref="P:NAudio.Wave.WaveOutputs.IWaveBuffer.ByteBuffer"/>,<see cref="P:NAudio.Wave.WaveOutputs.IWaveBuffer.FloatBuffer"/>,
            <see cref="P:NAudio.Wave.WaveOutputs.IWaveBuffer.ShortBuffer"/>,<see cref="P:NAudio.Wave.WaveOutputs.IWaveBuffer.IntBuffer"/> ) that are pointing to the same memory buffer.
            This is a requirement for all subclasses.</para>
            <para>Use the associated Count property based on the type of buffer to get the number of data in the 
            buffer.</para>
            <para>See <see cref="T:NAudio.Wave.WaveBuffer"/> for the standard implementation using C# unions.</para>
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOutputs.IWaveBuffer.ByteBuffer">
            <summary>
            Gets the byte buffer.
            </summary>
            <value>The byte buffer.</value>
        </member>
        <member name="P:NAudio.Wave.WaveOutputs.IWaveBuffer.FloatBuffer">
            <summary>
            Gets the float buffer.
            </summary>
            <value>The float buffer.</value>
        </member>
        <member name="P:NAudio.Wave.WaveOutputs.IWaveBuffer.ShortBuffer">
            <summary>
            Gets the short buffer.
            </summary>
            <value>The short buffer.</value>
        </member>
        <member name="P:NAudio.Wave.WaveOutputs.IWaveBuffer.IntBuffer">
            <summary>
            Gets the int buffer.
            </summary>
            <value>The int buffer.</value>
        </member>
        <member name="P:NAudio.Wave.WaveOutputs.IWaveBuffer.MaxSize">
            <summary>
            Gets the max size in bytes of the byte buffer..
            </summary>
            <value>Maximum number of bytes in the buffer.</value>
        </member>
        <member name="P:NAudio.Wave.WaveOutputs.IWaveBuffer.ByteBufferCount">
            <summary>
            Gets the byte buffer count.
            </summary>
            <value>The byte buffer count.</value>
        </member>
        <member name="P:NAudio.Wave.WaveOutputs.IWaveBuffer.FloatBufferCount">
            <summary>
            Gets the float buffer count.
            </summary>
            <value>The float buffer count.</value>
        </member>
        <member name="P:NAudio.Wave.WaveOutputs.IWaveBuffer.ShortBufferCount">
            <summary>
            Gets the short buffer count.
            </summary>
            <value>The short buffer count.</value>
        </member>
        <member name="P:NAudio.Wave.WaveOutputs.IWaveBuffer.IntBufferCount">
            <summary>
            Gets the int buffer count.
            </summary>
            <value>The int buffer count.</value>
        </member>
        <member name="F:NAudio.Wave.WaveBuffer.numberOfBytes">
            <summary>
            Number of Bytes
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveBuffer.byteBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveBuffer.floatBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveBuffer.shortBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveBuffer.intBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveBuffer.op_Implicit(NAudio.Wave.WaveBuffer)~System.Byte[]">
            <summary>
            Performs an implicit conversion from <see cref="T:NAudio.Wave.WaveBuffer"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="waveBuffer">The wave buffer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveBuffer.op_Implicit(NAudio.Wave.WaveBuffer)~System.Single[]">
            <summary>
            Performs an implicit conversion from <see cref="T:NAudio.Wave.WaveBuffer"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="waveBuffer">The wave buffer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveBuffer.op_Implicit(NAudio.Wave.WaveBuffer)~System.Int32[]">
            <summary>
            Performs an implicit conversion from <see cref="T:NAudio.Wave.WaveBuffer"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="waveBuffer">The wave buffer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveBuffer.op_Implicit(NAudio.Wave.WaveBuffer)~System.Int16[]">
            <summary>
            Performs an implicit conversion from <see cref="T:NAudio.Wave.WaveBuffer"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="waveBuffer">The wave buffer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveBuffer"/> class.
            </summary>
            <param name="sizeToAllocateInBytes">The number of bytes. The size of the final buffer will be aligned on 4 Bytes (upper bound)</param>
        </member>
        <member name="M:NAudio.Wave.WaveBuffer.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveBuffer"/> class binded to a specific byte buffer.
            </summary>
            <param name="bufferToBoundTo">A byte buffer to bound the WaveBuffer to.</param>
        </member>
        <member name="M:NAudio.Wave.WaveBuffer.BindTo(System.Byte[])">
            <summary>
            Binds this WaveBuffer instance to a specific byte buffer.
            </summary>
            <param name="bufferToBoundTo">A byte buffer to bound the WaveBuffer to.</param>
        </member>
        <member name="M:NAudio.Wave.WaveBuffer.Clear">
            <summary>
            Clears the associated buffer.
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveBuffer.Copy(System.Array)">
            <summary>
            Copy this WaveBuffer to a destination buffer up to ByteBufferCount bytes.
            </summary>
            <param name="destinationArray">The destination array.</param>
        </member>
        <member name="M:NAudio.Wave.WaveBuffer.CheckValidityCount(System.String,System.Int32,System.Int32)">
            <summary>
            Checks the validity of the count parameters.
            </summary>
            <param name="argName">Name of the arg.</param>
            <param name="value">The value.</param>
            <param name="sizeOfValue">The size of value.</param>
            <returns>The number of new bytes.</returns>
        </member>
        <member name="P:NAudio.Wave.WaveBuffer.ByteBuffer">
            <summary>
            Gets the byte buffer.
            </summary>
            <value>The byte buffer.</value>
        </member>
        <member name="P:NAudio.Wave.WaveBuffer.FloatBuffer">
            <summary>
            Gets the float buffer.
            </summary>
            <value>The float buffer.</value>
        </member>
        <member name="P:NAudio.Wave.WaveBuffer.ShortBuffer">
            <summary>
            Gets the short buffer.
            </summary>
            <value>The short buffer.</value>
        </member>
        <member name="P:NAudio.Wave.WaveBuffer.IntBuffer">
            <summary>
            Gets the int buffer.
            </summary>
            <value>The int buffer.</value>
        </member>
        <member name="P:NAudio.Wave.WaveBuffer.MaxSize">
            <summary>
            Gets the max size in bytes of the byte buffer..
            </summary>
            <value>Maximum number of bytes in the buffer.</value>
        </member>
        <member name="P:NAudio.Wave.WaveBuffer.ByteBufferCount">
            <summary>
            Gets or sets the byte buffer count.
            </summary>
            <value>The byte buffer count.</value>
        </member>
        <member name="P:NAudio.Wave.WaveBuffer.FloatBufferCount">
            <summary>
            Gets or sets the float buffer count.
            </summary>
            <value>The float buffer count.</value>
        </member>
        <member name="P:NAudio.Wave.WaveBuffer.ShortBufferCount">
            <summary>
            Gets or sets the short buffer count.
            </summary>
            <value>The short buffer count.</value>
        </member>
        <member name="P:NAudio.Wave.WaveBuffer.IntBufferCount">
            <summary>
            Gets or sets the int buffer count.
            </summary>
            <value>The int buffer count.</value>
        </member>
        <member name="T:NAudio.Wave.ImaAdpcmWaveFormat">
            <summary>
            IMA/DVI ADPCM Wave Format
            Work in progress
            </summary>
        </member>
        <member name="F:NAudio.Wave.ImaAdpcmWaveFormat.samplesPerBlock">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.ImaAdpcmWaveFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.ImaAdpcmWaveFormat"/> class. 
            Creates a new IMA / DVI ADPCM Wave Format
            </summary>
            <param name="sampleRate">
            Sample Rate
            </param>
            <param name="channels">
            Number of channels
            </param>
            <param name="bitsPerSample">
            Bits Per Sample
            </param>
        </member>
        <member name="M:NAudio.Wave.ImaAdpcmWaveFormat.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NAudio.Wave.ImaAdpcmWaveFormat"/> class from being created. 
            parameterless constructor for Marshalling
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOTimeCodeFlags">
            <summary>
            The ASIO Time Code Flags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTimeCodeFlags.kTcValid">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTimeCodeFlags.kTcRunning">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTimeCodeFlags.kTcReverse">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTimeCodeFlags.kTcOnspeed">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTimeCodeFlags.kTcStill">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTimeCodeFlags.kTcSpeedValid">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Mixer.UnsignedMixerControl">
            <summary>
            Represents an unsigned mixer control
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerControl">
            <summary>
            Represents a mixer control
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControl.mixerControl">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControl.mixerControlDetails">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControl.mixerHandle">
            <summary>
            Mixer Handle
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControl.nChannels">
            <summary>
            Number of Channels
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControl.mixerHandleType">
            <summary>
            Mixer Handle Type
            </summary>
        </member>
        <member name="M:NAudio.Mixer.MixerControl.GetMixerControls(System.IntPtr,NAudio.Mixer.MixerLine,NAudio.Mixer.MixerFlags)">
            <summary>
            Gets all the mixer controls
            </summary>
            <param name="mixerHandle">The mixer handle.</param>
            <param name="mixerLine">The mixer line.</param>
            <param name="mixerHandleType">Type of the mixer handle.</param>
            <returns>A list of MixerControls</returns>
        </member>
        <member name="M:NAudio.Mixer.MixerControl.GetMixerControl(System.IntPtr,System.Int32,System.Int32,System.Int32,NAudio.Mixer.MixerFlags)">
            <summary>
            Gets a specified Mixer Control
            </summary>
            <param name="mixerHandle">Mixer Handle</param>
            <param name="nLineID">The Line ID</param>
            <param name="controlId">The Control ID</param>
            <param name="nChannels">Number of Channels</param>
            <param name="mixerFlags">Flags to use (indicates the meaning of mixerHandle)</param>
            <returns>The specific MixerControl</returns>
        </member>
        <member name="M:NAudio.Mixer.MixerControl.ToString">
            <summary>
            String representation for debug purposes
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NAudio.Mixer.MixerControl.GetControlDetails">
            <summary>
            Gets the control details
            </summary>
        </member>
        <member name="M:NAudio.Mixer.MixerControl.GetDetails(System.IntPtr)">
            <summary>
            Gets the control details
            </summary>
            <param name="pDetails">The pointer details.</param>
        </member>
        <member name="M:NAudio.Mixer.MixerControl.IsControlBoolean(NAudio.Mixer.MixerControlType)">
            <summary>
            Returns true if this is a boolean control
            </summary>
            <param name="controlType">Control type</param>
            <returns>
            <c>true</c> if [is control boolean] [the specified control type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.Mixer.MixerControl.IsControlListText(NAudio.Mixer.MixerControlType)">
            <summary>
            Determines whether a specified mixer control type is a list text control
            </summary>
            <param name="controlType">Type of the control.</param>
            <returns>
            <c>true</c> if [is control list text] [the specified control type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.Mixer.MixerControl.IsControlSigned(NAudio.Mixer.MixerControlType)">
            <summary>
            Determines whether [is control signed] [the specified control type].
            </summary>
            <param name="controlType">Type of the control.</param>
            <returns>
            <c>true</c> if [is control signed] [the specified control type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.Mixer.MixerControl.IsControlUnsigned(NAudio.Mixer.MixerControlType)">
            <summary>
            Determines whether [is control unsigned] [the specified control type].
            </summary>
            <param name="controlType">Type of the control.</param>
            <returns>
            <c>true</c> if [is control unsigned] [the specified control type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.Mixer.MixerControl.IsControlCustom(NAudio.Mixer.MixerControlType)">
            <summary>
            Determines whether [is control custom] [the specified control type].
            </summary>
            <param name="controlType">Type of the control.</param>
            <returns>
            <c>true</c> if [is control custom] [the specified control type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:NAudio.Mixer.MixerControl.Name">
            <summary>
            Gets Mixer control name
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerControl.ControlType">
            <summary>
            Gets Mixer control type
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerControl.IsBoolean">
            <summary>
            Gets a value indicating whether Is this a boolean control
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerControl.IsListText">
            <summary>
            Gets a value indicating whether True if this is a list text control
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerControl.IsSigned">
            <summary>
            Gets a value indicating whether True if this is a signed control
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerControl.IsUnsigned">
            <summary>
            Gets a value indicating whether True if this is an unsigned control
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerControl.IsCustom">
            <summary>
            Gets a value indicating whether True if this is a custom control
            </summary>
        </member>
        <member name="F:NAudio.Mixer.UnsignedMixerControl.unsignedDetails">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Mixer.UnsignedMixerControl.#ctor(NAudio.Mixer.MixerInterop.MIXERCONTROL,System.IntPtr,NAudio.Mixer.MixerFlags,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Mixer.UnsignedMixerControl"/> class.
            </summary>
            <param name="mixerControl">The mixer control.</param>
            <param name="mixerHandle">The mixer handle.</param>
            <param name="mixerHandleType">Type of the mixer handle.</param>
            <param name="nChannels">The n channels.</param>
        </member>
        <member name="M:NAudio.Mixer.UnsignedMixerControl.ToString">
            <summary>
            String Representation for debugging purposes
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NAudio.Mixer.UnsignedMixerControl.GetDetails(System.IntPtr)">
            <summary>
            Gets the details for this control
            </summary>
            <param name="pDetails">The pointer details.</param>
        </member>
        <member name="P:NAudio.Mixer.UnsignedMixerControl.Value">
            <summary>
            Gets or sets The control value
            </summary>
        </member>
        <member name="P:NAudio.Mixer.UnsignedMixerControl.MinValue">
            <summary>
            Gets The control's minimum value
            </summary>
        </member>
        <member name="P:NAudio.Mixer.UnsignedMixerControl.MaxValue">
            <summary>
            Gets The control's maximum value
            </summary>
        </member>
        <member name="P:NAudio.Mixer.UnsignedMixerControl.Percent">
            <summary>
            Gets or sets Value of the control represented as a percentage
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiInMessageEventArgs">
            <summary>
            MIDI In Message Information
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInMessageEventArgs.message">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInMessageEventArgs.midiEvent">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInMessageEventArgs.timestamp">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiInMessageEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.MidiInMessageEventArgs"/> class.
            Create a new MIDI In Message EventArgs
            </summary>
            <param name="message">The message.</param>
            <param name="timestamp">The timestamp.</param>
        </member>
        <member name="P:NAudio.Midi.MidiInMessageEventArgs.RawMessage">
            <summary>
            Gets The Raw message received from the MIDI In API
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiInMessageEventArgs.MidiEvent">
            <summary>
            Gets The raw message interpreted as a MidiEvent
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiInMessageEventArgs.Timestamp">
            <summary>
            Gets The timestamp in milliseconds for this message
            </summary>
        </member>
        <member name="T:NAudio.FileFormats.Sfz.SfzParseState">
            <summary>
            The SFZ Parse State
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Sfz.SfzParseState.Initial">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Sfz.SfzParseState.Region">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Dmo.MediaParamType">
            <summary>
            Originally known as MP_TYPE
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamType.Int">
            <summary>
            Originally known as MPT_INT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamType.Float">
            <summary>
            Originally known as MPT_FLOAT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamType.Bool">
            <summary>
            Originally known as MPT_BOOL
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamType.Enum">
            <summary>
            Originally known as MPT_ENUM
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamType.Max">
            <summary>
            Originally known as MPT_MAX
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioCaptureClient">
            <summary>
            Wraps the COM IAudioCaptureClient.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioCaptureClient.GetBuffer(System.IntPtr@,System.Int32@,NAudio.CoreAudioApi.AudioClientBufferFlags@,System.Int64@,System.Int64@)">
            <summary>
            Gets the buffer.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
            <param name="numFramesToRead">The num frames to read.</param>
            <param name="bufferFlags">The buffer flags.</param>
            <param name="devicePosition">The device position.</param>
            <param name="qpcPosition">The QPC position.</param>
            <returns>The resulf of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioCaptureClient.ReleaseBuffer(System.Int32)">
            <summary>
            Releases the buffer.
            </summary>
            <param name="numFramesRead">The num frames read.</param>
            <returns>The result of the call</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioCaptureClient.GetNextPacketSize(System.Int32@)">
            <summary>
            Gets the size of the next packet.
            </summary>
            <param name="numFramesInNextPacket">The num frames in next packet.</param>
            <returns>A returned value for this call.</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.ErrorCodes">
            <summary>
            Handles error codes.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.SEVERITY_ERROR">
            <summary>
            The severity error.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.FACILITY_AUDCLNT">
            <summary>
            The facility audit.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_NOT_INITIALIZED">
            <summary>
            Not Initialized HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_ALREADY_INITIALIZED">
            <summary>
            Already Initialized HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_WRONG_ENDPOINT_TYPE">
            <summary>
            Wrong Endpoint Type HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_DEVICE_INVALIDATED">
            <summary>
            Device Invalidated HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_NOT_STOPPED">
            <summary>
            Device Not Stopped HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_BUFFER_TOO_LARGE">
            <summary>
            Buffer too large HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_OUT_OF_ORDER">
            <summary>
            Out of order HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_UNSUPPORTED_FORMAT">
            <summary>
            Unsupported Format HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_INVALID_SIZE">
            <summary>
            Invalid Size HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_DEVICE_IN_USE">
            <summary>
            Device in use HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_BUFFER_OPERATION_PENDING">
            <summary>
            Buffer Operation Pending HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_THREAD_NOT_REGISTERED">
            <summary>
            Thread Not Registered HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED">
            <summary>
            Exclusive Mode Not Allowed HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_ENDPOINT_CREATE_FAILED">
            <summary>
            Endpoint Create Failed HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_SERVICE_NOT_RUNNING">
            <summary>
            Service Not Running HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_EVENTHANDLE_NOT_EXPECTED">
            <summary>
            Event Handle not expected HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_EXCLUSIVE_MODE_ONLY">
            <summary>
            Exclusive Mode Only HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL">
            <summary>
            Buffer Duration Period not equal HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_EVENTHANDLE_NOT_SET">
            <summary>
            Event Handle Not Set HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_INCORRECT_BUFFER_SIZE">
            <summary>
            Incorrect Buffer Size HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_BUFFER_SIZE_ERROR">
            <summary>
            Buffer size error HResult.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ErrorCodes.AUDCLNT_E_CPUUSAGE_EXCEEDED">
            <summary>
            CPU Usage Exceeded HResult.
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveStreams.WaveInBuffer">
            <summary>
            A buffer of Wave samples
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.WaveInBuffer.header">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.WaveInBuffer.bufferSize">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.WaveInBuffer.buffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.WaveInBuffer.hBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.WaveInBuffer.waveInHandle">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.WaveInBuffer.hHeader">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.WaveInBuffer.hThis">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.WaveInBuffer.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveStreams.WaveInBuffer"/> class. 
            creates a new wavebuffer
            </summary>
            <param name="waveInHandle">
            WaveIn device to write to
            </param>
            <param name="bufferSize">
            Buffer size in bytes
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.WaveInBuffer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NAudio.Wave.WaveStreams.WaveInBuffer"/> class. 
            Finalizer for this wave buffer
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.WaveInBuffer.Reuse">
            <summary>
            Place this buffer back to record more audio
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.WaveInBuffer.Dispose">
            <summary>
            Releases resources held by this WaveBuffer
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.WaveInBuffer.Dispose(System.Boolean)">
            <summary>
            Releases resources held by this WaveBuffer
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.WaveInBuffer.Data">
            <summary>
            Gets Provides access to the actual record buffer (for reading only)
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.WaveInBuffer.Done">
            <summary>
            Gets a value indicating whether Indicates whether the Done flag is set on this buffer
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.WaveInBuffer.BytesRecorded">
            <summary>
            Gets Number of bytes recorded
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.WaveInBuffer.BufferSize">
            <summary>
            Gets The buffer size in bytes
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveFormatConversionStream">
            <summary>
            WaveStream that passes through an ACM Codec
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatConversionStream.conversionStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatConversionStream.sourceStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatConversionStream.targetFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatConversionStream.length">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatConversionStream.position">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatConversionStream.blockAlign">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormatConversionStream.#ctor(NAudio.Wave.WaveFormat,NAudio.Wave.WaveStream)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveFormatConversionStream"/> class. 
            Create a new WaveFormat conversion stream
            </summary>
            <param name="targetFormat">
            Desired output format
            </param>
            <param name="sourceStream">
            Source stream
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveFormatConversionStream.CreatePcmStream(NAudio.Wave.WaveStream)">
            <summary>
            Creates a stream that can convert to PCM
            </summary>
            <param name="sourceStream">The source stream</param>
            <returns>A PCM stream</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormatConversionStream.SourceToDest(System.Int32)">
            <summary>
            Converts source bytes to destination bytes
            </summary>
            <param name="source">The source.</param>
            <returns>The destination</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormatConversionStream.DestToSource(System.Int32)">
            <summary>
            Converts destination bytes to source bytes
            </summary>
            <param name="dest">The destination.</param>
            <returns>The source.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormatConversionStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from this stream
            </summary>
            <param name="array">Buffer to read into</param>
            <param name="offset">Offset in array to read into</param>
            <param name="count">Number of bytes to read</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormatConversionStream.GetReadSize(System.Int32)">
            <summary>
            Gets the read size
            </summary>
            <param name="milliseconds">Number of milliseconds to read for</param>
            <returns>Number of bytes to read</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormatConversionStream.Dispose(System.Boolean)">
            <summary>
            Disposes this stream
            </summary>
            <param name="disposing">true if the user called this</param>
        </member>
        <member name="P:NAudio.Wave.WaveFormatConversionStream.Length">
            <summary>
            Returns the stream length
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormatConversionStream.Position">
            <summary>
            Gets or sets the current position in the stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormatConversionStream.WaveFormat">
            <summary>
            Gets the WaveFormat of this stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFormatConversionStream.BlockAlign">
            <summary>
            Gets the block alignment for this stream
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveFormats.WaveFormatExtraData">
            <summary>
            The wave format extra data
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormats.WaveFormatExtraData.extraData">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            try with 100 bytes for now, increase if necessary
            </remarks>
        </member>
        <member name="M:NAudio.Wave.WaveFormats.WaveFormatExtraData.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveFormats.WaveFormatExtraData"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:NAudio.Wave.WaveFormats.WaveFormatExtraData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveFormats.WaveFormatExtraData"/> class. 
            parameterless constructor for marshalling
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormats.WaveFormatExtraData.Serialize(System.IO.BinaryWriter)">
            <summary>
            Writes this WaveFormat object to a stream
            </summary>
            <param name="writer">the output stream</param>
        </member>
        <member name="M:NAudio.Wave.WaveFormats.WaveFormatExtraData.ReadExtraData(System.IO.BinaryReader)">
            <summary>
            Reads the extra data.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:NAudio.MmResult">
            <summary>
            Windows multimedia error codes from mmsystem.h.
            </summary>
        </member>
        <member name="F:NAudio.MmResult.NoError">
            <summary>no error, MMSYSERR_NOERROR</summary>
        </member>
        <member name="F:NAudio.MmResult.UnspecifiedError">
            <summary>unspecified error, MMSYSERR_ERROR</summary>
        </member>
        <member name="F:NAudio.MmResult.BadDeviceId">
            <summary>device ID out of range, MMSYSERR_BADDEVICEID</summary>
        </member>
        <member name="F:NAudio.MmResult.NotEnabled">
            <summary>driver failed enable, MMSYSERR_NOTENABLED</summary>
        </member>
        <member name="F:NAudio.MmResult.AlreadyAllocated">
            <summary>device already allocated, MMSYSERR_ALLOCATED</summary>
        </member>
        <member name="F:NAudio.MmResult.InvalidHandle">
            <summary>device handle is invalid, MMSYSERR_INVALHANDLE</summary>
        </member>
        <member name="F:NAudio.MmResult.NoDriver">
            <summary>no device driver present, MMSYSERR_NODRIVER</summary>
        </member>
        <member name="F:NAudio.MmResult.MemoryAllocationError">
            <summary>memory allocation error, MMSYSERR_NOMEM</summary>
        </member>
        <member name="F:NAudio.MmResult.NotSupported">
            <summary>function isn't supported, MMSYSERR_NOTSUPPORTED</summary>
        </member>
        <member name="F:NAudio.MmResult.BadErrorNumber">
            <summary>error value out of range, MMSYSERR_BADERRNUM</summary>
        </member>
        <member name="F:NAudio.MmResult.InvalidFlag">
            <summary>invalid flag passed, MMSYSERR_INVALFLAG</summary>
        </member>
        <member name="F:NAudio.MmResult.InvalidParameter">
            <summary>invalid parameter passed, MMSYSERR_INVALPARAM</summary>
        </member>
        <member name="F:NAudio.MmResult.HandleBusy">
            <summary>handle being used simultaneously on another thread (eg callback),MMSYSERR_HANDLEBUSY</summary>
        </member>
        <member name="F:NAudio.MmResult.InvalidAlias">
            <summary>specified alias not found, MMSYSERR_INVALIDALIAS</summary>
        </member>
        <member name="F:NAudio.MmResult.BadRegistryDatabase">
            <summary>bad registry database, MMSYSERR_BADDB</summary>
        </member>
        <member name="F:NAudio.MmResult.RegistryKeyNotFound">
            <summary>registry key not found, MMSYSERR_KEYNOTFOUND</summary>
        </member>
        <member name="F:NAudio.MmResult.RegistryReadError">
            <summary>registry read error, MMSYSERR_READERROR</summary>
        </member>
        <member name="F:NAudio.MmResult.RegistryWriteError">
            <summary>registry write error, MMSYSERR_WRITEERROR</summary>
        </member>
        <member name="F:NAudio.MmResult.RegistryDeleteError">
            <summary>registry delete error, MMSYSERR_DELETEERROR</summary>
        </member>
        <member name="F:NAudio.MmResult.RegistryValueNotFound">
            <summary>registry value not found, MMSYSERR_VALNOTFOUND</summary>
        </member>
        <member name="F:NAudio.MmResult.NoDriverCallback">
            <summary>driver does not call DriverCallback, MMSYSERR_NODRIVERCB</summary>
        </member>
        <member name="F:NAudio.MmResult.MoreData">
            <summary>more data to be returned, MMSYSERR_MOREDATA</summary>
        </member>
        <member name="F:NAudio.MmResult.WaveBadFormat">
            <summary>unsupported wave format, WAVERR_BADFORMAT</summary>
        </member>
        <member name="F:NAudio.MmResult.WaveStillPlaying">
            <summary>still something playing, WAVERR_STILLPLAYING</summary>
        </member>
        <member name="F:NAudio.MmResult.WaveHeaderUnprepared">
            <summary>header not prepared, WAVERR_UNPREPARED</summary>
        </member>
        <member name="F:NAudio.MmResult.WaveSync">
            <summary>device is synchronous, WAVERR_SYNC</summary>
        </member>
        <member name="F:NAudio.MmResult.AcmNotPossible">
            <summary>Conversion not possible (ACMERR_NOTPOSSIBLE)</summary>
        </member>
        <member name="F:NAudio.MmResult.AcmBusy">
            <summary>Busy (ACMERR_BUSY)</summary>
        </member>
        <member name="F:NAudio.MmResult.AcmHeaderUnprepared">
            <summary>Header Unprepared (ACMERR_UNPREPARED)</summary>
        </member>
        <member name="F:NAudio.MmResult.AcmCancelled">
            <summary>Cancelled (ACMERR_CANCELED)</summary>
        </member>
        <member name="F:NAudio.MmResult.MixerInvalidLine">
            <summary>invalid line (MIXERR_INVALLINE)</summary>
        </member>
        <member name="F:NAudio.MmResult.MixerInvalidControl">
            <summary>invalid control (MIXERR_INVALCONTROL)</summary>
        </member>
        <member name="F:NAudio.MmResult.MixerInvalidValue">
            <summary>invalid value (MIXERR_INVALVALUE)</summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmFormatTag">
            <summary>
            ACM Format Tag
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatTag.formatTagDetails">
            <summary>
            The format tag details.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmFormatTag.#ctor(NAudio.Wave.Compression.AcmFormatTagDetails)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Compression.AcmFormatTag"/> class.
            </summary>
            <param name="formatTagDetails">The format tag details.</param>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmFormatTag.FormatTagIndex">
            <summary>
            Gets Format Tag Index
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmFormatTag.FormatTag">
            <summary>
            Gets Format Tag
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmFormatTag.FormatSize">
            <summary>
            Gets Format Size
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmFormatTag.SupportFlags">
            <summary>
            Gets Support Flags
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmFormatTag.StandardFormatsCount">
            <summary>
            Gets Standard Formats Count
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmFormatTag.FormatDescription">
            <summary>
            Gets Format Description
            </summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmDriverDetails">
            <summary>
            Interop structure for ACM driver details (ACMDRIVERDETAILS)
            http://msdn.microsoft.com/en-us/library/dd742889%28VS.85%29.aspx
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.ShortNameChars">
            <summary>
            Originally known as ACMDRIVERDETAILS_SHORTNAME_CHARS
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.LongNameChars">
            <summary>
            Originally known as ACMDRIVERDETAILS_LONGNAME_CHARS
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.CopyrightChars">
            <summary>
            Originally known as ACMDRIVERDETAILS_COPYRIGHT_CHARS
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.LicensingChars">
            <summary>
            Originally known as ACMDRIVERDETAILS_LICENSING_CHARS 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.FeaturesChars">
            <summary>
            Originally known as ACMDRIVERDETAILS_FEATURES_CHARS
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.structureSize">
            <summary>
            DWORD cbStruct
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.fccType">
            <summary>
            FOURCC fccType
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.fccComp">
            <summary>
            FOURCC fccComp
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.manufacturerId">
            <summary>
            WORD   wMid
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.productId">
            <summary>
            ... WORD wPid ...
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.acmVersion">
            <summary>
            DWORD vdwACM
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.driverVersion">
            <summary>
            DWORD vdwDriver
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.supportFlags">
            <summary>
            DWORD  fdwSupport
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.formatTagsCount">
            <summary>
            DWORD cFormatTags
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.filterTagsCount">
            <summary>
            DWORD cFilterTags
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.hicon">
            <summary>
            HICON hicon
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.shortName">
            <summary>
            TCHAR  szShortName[ACMDRIVERDETAILS_SHORTNAME_CHARS]
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.longName">
            <summary>
            TCHAR  szLongName[ACMDRIVERDETAILS_LONGNAME_CHARS]
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.copyright">
            <summary>
            TCHAR  szCopyright[ACMDRIVERDETAILS_COPYRIGHT_CHARS]
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.licensing">
            <summary>
            TCHAR  szLicensing[ACMDRIVERDETAILS_LICENSING_CHARS]
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetails.features">
            <summary>
            TCHAR  szFeatures[ACMDRIVERDETAILS_FEATURES_CHARS]
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOChannelInfo">
            <summary>
            The ASIO Channel Info.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOChannelInfo.channel">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOChannelInfo.isInput">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOChannelInfo.isActive">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOChannelInfo.channelGroup">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOChannelInfo.type">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOChannelInfo.name">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Utils.ProgressMessageType">
            <summary>
            Progress Message Type
            </summary>
        </member>
        <member name="F:NAudio.Utils.ProgressMessageType.Trace">
            <summary>
            Trace option.
            </summary>
        </member>
        <member name="F:NAudio.Utils.ProgressMessageType.Information">
            <summary>
            Information option.
            </summary>
        </member>
        <member name="F:NAudio.Utils.ProgressMessageType.Warning">
            <summary>
            Warning option.
            </summary>
        </member>
        <member name="F:NAudio.Utils.ProgressMessageType.Error">
            <summary>
            Error option.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.MMDeviceEnumeratorComObject">
            <summary>
            implements IComMultimediaDeviceEnumerator
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerControlUnits">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlUnits.Custom">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlUnits.Boolean">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlUnits.Signed">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlUnits.Unsigned">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlUnits.Decibels">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlUnits.Percent">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlUnits.Mask">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Midi.TrackSequenceNumberEvent">
            <summary>
            Represents a MIDI track sequence number event event
            </summary>
        </member>
        <member name="T:NAudio.Midi.MetaEvent">
            <summary>
            Represents a MIDI meta event
            </summary>
        </member>
        <member name="F:NAudio.Midi.MetaEvent.metaDataLength">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MetaEvent.metaEvent">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MetaEvent.data">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.MetaEvent.#ctor(NAudio.Midi.MetaEventType,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.MetaEvent"/> class. 
            Custom constructor for use by derived types, who will manage the data themselves
            </summary>
            <param name="metaEventType">
            Meta event type
            </param>
            <param name="metaDataLength">
            Meta data length
            </param>
            <param name="absoluteTime">
            Absolute time
            </param>
        </member>
        <member name="M:NAudio.Midi.MetaEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.MetaEvent"/> class. 
            Empty constructor
            </summary>
        </member>
        <member name="M:NAudio.Midi.MetaEvent.ReadMetaEvent(System.IO.BinaryReader)">
            <summary>
            Reads a meta-event from a stream
            </summary>
            <param name="br">A binary reader based on the stream of MIDI data</param>
            <returns>A new MetaEvent object</returns>
        </member>
        <member name="M:NAudio.Midi.MetaEvent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NAudio.Midi.MetaEvent.Export(System.Int64@,System.IO.BinaryWriter)">
            <summary>
            Exports this MIDI event's data
            Overriden in derived classes, but they should call this version
            </summary>
            <param name="absoluteTime">Absolute time used to calculate delta.
            Is updated ready for the next delta calculation</param>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="P:NAudio.Midi.MetaEvent.MetaEventType">
            <summary>
            Gets the type of this meta event
            </summary>
        </member>
        <member name="F:NAudio.Midi.TrackSequenceNumberEvent.sequenceNumber">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.TrackSequenceNumberEvent.#ctor(System.IO.BinaryReader,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.TrackSequenceNumberEvent"/> class. 
            Reads a new track sequence number event from a MIDI stream
            </summary>
            <param name="br">
            The MIDI stream
            </param>
            <param name="length">
            the data length
            </param>
        </member>
        <member name="M:NAudio.Midi.TrackSequenceNumberEvent.ToString">
            <summary>
            Describes this event
            </summary>
            <returns>String describing the event</returns>
        </member>
        <member name="M:NAudio.Midi.TrackSequenceNumberEvent.Export(System.Int64@,System.IO.BinaryWriter)">
            <summary>
            Calls base class export first, then exports the data
            specific to this event
            <seealso cref="M:NAudio.Midi.MidiEvent.Export(System.Int64@,System.IO.BinaryWriter)">MidiEvent.Export</seealso>
            </summary>
            <param name="absoluteTime">Absolute time used to calculate delta.
            Is updated ready for the next delta calculation</param>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="T:NAudio.Midi.TempoEvent">
            <summary>
            Represents a MIDI tempo event
            </summary>
        </member>
        <member name="F:NAudio.Midi.TempoEvent.microsecondsPerQuarterNote">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.TempoEvent.#ctor(System.IO.BinaryReader,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.TempoEvent"/> class. 
            Reads a new tempo event from a MIDI stream
            </summary>
            <param name="br">
            The MIDI stream
            </param>
            <param name="length">
            the data length
            </param>
        </member>
        <member name="M:NAudio.Midi.TempoEvent.#ctor(System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.TempoEvent"/> class. 
            Creates a new tempo event with specified settings
            </summary>
            <param name="microsecondsPerQuarterNote">
            Microseconds per quarter note
            </param>
            <param name="absoluteTime">
            Absolute time
            </param>
        </member>
        <member name="M:NAudio.Midi.TempoEvent.ToString">
            <summary>
            Describes this tempo event
            </summary>
            <returns>String describing the tempo event</returns>
        </member>
        <member name="M:NAudio.Midi.TempoEvent.Export(System.Int64@,System.IO.BinaryWriter)">
            <summary>
            Calls base class export first, then exports the data
            specific to this event
            <seealso cref="M:NAudio.Midi.MidiEvent.Export(System.Int64@,System.IO.BinaryWriter)">MidiEvent.Export</seealso>
            </summary>
            <param name="absoluteTime">Absolute time used to calculate delta.
            Is updated ready for the next delta calculation</param>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="P:NAudio.Midi.TempoEvent.MicrosecondsPerQuarterNote">
            <summary>
            Gets Microseconds per quarter note
            </summary>
        </member>
        <member name="P:NAudio.Midi.TempoEvent.Tempo">
            <summary>
            Gets The Tempo
            </summary>
        </member>
        <member name="T:NAudio.Dmo.MediaParamInfo">
            <summary>
            Originally known as MP_PARAMINFO
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamInfo.mpType">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamInfo.mopCaps">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamInfo.mpdMinValue">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamInfo.mpdMaxValue">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamInfo.mpdNeutralValue">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamInfo.szUnitText">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamInfo.szLabel">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Dmo.IMediaParamInfo">
            <summary>
            defined in Medparam.h
            </summary>
        </member>
        <member name="M:NAudio.Dmo.IMediaParamInfo.GetParamCount(System.Int32@)">
            <summary>
            Gets the param count.
            </summary>
            <param name="paramCount">The param count.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaParamInfo.GetParamInfo(System.Int32,NAudio.Dmo.MediaParamInfo@)">
            <summary>
            Gets the param info.
            </summary>
            <param name="paramIndex">Index of the param.</param>
            <param name="paramInfo">The param info.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaParamInfo.GetParamText(System.Int32,System.IntPtr@)">
            <summary>
            Gets the param text.
            </summary>
            <param name="paramIndex">Index of the param.</param>
            <param name="paramText">The param text.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaParamInfo.GetNumTimeFormats(System.Int32@)">
            <summary>
            Gets the num time formats.
            </summary>
            <param name="numTimeFormats">The num time formats.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaParamInfo.GetSupportedTimeFormat(System.Int32,System.Guid@)">
            <summary>
            Gets the supported time format.
            </summary>
            <param name="formatIndex">Index of the format.</param>
            <param name="guidTimeFormat">The GUID time format.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IMediaParamInfo.GetCurrentTimeFormat(System.Guid@,System.Int32@)">
            <summary>
            Gets the current time format.
            </summary>
            <param name="guidTimeFormat">The GUID time format.</param>
            <param name="mediaTimeData">The media time data.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioMeterInformationChannels">
            <summary>
            Audio Meter Information Channels
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioMeterInformationChannels._AudioMeterInformation">
            <summary>
            The audio meter information.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioMeterInformationChannels.#ctor(NAudio.CoreAudioApi.Interfaces.IAudioMeterInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.AudioMeterInformationChannels"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioMeterInformationChannels.Count">
            <summary>
            Gets Metering Channel Count
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioMeterInformationChannels.Item(System.Int32)">
            <summary>
            Get Peak value
            </summary>
            <param name="index">Channel index</param>
            <returns>Peak value</returns>
        </member>
        <member name="T:NAudio.Wave.SimpleCompressorStream">
            <summary>
            A simple compressor
            </summary>
        </member>
        <member name="F:NAudio.Wave.SimpleCompressorStream.sourceStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.SimpleCompressorStream.simpleCompressor">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.SimpleCompressorStream.sourceBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.SimpleCompressorStream.enabled">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.SimpleCompressorStream.channels">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.SimpleCompressorStream.bytesPerSample">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.SimpleCompressorStream.#ctor(NAudio.Wave.WaveStream)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.SimpleCompressorStream"/> class. 
            Create a new simple compressor stream
            </summary>
            <param name="sourceStream">
            Source stream
            </param>
        </member>
        <member name="M:NAudio.Wave.SimpleCompressorStream.HasData(System.Int32)">
            <summary>
            Determine whether the stream has the required amount of data.
            </summary>
            <param name="count">Number of bytes of data required from the stream.</param>
            <returns>Flag indicating whether the required amount of data is avialable.</returns>
        </member>
        <member name="M:NAudio.Wave.SimpleCompressorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from this stream
            </summary>
            <param name="array">Buffer to read into</param>
            <param name="offset">Offset in array to read into</param>
            <param name="count">Number of bytes to read</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:NAudio.Wave.SimpleCompressorStream.Dispose(System.Boolean)">
            <summary>
            Disposes this stream
            </summary>
            <param name="disposing">true if the user called this</param>
        </member>
        <member name="M:NAudio.Wave.SimpleCompressorStream.ReadSamples(System.Byte[],System.Int32,System.Double@,System.Double@)">
            <summary>
            Reads the samples.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="start">The start.</param>
            <param name="left">The left argument.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:NAudio.Wave.SimpleCompressorStream.WriteSamples(System.Byte[],System.Int32,System.Double,System.Double)">
            <summary>
            Writes the samples.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="start">The start.</param>
            <param name="left">The left argument.</param>
            <param name="right">The right.</param>
        </member>
        <member name="P:NAudio.Wave.SimpleCompressorStream.MakeUpGain">
            <summary>
            Gets or sets Make-up Gain
            </summary>
        </member>
        <member name="P:NAudio.Wave.SimpleCompressorStream.Threshold">
            <summary>
            Gets or sets The Threshold
            </summary>
        </member>
        <member name="P:NAudio.Wave.SimpleCompressorStream.Ratio">
            <summary>
            Gets or sets the Ratio
            </summary>
        </member>
        <member name="P:NAudio.Wave.SimpleCompressorStream.Attack">
            <summary>
            Gets or sets Attack time
            </summary>
        </member>
        <member name="P:NAudio.Wave.SimpleCompressorStream.Release">
            <summary>
            Gets or sets Release time
            </summary>
        </member>
        <member name="P:NAudio.Wave.SimpleCompressorStream.Enabled">
            <summary>
            Gets or sets a value indicating whether gain is on or off
            </summary>
        </member>
        <member name="P:NAudio.Wave.SimpleCompressorStream.Length">
            <summary>
            Returns the stream length
            </summary>
        </member>
        <member name="P:NAudio.Wave.SimpleCompressorStream.Position">
            <summary>
            Gets or sets the current position in the stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.SimpleCompressorStream.WaveFormat">
            <summary>
            Gets the WaveFormat of this stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.SimpleCompressorStream.BlockAlign">
            <summary>
            Gets the block alignment for this stream
            </summary>
        </member>
        <member name="T:NAudio.Wave.AsioOut">
            <summary>
            <para>ASIO Out Player. New implementation using an internal C# binding.</para>
            <para>This implementation is only supporting Short16Bit and Float32Bit formats and is optimized 
            for 2 outputs channels .
            SampleRate is supported only if ASIODriver is supporting it (TODO: Add a resampler otherwhise).</para>
            <para>This implementation is probably the first ASIODriver binding fully implemented in C#!</para>
            <para>Original Contributor: Mark Heath 
            New Contributor to C# binding : Alexandre Mutel - email: alexandre_mutel at yahoo.fr</para>
            </summary>
        </member>
        <member name="F:NAudio.Wave.AsioOut.driver">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.AsioOut.sourceStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.AsioOut.waveFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.AsioOut.playbackState">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.AsioOut.nbSamples">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.AsioOut.waveBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.AsioOut.convertor">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.AsioOut.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.AsioOut"/> class with the first 
            available ASIO Driver.
            </summary>
        </member>
        <member name="M:NAudio.Wave.AsioOut.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.AsioOut"/> class with the driver name.
            </summary>
            <param name="driverName">Name of the device.</param>
        </member>
        <member name="M:NAudio.Wave.AsioOut.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.AsioOut"/> class. 
            Opens an ASIO output device
            </summary>
            <param name="driverIndex">
            Device number (zero based)
            </param>
        </member>
        <member name="M:NAudio.Wave.AsioOut.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NAudio.Wave.AsioOut"/> class. 
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:NAudio.Wave.AsioOut"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:NAudio.Wave.AsioOut.GetDriverNames">
            <summary>
            Gets the names of the installed ASIO Driver.
            </summary>
            <returns>an array of driver names</returns>
        </member>
        <member name="M:NAudio.Wave.AsioOut.isSupported">
            <summary>
            Determines whether ASIO is supported.
            </summary>
            <returns>
                <c>true</c> if ASIO is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.Wave.AsioOut.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NAudio.Wave.AsioOut.ShowControlPanel">
            <summary>
            Shows the control panel
            </summary>
        </member>
        <member name="M:NAudio.Wave.AsioOut.Play">
            <summary>
            Starts playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.AsioOut.Stop">
            <summary>
            Stops playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.AsioOut.Pause">
            <summary>
            Pauses playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.AsioOut.Init(NAudio.Wave.IWaveProvider)">
            <summary>
            Initialises to play
            </summary>
            <param name="waveProvider">The waveprovider to be played</param>
        </member>
        <member name="M:NAudio.Wave.AsioOut.initFromName(System.String)">
            <summary>
            Inits the driver from the asio driver name.
            </summary>
            <param name="driverName">Name of the driver.</param>
        </member>
        <member name="M:NAudio.Wave.AsioOut.driver_BufferUpdate(System.IntPtr[])">
            <summary>
            driver buffer update callback to fill the wave buffer.
            </summary>
            <param name="bufferChannels">The buffer channels.</param>
        </member>
        <member name="M:NAudio.Wave.AsioOut.RaisePlaybackStopped">
            <summary>
            Raises the playback stopped.
            </summary>
        </member>
        <member name="E:NAudio.Wave.AsioOut.PlaybackStopped">
            <summary>
            Playback Stopped
            </summary>
        </member>
        <member name="P:NAudio.Wave.AsioOut.PlaybackState">
            <summary>
            Gets Playback State
            </summary>
        </member>
        <member name="P:NAudio.Wave.AsioOut.Volume">
            <summary>
            Gets or sets  the volume (1.0 is unity gain)
            </summary>
        </member>
        <member name="T:NAudio.Wave.Compression.WaveFilter">
            <summary>
            Represents a Wave Filter.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.WaveFilter.StructureSize">
            <summary>
            Originally known as cbStruct
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.WaveFilter.FilterTag">
            <summary>
            Originally known as dwFilterTag
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.WaveFilter.Filter">
            <summary>
            Originally known as fdwFilter
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.WaveFilter.Reserved">
            <summary>
            Originally known as reserved
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOError">
            <summary>
            The ASIO Error enum.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOError.ASE_OK">
            <summary>
            This value will be returned whenever the call succeeded
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOError.ASE_SUCCESS">
            <summary>
            unique success return value for ASIOFuture calls
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOError.ASE_NotPresent">
            <summary>
            hardware input or output is not present or available
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOError.ASE_HWMalfunction">
            <summary>
            hardware is malfunctioning (can be returned by any ASIO function)
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOError.ASE_InvalidParameter">
            <summary>
            input parameter invalid
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOError.ASE_InvalidMode">
            <summary>
            hardware is in a bad mode or used in a bad mode
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOError.ASE_SPNotAdvancing">
            <summary>
            hardware is not running when sample position is inquired
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOError.ASE_NoClock">
            <summary>
            sample clock or rate cannot be determined or is not present
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOError.ASE_NoMemory">
            <summary>
            not enough memory for completing the request
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOBufferInfo">
            <summary>
            The ASIO Buffer Information.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOBufferInfo.isInput">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOBufferInfo.channelNum">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOBufferInfo.pBuffer0">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOBufferInfo.pBuffer1">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOBufferInfo.Buffer(System.Int32)">
            <summary>
            Buffers the specified buffer index.
            </summary>
            <param name="bufferIndex">Index of the buffer.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.Utils.MergeSort">
            <summary>
            The merge sort
            </summary>
        </member>
        <member name="M:NAudio.Utils.MergeSort.Sort``1(System.Collections.Generic.IList{``0})">
            <summary>
            MergeSort a list of comparable items
            </summary>
            <typeparam name="T">An IComparable&lt;T&gt; object.</typeparam>
            <param name="list">The list of &lt;T&gt;.</param>
        </member>
        <member name="M:NAudio.Utils.MergeSort.Sort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            MergeSort a list
            </summary>
            <typeparam name="T">An IComparable&lt;T&gt; object.</typeparam>
            <param name="list">The list of &lt;T&gt;.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NAudio.Utils.MergeSort.Sort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            In-place and stable implementation of MergeSort
            </summary>
            <typeparam name="T">An IComparable&lt;T&gt; object.</typeparam>
            <param name="list">The list of &lt;T&gt;.</param>
            <param name="lowIndex">Index of the low.</param>
            <param name="highIndex">Index of the high.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="T:NAudio.Utils.HChangeNotifyFlags">
            <summary>
            Flags that indicate the meaning of the <i>dwItem1</i> and <i>dwItem2</i> parameters.
            The uFlags parameter must be one of the following values.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_DWORD">
            <summary>
            The <i>dwItem1</i> and <i>dwItem2</i> parameters are DWORD values.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST">
            <summary>
            <i>dwItem1</i> and <i>dwItem2</i> are the addresses of ITEMIDLIST structures that
            represent the item(s) affected by the change.
            Each ITEMIDLIST must be relative to the desktop folder.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA">
            <summary>
            <i>dwItem1</i> and <i>dwItem2</i> are the addresses of null-terminated strings of
            maximum length MAX_PATH that contain the full path names
            of the items affected by the change.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHW">
            <summary>
            <i>dwItem1</i> and <i>dwItem2</i> are the addresses of null-terminated strings of
            maximum length MAX_PATH that contain the full path names
            of the items affected by the change.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PRINTERA">
            <summary>
            <i>dwItem1</i> and <i>dwItem2</i> are the addresses of null-terminated strings that
            represent the friendly names of the printer(s) affected by the change.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PRINTERW">
            <summary>
            <i>dwItem1</i> and <i>dwItem2</i> are the addresses of null-terminated strings that
            represent the friendly names of the printer(s) affected by the change.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_FLUSH">
            <summary>
            The function should not return until the notification
            has been delivered to all affected components.
            As this flag modifies other data-type flags, it cannot by used by itself.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_FLUSHNOWAIT">
            <summary>
            The function should begin delivering notifications to all affected components
            but should return as soon as the notification process has begun.
            As this flag modifies other data-type flags, it cannot by used by itself.
            </summary>
        </member>
        <member name="T:NAudio.Mixer.ListTextMixerControl">
            <summary>
            List text mixer control
            </summary>
        </member>
        <member name="M:NAudio.Mixer.ListTextMixerControl.#ctor(NAudio.Mixer.MixerInterop.MIXERCONTROL,System.IntPtr,NAudio.Mixer.MixerFlags,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Mixer.ListTextMixerControl"/> class.
            </summary>
            <param name="mixerControl">The mixer control.</param>
            <param name="mixerHandle">The mixer handle.</param>
            <param name="mixerHandleType">Type of the mixer handle.</param>
            <param name="nChannels">The n channels.</param>
        </member>
        <member name="M:NAudio.Mixer.ListTextMixerControl.GetDetails(System.IntPtr)">
            <summary>
            Get the details for this control
            </summary>
            <param name="pDetails">Memory location to read to</param>
        </member>
        <member name="T:NAudio.Midi.SmpteOffsetEvent">
            <summary>
            The smpte offset event
            </summary>
        </member>
        <member name="F:NAudio.Midi.SmpteOffsetEvent.hours">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.SmpteOffsetEvent.minutes">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.SmpteOffsetEvent.seconds">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.SmpteOffsetEvent.frames">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.SmpteOffsetEvent.subFrames">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.SmpteOffsetEvent.#ctor(System.IO.BinaryReader,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.SmpteOffsetEvent"/> class. 
            Reads a new time signature event from a MIDI stream
            </summary>
            <param name="br">
            The MIDI stream
            </param>
            <param name="length">
            The data length
            </param>
        </member>
        <member name="M:NAudio.Midi.SmpteOffsetEvent.ToString">
            <summary>
            Describes this time signature event
            </summary>
            <returns>A string describing this event</returns>
        </member>
        <member name="M:NAudio.Midi.SmpteOffsetEvent.Export(System.Int64@,System.IO.BinaryWriter)">
            <summary>
            Calls base class export first, then exports the data
            specific to this event
            <seealso cref="M:NAudio.Midi.MidiEvent.Export(System.Int64@,System.IO.BinaryWriter)">MidiEvent.Export</seealso>
            </summary>
            <param name="absoluteTime">Absolute time used to calculate delta.
            Is updated ready for the next delta calculation</param>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="P:NAudio.Midi.SmpteOffsetEvent.Hours">
            <summary>
            Gets The Hours
            </summary>
        </member>
        <member name="P:NAudio.Midi.SmpteOffsetEvent.Minutes">
            <summary>
            Gets The Minutes
            </summary>
        </member>
        <member name="P:NAudio.Midi.SmpteOffsetEvent.Seconds">
            <summary>
            Gets The Seconds
            </summary>
        </member>
        <member name="P:NAudio.Midi.SmpteOffsetEvent.Frames">
            <summary>
            Gets The Frames
            </summary>
        </member>
        <member name="P:NAudio.Midi.SmpteOffsetEvent.SubFrames">
            <summary>
            Gets The SubFrames
            </summary>
        </member>
        <member name="T:NAudio.Gui.TrackView.TrackHeader">
            <summary>
            A track header control
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TrackHeader.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackHeader.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackHeader.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TrackHeader.track">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.TrackView.TrackHeader"/> class. 
            Creates a new track header control
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackHeader.Initialize(NAudio.Gui.TrackView.Track)">
            <summary>
            Associate the control with a track
            </summary>
            <param name="track">The track.</param>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackHeader.volumeSlider1_VolumeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the VolumeChanged event of the volumeSlider1 control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackHeader.panSlider1_PanChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the PanChanged event of the panSlider1 control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:NAudio.Gui.Arranger">
            <summary>
            The Arranger control
            </summary>
        </member>
        <member name="F:NAudio.Gui.Arranger.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NAudio.Gui.Arranger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.Arranger"/> class. 
            Creates a new arranger control
            </summary>
        </member>
        <member name="M:NAudio.Gui.Arranger.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Gui.Arranger.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NAudio.Dsp.BiQuadFilter">
            <summary>
            The bi quad filter
            </summary>
            <remarks>
            <para>based on Cookbook formulae for audio EQ biquad filter coefficients
            http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt
            by Robert Bristow-Johnson  (rbj@audioimagination.com)</para>
            <code>
            alpha = sin(w0)/(2*Q)                                       (case: Q)
                  = sin(w0)*sinh( ln(2)/2 * BW * w0/sin(w0) )           (case: BW)
                  = sin(w0)/2 * sqrt( (A + 1/A)*(1/S - 1) + 2 )         (case: S)
            Q: (the EE kind of definition, except for peakingEQ in which A*Q is
            the classic EE Q.  That adjustment in definition was made so that
            a boost of N dB followed by a cut of N dB for identical Q and
            f0/Fs results in a precisely flat unity gain filter or "wire".)
            </code>
            <para>BW: the bandwidth in octaves (between -3 dB frequencies for BPF
            and notch or between midpoint (dBgain/2) gain frequencies for
            peaking EQ)</para>
            <para>S: a "shelf slope" parameter (for shelving EQ only).  When S = 1,
            the shelf slope is as steep as it can be and remain monotonically
            increasing or decreasing gain with frequency.  The shelf slope, in
            dB/octave, remains proportional to S for all other values for a
            fixed f0/Fs and dBgain.</para>
            </remarks>
        </member>
        <member name="F:NAudio.Dsp.BiQuadFilter.a0">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dsp.BiQuadFilter.a1">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dsp.BiQuadFilter.a2">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dsp.BiQuadFilter.b0">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dsp.BiQuadFilter.b1">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dsp.BiQuadFilter.b2">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Dsp.BiQuadFilter.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NAudio.Dsp.BiQuadFilter"/> class from being created. 
            Initializes a new instance of the <see cref="T:NAudio.Dsp.BiQuadFilter"/> class.
            </summary>
        </member>
        <member name="M:NAudio.Dsp.BiQuadFilter.LowPassFilter(System.Single,System.Single,System.Single)">
            <summary>
            Creates a Low Pass filter that is based on the formula: H(s) = 1 / (s^2 + s/Q + 1)
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="cutoffFrequency">The cutoff frequency.</param>
            <param name="q">The quotient.</param>
            <returns>A BiQuadFilter.</returns>
        </member>
        <member name="M:NAudio.Dsp.BiQuadFilter.HighPassFilter(System.Single,System.Single,System.Single)">
            <summary>
            Creates a High Pass filter that is based on the formula: H(s) = s^2 / (s^2 + s/Q + 1)
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="cutoffFrequency">The cutoff frequency.</param>
            <param name="q">The quotient.</param>
            <returns>A BiQuadFilter</returns>
        </member>
        <member name="M:NAudio.Dsp.BiQuadFilter.BandPassFilterConstantSkirtGain(System.Single,System.Single,System.Single)">
            <summary>
            H(s) = s / (s^2 + s/Q + 1)  (constant skirt gain, peak gain = Q)
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="centreFrequency">The centre frequency.</param>
            <param name="q">The quotient.</param>
            <returns>A BiQuadFilter</returns>
        </member>
        <member name="M:NAudio.Dsp.BiQuadFilter.BandPassFilterConstantPeakGain(System.Single,System.Single,System.Single)">
            <summary>
            H(s) = (s/Q) / (s^2 + s/Q + 1)      (constant 0 dB peak gain)
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="centreFrequency">The centre frequency.</param>
            <param name="q">The quotient.</param>
            <returns>A BiQuadFilter</returns>
        </member>
        <member name="M:NAudio.Dsp.BiQuadFilter.NotchFilter(System.Single,System.Single,System.Single)">
            <summary>
            Creates a Notch filter based on the formula: H(s) = (s^2 + 1) / (s^2 + s/Q + 1)
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="centreFrequency">The centre frequency.</param>
            <param name="q">The quotient.</param>
            <returns>A BiQuadFilter</returns>
        </member>
        <member name="M:NAudio.Dsp.BiQuadFilter.AllPassFilter(System.Single,System.Single,System.Single)">
            <summary>
            Creates an All Pass filter based on the formula: H(s) = (s^2 - s/Q + 1) / (s^2 + s/Q + 1)
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="centreFrequency">The centre frequency.</param>
            <param name="q">The quotient.</param>
            <returns>A BiQuadFilter</returns>
        </member>
        <member name="M:NAudio.Dsp.BiQuadFilter.PeakingEqualizer(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Peaking Equality filter based on the formula: H(s) = (s^2 + s*(A/Q) + 1) / (s^2 + s/(A*Q) + 1)
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="centreFrequency">The centre frequency.</param>
            <param name="q">The quotient.</param>
            <param name="dbGain">The db gain.</param>
            <returns>A BiQuadFilter</returns>
        </member>
        <member name="M:NAudio.Dsp.BiQuadFilter.LowShelf(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            H(s) = A * (s^2 + (sqrt(A)/Q)*s + A)/(A*s^2 + (sqrt(A)/Q)*s + 1)
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="cutoffFrequency">The cutoff frequency.</param>
            <param name="shelfSlope">a "shelf slope" parameter (for shelving EQ only).
            When S = 1, the shelf slope is as steep as it can be and remain monotonically
            increasing or decreasing gain with frequency.  The shelf slope, in dB/octave,
            remains proportional to S for all other values for a fixed f0/Fs and dBgain.</param>
            <param name="dbGain">Gain in decibels</param>
            <returns>A BiQuadFilter</returns>
        </member>
        <member name="M:NAudio.Dsp.BiQuadFilter.HighShelf(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            H(s) = A * (A*s^2 + (sqrt(A)/Q)*s + 1)/(s^2 + (sqrt(A)/Q)*s + A)
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="cutoffFrequency">The cutoff frequency.</param>
            <param name="shelfSlope">The shelf slope.</param>
            <param name="dbGain">The db gain.</param>
            <returns>A BiQuadFilter</returns>
        </member>
        <member name="M:NAudio.Dsp.BiQuadFilter.Transform(System.Single[],System.Single[])">
            <summary>
            Transforms the specified in buffer.
            </summary>
            <param name="inBuffer">The in buffer.</param>
            <param name="outBuffer">The out buffer.</param>
        </member>
        <member name="T:NAudio.Dmo.DmoSetTypeFlags">
            <summary>
            The DMO Set Type Flags
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoSetTypeFlags.None">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoSetTypeFlags.DMO_SET_TYPEF_TEST_ONLY">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoSetTypeFlags.DMO_SET_TYPEF_CLEAR">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveChannel32">
            <summary>
            Represents Channel for the WaveMixerStream
            32 bit output and 16 bit input
            It's output is always stereo
            The input stream can be panned
            </summary>
        </member>
        <member name="T:NAudio.Wave.ISampleNotifier">
            <summary>
            An interface for WaveStreams which can report notification of individual samples
            </summary>
        </member>
        <member name="E:NAudio.Wave.ISampleNotifier.Block">
            <summary>
            About to start processing a block of samples
            </summary>
        </member>
        <member name="E:NAudio.Wave.ISampleNotifier.Sample">
            <summary>
            A sample has been detected
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveChannel32.waveFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveChannel32.length">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveChannel32.destBytesPerSample">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveChannel32.sourceBytesPerSample">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveChannel32.sourceStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveChannel32.volume">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveChannel32.pan">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveChannel32.position">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveChannel32.requiredBytesBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveChannel32.sampleEventArgs">
            <summary>
            reuse the same object every time to avoid making lots of work for the garbage collector
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveChannel32.#ctor(NAudio.Wave.WaveStream,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveChannel32"/> class. 
            Creates a new WaveChannel32
            </summary>
            <param name="sourceStream">
            the source stream
            </param>
            <param name="volume">
            stream volume (1 is 0dB)
            </param>
            <param name="pan">
            pan control (-1 to 1)
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveChannel32.#ctor(NAudio.Wave.WaveStream)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveChannel32"/> class. 
            Creates a WaveChannel32 with default settings
            </summary>
            <param name="sourceStream">
            The source stream
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveChannel32.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from this wave stream
            </summary>
            <param name="destBuffer">The destination buffer</param>
            <param name="offset">Offset into the destination buffer</param>
            <param name="numBytes">Number of bytes read</param>
            <returns>Number of bytes read.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveChannel32.HasData(System.Int32)">
            <summary>
            Determines whether this channel has any data to play
            to allow optimisation to not read, but bump position forward
            </summary>
            <param name="count">Number of bytes to read</param>
            <returns>Indicates if this instance has data.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveChannel32.Dispose(System.Boolean)">
            <summary>
            Disposes this WaveStream
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Wave.WaveChannel32.GetSourceBuffer(System.Int32)">
            <summary>
            Helper function to avoid creating a new buffer every read
            </summary>
            <param name="bytesRequired">The bytes required.</param>
            <returns>The source buffer.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveChannel32.MonoToStereo(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Converts Mono to stereo, adjusting volume and pan
            </summary>
            <param name="destBuffer">The dest buffer.</param>
            <param name="offset">The offset.</param>
            <param name="sourceBuffer">The source buffer.</param>
            <param name="bytesRead">The bytes read.</param>
        </member>
        <member name="M:NAudio.Wave.WaveChannel32.AdjustVolume(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Converts stereo to stereo
            </summary>
            <param name="destBuffer">The dest buffer.</param>
            <param name="offset">The offset.</param>
            <param name="sourceBuffer">The source buffer.</param>
            <param name="bytesRead">The bytes read.</param>
        </member>
        <member name="M:NAudio.Wave.WaveChannel32.RaiseBlock">
            <summary>
            Raises the block.
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveChannel32.RaiseSample(System.Single,System.Single)">
            <summary>
            Raise the sample event (no check for null because it has already been done)
            </summary>
            <param name="left">The left sample.</param>
            <param name="right">The right sample.</param>
        </member>
        <member name="E:NAudio.Wave.WaveChannel32.Block">
            <summary>
            The Block event.
            </summary>
        </member>
        <member name="E:NAudio.Wave.WaveChannel32.Sample">
            <summary>
            The Sample
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveChannel32.BlockAlign">
            <summary>
            Gets the block alignment for this WaveStream
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveChannel32.Length">
            <summary>
            Returns the stream length
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveChannel32.Position">
            <summary>
            Gets or sets the current position in the stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveChannel32.PadWithZeroes">
            <summary>
            Gets or sets a value indicating whether If true, Read always returns the number of bytes requested
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveChannel32.WaveFormat">
            <summary>
            Retrieves the WaveFormat for this stream
            </summary>
            <value></value>
        </member>
        <member name="P:NAudio.Wave.WaveChannel32.Volume">
            <summary>
            Gets or sets Volume of this channel. 1.0 = full scale
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveChannel32.Pan">
            <summary>
            Gets or sets Pan of this channel (from -1 to 1)
            </summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmStreamOpenFlags">
            <summary>
            The ACM Stream Open Flags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamOpenFlags.Query">
            <summary>
            ACM_STREAMOPENF_QUERY, ACM will be queried to determine whether it supports the given conversion. A conversion stream will not be opened, and no handle will be returned in the phas parameter. 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamOpenFlags.Async">
            <summary>
            ACM_STREAMOPENF_ASYNC, Stream conversion should be performed asynchronously. If this flag is specified, the application can use a callback function to be notified when the conversion stream is opened and closed and after each buffer is converted. In addition to using a callback function, an application can examine the fdwStatus member of the ACMSTREAMHEADER structure for the ACMSTREAMHEADER_STATUSF_DONE flag. 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamOpenFlags.NonRealTime">
            <summary>
            ACM_STREAMOPENF_NONREALTIME, ACM will not consider time constraints when converting the data. By default, the driver will attempt to convert the data in real time. For some formats, specifying this flag might improve the audio quality or other characteristics.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamOpenFlags.CallbackTypeMask">
            <summary>
            CALLBACK_TYPEMASK, callback type mask
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamOpenFlags.CallbackNull">
            <summary>
            CALLBACK_NULL, no callback
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamOpenFlags.CallbackWindow">
            <summary>
            CALLBACK_WINDOW, dwCallback is a HWND
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamOpenFlags.CallbackTask">
            <summary>
            CALLBACK_TASK, dwCallback is a HTASK
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamOpenFlags.CallbackFunction">
            <summary>
            CALLBACK_FUNCTION, dwCallback is a FARPROC
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamOpenFlags.CallbackThread">
            <summary>
            CALLBACK_THREAD, thread ID replaces 16 bit task
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamOpenFlags.CallbackEvent">
            <summary>
            CALLBACK_EVENT, dwCallback is an EVENT Handle
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.MultimediaDevice">
            <summary>
            A Multimedia Device
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.MultimediaDevice.device">
            <summary>
            The COM Multimedia Device.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.MultimediaDevice.audioMeterInformationInterfaceId">
            <summary>
            The interface ID for IAudioMeterInformation.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.MultimediaDevice.audioEndpointVolumeInterfaceId">
            <summary>
            The interface ID for IAudioEndpointVolumeInterface.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.MultimediaDevice.audioClientInterfaceId">
            <summary>
            The interface ID for IAudioClientInterface.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.MultimediaDevice.propertyStore">
            <summary>
            The property store.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.MultimediaDevice.audioMeterInformation">
            <summary>
            The audio meter information.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.MultimediaDevice.audioEndpointVolume">
            <summary>
            The audio endpoint volume.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.MultimediaDevice.audioClient">
            <summary>
            The audio client.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.MultimediaDevice.#ctor(NAudio.CoreAudioApi.Interfaces.IComMultimediaDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.MultimediaDevice"/> class.
            </summary>
            <param name="realDevice">The real device.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.MultimediaDevice.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.MultimediaDevice.GetPropertyInformation">
            <summary>
            Gets the property information.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.MultimediaDevice.GetAudioClientInterface">
            <summary>
            Gets the audio client interface.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.MultimediaDevice.GetAudioMeterInformation">
            <summary>
            Gets the audio meter information.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.MultimediaDevice.GetAudioEndpointVolume">
            <summary>
            Gets the audio endpoint volume.
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MultimediaDevice.AudioClient">
            <summary>
            Gets Audio Client
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MultimediaDevice.AudioMeterInformation">
            <summary>
            Gets Audio Meter Information
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MultimediaDevice.AudioEndpointVolume">
            <summary>
            Gets Audio Endpoint Volume
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MultimediaDevice.Properties">
            <summary>
            Gets The Properties
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MultimediaDevice.FriendlyName">
            <summary>
            Gets Friendly name
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MultimediaDevice.Id">
            <summary>
            Gets the Device ID
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MultimediaDevice.DataFlow">
            <summary>
            Gets the Data Flow
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MultimediaDevice.State">
            <summary>
            Gets Device State
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioEndpointVolume">
            <summary>
            Audio Endpoint Volume
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioEndpointVolume._AudioEndPointVolume">
            <summary>
            The audio endpoint volume
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioEndpointVolume._CallBack">
            <summary>
            The volume callback.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolume.#ctor(NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.AudioEndpointVolume"/> class. 
            Creates a new Audio endpoint volume
            </summary>
            <param name="realEndpointVolume">
            IAudioEndpointVolume COM interface
            </param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolume.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NAudio.CoreAudioApi.AudioEndpointVolume"/> class.  Releases unmanaged resources and performs other cleanup operations before the <see cref="T:NAudio.CoreAudioApi.AudioEndpointVolume"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolume.VolumeStepUp">
            <summary>
            Volume Step Up
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolume.VolumeStepDown">
            <summary>
            Volume Step Down
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolume.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolume.OnNotification(NAudio.CoreAudioApi.AudioVolumeNotificationData)">
            <summary>
            Fires the notification.
            </summary>
            <param name="notificationData">The notification data.</param>
        </member>
        <member name="E:NAudio.CoreAudioApi.AudioEndpointVolume.OnVolumeNotification">
            <summary>
            On Volume Notification
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.VolumeRange">
            <summary>
            Gets Volume Range
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.HardwareSupport">
            <summary>
            Gets Hardware Support
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.StepInformation">
            <summary>
            Gets Step Information
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.Channels">
            <summary>
            Gets The Channels
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.MasterVolumeLevel">
            <summary>
            Gets or sets Master Volume Level
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.MasterVolumeLevelScalar">
            <summary>
            Gets or sets Master Volume Level Scalar
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolume.Mute">
            <summary>
            Gets or sets a value indicating whether the Mute state of this endpoint is toggled or not.
            </summary>
        </member>
        <member name="T:NAudio.Gui.PanSlider">
            <summary>
            Pan slider control
            </summary>
        </member>
        <member name="F:NAudio.Gui.PanSlider.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:NAudio.Gui.PanSlider.pan">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.PanSlider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.PanSlider"/> class. 
            Creates a new PanSlider control
            </summary>
        </member>
        <member name="M:NAudio.Gui.PanSlider.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Gui.PanSlider.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="pe">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NAudio.Gui.PanSlider.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.PanSlider.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.PanSlider.SetPanFromMouse(System.Int32)">
            <summary>
            Sets the pan from mouse.
            </summary>
            <param name="x">The x position.</param>
        </member>
        <member name="M:NAudio.Gui.PanSlider.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:NAudio.Gui.PanSlider.PanChanged">
            <summary>
            True when pan value changed
            </summary>
        </member>
        <member name="P:NAudio.Gui.PanSlider.Pan">
            <summary>
            Gets or sets The current Pan setting
            </summary>
        </member>
        <member name="T:NAudio.Gui.Graph">
            <summary>
            Graph control
            </summary>
        </member>
        <member name="F:NAudio.Gui.Graph.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:NAudio.Gui.Graph.x">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.Graph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.Graph"/> class. 
            Creates a new graph control
            </summary>
        </member>
        <member name="M:NAudio.Gui.Graph.SetData(System.Double[])">
            <summary>
            sets graph data
            </summary>
            <param name="x">The initial data array.</param>
        </member>
        <member name="M:NAudio.Gui.Graph.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Gui.Graph.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="pe">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NAudio.Gui.Graph.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NAudio.Dsp.SimpleCompressor">
            <summary>
            The simple compressor
            </summary>
        </member>
        <member name="T:NAudio.Dsp.AttRelEnvelope">
            <summary>
            The att rel envelope
            </summary>
        </member>
        <member name="F:NAudio.Dsp.AttRelEnvelope.DC_OFFSET">
            <summary>
            DC offset to prevent denormal
            </summary>
        </member>
        <member name="F:NAudio.Dsp.AttRelEnvelope.attack">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dsp.AttRelEnvelope.release">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Dsp.AttRelEnvelope.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Dsp.AttRelEnvelope"/> class.
            </summary>
            <param name="att_ms">The att_ms.</param>
            <param name="rel_ms">The rel_ms.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="M:NAudio.Dsp.AttRelEnvelope.Run(System.Double,System.Double@)">
            <summary>
            Runs the specified in value.
            </summary>
            <param name="inValue">The in value.</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:NAudio.Dsp.AttRelEnvelope.Attack">
            <summary>
            Gets or sets the attack.
            </summary>
            <value>The attack.</value>
        </member>
        <member name="P:NAudio.Dsp.AttRelEnvelope.Release">
            <summary>
            Gets or sets the release.
            </summary>
            <value>The release.</value>
        </member>
        <member name="P:NAudio.Dsp.AttRelEnvelope.SampleRate">
            <summary>
            Gets or sets the sample rate.
            </summary>
            <value>The sample rate.</value>
        </member>
        <member name="F:NAudio.Dsp.SimpleCompressor.envdB">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Dsp.SimpleCompressor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Dsp.SimpleCompressor"/> class.
            </summary>
            <param name="attackTime">The attack time.</param>
            <param name="releaseTime">The release time.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="M:NAudio.Dsp.SimpleCompressor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Dsp.SimpleCompressor"/> class.
            </summary>
        </member>
        <member name="M:NAudio.Dsp.SimpleCompressor.InitRuntime">
            <summary>
            Inits the runtime.  call before runtime (in resume())
            </summary>
        </member>
        <member name="M:NAudio.Dsp.SimpleCompressor.Process(System.Double@,System.Double@)">
            <summary>
            Processes the specified in1.compressor runtime process
            </summary>
            <param name="in1">The in1 value.</param>
            <param name="in2">The in2 value.</param>
        </member>
        <member name="P:NAudio.Dsp.SimpleCompressor.MakeUpGain">
            <summary>
            Gets or sets the make up gain.
            </summary>
            <value>The make up gain.</value>
        </member>
        <member name="P:NAudio.Dsp.SimpleCompressor.Threshold">
            <summary>
            Gets or sets the threshold.
            </summary>
            <value>The threshold.</value>
        </member>
        <member name="P:NAudio.Dsp.SimpleCompressor.Ratio">
            <summary>
            Gets or sets the ratio.
            </summary>
            <value>The ratio.</value>
        </member>
        <member name="T:NAudio.Dmo.DmoEnumerator">
            <summary>
            DirectX Media Object Enumerator
            </summary>
        </member>
        <member name="M:NAudio.Dmo.DmoEnumerator.GetAudioEffectNames">
            <summary>
            Get audio effect names
            </summary>
            <returns>Audio effect names</returns>
        </member>
        <member name="M:NAudio.Dmo.DmoEnumerator.GetAudioEncoderNames">
            <summary>
            Get audio encoder names
            </summary>
            <returns>Audio encoder names</returns>
        </member>
        <member name="M:NAudio.Dmo.DmoEnumerator.GetAudioDecoderNames">
            <summary>
            Get audio decoder names
            </summary>
            <returns>Audio decoder names</returns>
        </member>
        <member name="M:NAudio.Dmo.DmoEnumerator.GetDmos(System.Guid)">
            <summary>
            Gets the dmos.
            </summary>
            <param name="category">The category.</param>
            <returns>An Enumerable of DMO Descriptors.</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.MultimediaDeviceCollection">
            <summary>
            Multimedia Device Collection
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.MultimediaDeviceCollection.comMultimediaDeviceCollection">
            <summary>
            The COM Multimedia Device Collection.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.MultimediaDeviceCollection.#ctor(NAudio.CoreAudioApi.Interfaces.IComMultimediaDeviceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.MultimediaDeviceCollection"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.MultimediaDeviceCollection.GetEnumerator">
            <summary>
            Get Enumerator
            </summary>
            <returns>Device enumerator</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.MultimediaDeviceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:NAudio.CoreAudioApi.MultimediaDeviceCollection.Count">
            <summary>
            Gets Device count
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.MultimediaDeviceCollection.Item(System.Int32)">
            <summary>
            Get device by index
            </summary>
            <param name="index">Device index</param>
            <returns>Device at the specified index</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioClientShareMode">
            <summary>
            Originally known as AUDCLNT_SHAREMODE
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientShareMode.Shared">
            <summary>
            Originally known as AUDCLNT_SHAREMODE_SHARED,
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientShareMode.Exclusive">
            <summary>
            Originally known as AUDCLNT_SHAREMODE_EXCLUSIVE
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveOutFunction">
            <summary>
            The Wave Out Function.
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutFunction.Init">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutFunction.Stop">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutFunction.BufferDone">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutFunction.Pause">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutFunction.Play">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutFunction.Resume">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutFunction.SetVolume">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutFunction.Exit">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveOutSupport">
            <summary>
            Flags indicating what features this WaveOut device supports
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutSupport.Pitch">
            <summary>supports pitch control (WAVECAPS_PITCH)</summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutSupport.PlaybackRate">
            <summary>supports playback rate control (WAVECAPS_PLAYBACKRATE)</summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutSupport.Volume">
            <summary>supports volume control (WAVECAPS_VOLUME)</summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutSupport.LRVolume">
            <summary>supports separate left-right volume control (WAVECAPS_LRVOLUME)</summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutSupport.Sync">
            <summary>Originally known as (WAVECAPS_SYNC)</summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutSupport.SampleAccurate">
            <summary>Originally known as (WAVECAPS_SAMPLEACCURATE)</summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmInterop">
            <summary>
            Interop definitions for Windows ACM (Audio Compression Manager) API
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmInterop.acmFormatSuggest(System.IntPtr,NAudio.Wave.WaveFormat,NAudio.Wave.WaveFormat,System.Int32,NAudio.Wave.Compression.AcmFormatSuggestFlags)">
            <summary>
            http://msdn.microsoft.com/en-us/library/dd742916%28VS.85%29.aspx
            MMRESULT acmFormatSuggest(
            HACMDRIVER had,
            LPWAVEFORMATEX pwfxSrc,
            LPWAVEFORMATEX pwfxDst,
            DWORD cbwfxDst,
            DWORD fdwSuggest);
            </summary>
            <param name="hAcmDriver">The h acm driver.</param>
            <param name="sourceFormat">The source format.</param>
            <param name="destFormat">The dest format.</param>
            <param name="sizeDestFormat">The size dest format.</param>
            <param name="suggestFlags">The suggest flags.</param>
            <returns>The result of the call.</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmInterop.acmFormatSuggest2(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,NAudio.Wave.Compression.AcmFormatSuggestFlags)">
            <summary>
            Acms the format suggest2.
            </summary>
            <param name="hAcmDriver">The h acm driver.</param>
            <param name="sourceFormatPointer">The source format pointer.</param>
            <param name="destFormatPointer">The dest format pointer.</param>
            <param name="sizeDestFormat">The size dest format.</param>
            <param name="suggestFlags">The suggest flags.</param>
            <returns>The result of the call.</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmInterop.acmStreamOpen(System.IntPtr@,System.IntPtr,NAudio.Wave.WaveFormat,NAudio.Wave.WaveFormat,NAudio.Wave.Compression.WaveFilter,System.IntPtr,System.IntPtr,NAudio.Wave.Compression.AcmStreamOpenFlags)">
            <summary>
            http://msdn.microsoft.com/en-us/library/dd742928%28VS.85%29.aspx
            MMRESULT acmStreamOpen(
            LPHACMSTREAM    phas,
            HACMDRIVER      had,
            LPWAVEFORMATEX  pwfxSrc,
            LPWAVEFORMATEX  pwfxDst,
            LPWAVEFILTER    pwfltr,
            DWORD_PTR       dwCallback,
            DWORD_PTR       dwInstance,
            DWORD           fdwOpen
            </summary>
            <param name="hAcmStream">The h acm stream.</param>
            <param name="hAcmDriver">The h acm driver.</param>
            <param name="sourceFormat">The source format.</param>
            <param name="destFormat">The dest format.</param>
            <param name="waveFilter">The wave filter.</param>
            <param name="callback">The callback.</param>
            <param name="instance">The instance.</param>
            <param name="openFlags">The open flags.</param>
            <returns>The result of the call.</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmInterop.acmStreamOpen2(System.IntPtr@,System.IntPtr,System.IntPtr,System.IntPtr,NAudio.Wave.Compression.WaveFilter,System.IntPtr,System.IntPtr,NAudio.Wave.Compression.AcmStreamOpenFlags)">
            <summary>
            A version with pointers for troubleshooting
            </summary>
            <param name="hAcmStream">The h acm stream.</param>
            <param name="hAcmDriver">The h acm driver.</param>
            <param name="sourceFormatPointer">The source format pointer.</param>
            <param name="destFormatPointer">The dest format pointer.</param>
            <param name="waveFilter">The wave filter.</param>
            <param name="callback">The callback.</param>
            <param name="instance">The instance.</param>
            <param name="openFlags">The open flags.</param>
            <returns>The result of the call.</returns>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmInterop.AcmDriverEnumCallback">
            <summary>
            The ACM Driver Enum callback
            </summary>
            <param name="hAcmDriverId">The driver id pointer</param>
            <param name="instance">The instance pointer</param>
            <param name="flags">The support flags.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd742891%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmInterop.AcmFormatEnumCallback">
            <summary>
            The ACM Format Enum Callback
            </summary>
            <param name="hAcmDriverId">The driver id pointer</param>
            <param name="formatDetails">The format details.</param>
            <param name="dwInstance">The instance pointer.</param>
            <param name="flags">The support flags.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmInterop.AcmFormatTagEnumCallback">
            <summary>
            The ACM Format Tag Enum Callback.
            </summary>
            <param name="hAcmDriverId">The driver id.</param>
            <param name="formatTagDetails">The format tag details.</param>
            <param name="dwInstance">The instance pointer.</param>
            <param name="flags">The support flags.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmInterop.AcmFormatChooseHookProc">
            <summary>
            http://msdn.microsoft.com/en-us/library/dd742910%28VS.85%29.aspx
            UINT ACMFORMATCHOOSEHOOKPROC acmFormatChooseHookProc(
              HWND hwnd,     
              UINT uMsg,     
              WPARAM wParam, 
              LPARAM lParam  
            </summary>
            <param name="windowHandle">The window handle.</param>
            <param name="message">The message to display.</param>
            <param name="wParam">The width parameter.</param>
            <param name="lParam">The length parameter.</param>
            <returns>The result of the call.</returns>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOSampleConvertor">
            <summary>
            This class stores convertors for different interleaved WaveFormat to ASIOSampleType separate channel
            format.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOSampleConvertor.SelectSampleConvertor(NAudio.Wave.WaveFormat,NAudio.Wave.Asio.ASIOSampleType)">
            <summary>
            Selects the sample convertor based on the input WaveFormat and the output ASIOSampleTtype.
            </summary>
            <param name="waveFormat">The wave format.</param>
            <param name="asioType">The ASIOSampleType.</param>
            <returns>The SampleConvertor</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOSampleConvertor.ConvertorShortToInt2Channels(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
            <summary>
            Optimized convertor for 2 channels SHORT
            </summary>
            <param name="inputInterleavedBuffer">The input interleaved buffer.</param>
            <param name="asioOutputBuffers">The asio output buffers.</param>
            <param name="nbChannels">The nb channels.</param>
            <param name="nbSamples">The nb samples.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOSampleConvertor.ConvertorShortToIntGeneric(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
            <summary>
            Generic convertor for SHORT
            </summary>
            <param name="inputInterleavedBuffer">The input interleaved buffer.</param>
            <param name="asioOutputBuffers">The asio output buffers.</param>
            <param name="nbChannels">The nb channels.</param>
            <param name="nbSamples">The nb samples.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOSampleConvertor.ConvertorFloatToInt2Channels(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
            <summary>
            Optimized convertor for 2 channels FLOAT
            </summary>
            <param name="inputInterleavedBuffer">The input interleaved buffer.</param>
            <param name="asioOutputBuffers">The asio output buffers.</param>
            <param name="nbChannels">The nb channels.</param>
            <param name="nbSamples">The nb samples.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOSampleConvertor.ConvertorFloatToIntGeneric(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
            <summary>
            Generic convertor SHORT
            </summary>
            <param name="inputInterleavedBuffer">The input interleaved buffer.</param>
            <param name="asioOutputBuffers">The asio output buffers.</param>
            <param name="nbChannels">The nb channels.</param>
            <param name="nbSamples">The nb samples.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOSampleConvertor.ConvertorShortToShort2Channels(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
            <summary>
            Optimized convertor for 2 channels SHORT
            </summary>
            <param name="inputInterleavedBuffer">The input interleaved buffer.</param>
            <param name="asioOutputBuffers">The asio output buffers.</param>
            <param name="nbChannels">The nb channels.</param>
            <param name="nbSamples">The nb samples.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOSampleConvertor.ConvertorShortToShortGeneric(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
            <summary>
            Generic convertor for SHORT
            </summary>
            <param name="inputInterleavedBuffer">The input interleaved buffer.</param>
            <param name="asioOutputBuffers">The asio output buffers.</param>
            <param name="nbChannels">The nb channels.</param>
            <param name="nbSamples">The nb samples.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOSampleConvertor.ConvertorFloatToShort2Channels(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
            <summary>
            Optimized convertor for 2 channels FLOAT
            </summary>
            <param name="inputInterleavedBuffer">The input interleaved buffer.</param>
            <param name="asioOutputBuffers">The asio output buffers.</param>
            <param name="nbChannels">The nb channels.</param>
            <param name="nbSamples">The nb samples.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOSampleConvertor.ConvertorFloatToShortGeneric(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
            <summary>
            Generic convertor SHORT
            </summary>
            <param name="inputInterleavedBuffer">The input interleaved buffer.</param>
            <param name="asioOutputBuffers">The asio output buffers.</param>
            <param name="nbChannels">The nb channels.</param>
            <param name="nbSamples">The nb samples.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOSampleConvertor.clampToInt(System.Double)">
            <summary>
            Clamps to int.
            </summary>
            <param name="sampleValue">The sample value.</param>
            <returns>The value as an int.</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOSampleConvertor.clampToShort(System.Double)">
            <summary>
            Clamps to short.
            </summary>
            <param name="sampleValue">The sample value.</param>
            <returns>The value as a short.</returns>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOSampleConvertor.SampleConvertor">
            <summary>
            Sample Convertor delegate.
            </summary>
            <param name="inputInterleavedBuffer">The input interleaved buffer.</param>
            <param name="asioOutputBuffers">The asio output buffers.</param>
            <param name="nbChannels">The number of channels.</param>
            <param name="nbSamples">The number of samples.</param>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIO64Bit">
            <summary>
            The ASIO 64-bit class.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIO64Bit.hi">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIO64Bit.lo">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.PropertyStoreProperty">
            <summary>
            Property Store Property
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyStoreProperty.propertyValue">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyStoreProperty.#ctor(NAudio.CoreAudioApi.PropertyKey,NAudio.CoreAudioApi.PropVariant)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.PropertyStoreProperty"/> class.
            </summary>
            <param name="key">The property key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:NAudio.CoreAudioApi.PropertyStoreProperty.Key">
            <summary>
            Gets Property Key
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.PropertyStoreProperty.Value">
            <summary>
            Gets Property Value
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.PropVariant">
            <summary>
            from Propidl.h.
            http://msdn.microsoft.com/en-us/library/aa380072(VS.85).aspx
            contains a union so we have to do an explicit layout
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.valueType">
            <summary>
            Value type tag.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.wReserved1">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.wReserved2">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.wReserved3">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.cVal">
            <summary>
            For use with VT_I1, Version 1
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.bVal">
            <summary>
            For use with VT_UI1
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.iVal">
            <summary>
            For use with VT_I2
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.uiVal">
            <summary>
            For use with VT_UI2
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.lVal">
            <summary>
            For use with VT_I4
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.ulVal">
            <summary>
            For use with VT_UI4
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.intVal">
            <summary>
            For use with VT_INT, Version 1
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.uintVal">
            <summary>
            For use with VT_UINT, Version 1
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.hVal">
            <summary>
            For use with VT_I8
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.uhVal">
            <summary>
            For use with VT_UI8
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.fltVal">
            <summary>
            For use with VT_R4
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.dblVal">
            <summary>
            For use with VT_R8
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.boolVal">
            <summary>
            For use with VT_BOOL
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.scode">
            <summary>
            For use with VT_ERROR
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.date">
            <summary>
            For use with VT_DATE
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.filetime">
            <summary>
            For use with VT_FILETIME
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.puuid">
            <summary>
            For use VT_CLSID
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.blobVal">
            <summary>
            For use with VT_BLOB, VT_BLOBOBJECT
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropVariant.pwszVal">
            <summary>
            For use with VT_LPWSTR
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropVariant.GetBlob">
            <summary>
            Helper method to gets blob data
            </summary>
            <returns>The Blob data.</returns>
        </member>
        <member name="P:NAudio.CoreAudioApi.PropVariant.Value">
            <summary>
            Gets Property value
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioMeterInformation">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioMeterInformation.GetPeakValue(System.Single@)">
            <summary>
            Gets the peak value.
            </summary>
            <param name="pfPeak">The pf peak.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioMeterInformation.GetMeteringChannelCount(System.Int32@)">
            <summary>
            Gets the metering channel count.
            </summary>
            <param name="pnChannelCount">The pn channel count.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioMeterInformation.GetChannelsPeakValues(System.Int32,System.IntPtr)">
            <summary>
            Gets the channels peak values.
            </summary>
            <param name="u32ChannelCount">The u32 channel count.</param>
            <param name="afPeakValues">The af peak values.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioMeterInformation.QueryHardwareSupport(System.Int32@)">
            <summary>
            Queries the hardware support.
            </summary>
            <param name="pdwHardwareSupportMask">The PDW hardware support mask.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.DataFlow">
            <summary>
            The EDataFlow enumeration defines constants that indicate the direction 
            in which audio data flows between an audio endpoint device and an application
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DataFlow.Render">
            <summary>
            Audio rendering stream. 
            Audio data flows from the application to the audio endpoint device, which renders the stream.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DataFlow.Capture">
            <summary>
            Audio capture stream. Audio data flows from the audio endpoint device that captures the stream, 
            to the application
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DataFlow.All">
            <summary>
            Audio rendering or capture stream. Audio data can flow either from the application to the audio 
            endpoint device, or from the audio endpoint device to the application.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.ClsCtx">
            <summary>
            is defined in WTypes.h
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.INPROC_SERVER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.INPROC_HANDLER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.LOCAL_SERVER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.INPROC_SERVER16">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.REMOTE_SERVER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.INPROC_HANDLER16">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.NO_CODE_DOWNLOAD">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.NO_CUSTOM_MARSHAL">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.ENABLE_CODE_DOWNLOAD">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.NO_FAILURE_LOG">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.DISABLE_AAA">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.ENABLE_AAA">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.FROM_DEFAULT_CONTEXT">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.ACTIVATE_32_BIT_SERVER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.ACTIVATE_64_BIT_SERVER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.ENABLE_CLOAKING">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.PS_DLL">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.INPROC">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.SERVER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.ClsCtx.ALL">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.DeviceState">
            <summary>
            Device State
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DeviceState.Active">
            <summary>
            Originally known as DEVICE_STATE_ACTIVE
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DeviceState.Unplugged">
            <summary>
            Originally known as DEVICE_STATE_UNPLUGGED
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DeviceState.NotPresent">
            <summary>
            Originally known as DEVICE_STATE_NOTPRESENT 
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.DeviceState.All">
            <summary>
            Originally known as DEVICE_STATEMASK_ALL
            </summary>
        </member>
        <member name="T:NAudio.Utils.AboutForm">
            <summary>
            A standard about form
            </summary>
        </member>
        <member name="M:NAudio.Utils.AboutForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Utils.AboutForm"/> class.
            </summary>
        </member>
        <member name="M:NAudio.Utils.AboutForm.linkLabelWebsite_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Handles the LinkClicked event of the linkLabelWebsite control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NAudio.Utils.AboutForm.linkLabelFeedback_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Handles the LinkClicked event of the linkLabelFeedback control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NAudio.Utils.AboutForm.buttonOK_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the buttonOK control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:NAudio.Utils.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NAudio.Utils.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NAudio.Utils.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NAudio.Utils.AboutForm.Url">
            <summary>
            Gets or sets The URL of the website to use for help
            e.g. http://www.codeplex.com/naudio
            </summary>
        </member>
        <member name="P:NAudio.Utils.AboutForm.Email">
            <summary>
            Gets or sets The email address for feedback
            e.g. software@wordandspirit.co.uk
            </summary>
        </member>
        <member name="P:NAudio.Utils.AboutForm.Copyright">
            <summary>
            Gets or sets The copyright info
            e.g. Copyright © 2007 Mark Heath
            </summary>
        </member>
        <member name="T:NAudio.Mixer.SignedMixerControl">
            <summary>
            Represents a signed mixer control
            </summary>
        </member>
        <member name="F:NAudio.Mixer.SignedMixerControl.signedDetails">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Mixer.SignedMixerControl.#ctor(NAudio.Mixer.MixerInterop.MIXERCONTROL,System.IntPtr,NAudio.Mixer.MixerFlags,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Mixer.SignedMixerControl"/> class.
            </summary>
            <param name="mixerControl">The mixer control.</param>
            <param name="mixerHandle">The mixer handle.</param>
            <param name="mixerHandleType">Type of the mixer handle.</param>
            <param name="nChannels">The n channels.</param>
        </member>
        <member name="M:NAudio.Mixer.SignedMixerControl.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NAudio.Mixer.SignedMixerControl.GetDetails(System.IntPtr)">
            <summary>
            Gets details for this contrl
            </summary>
            <param name="pDetails">The pointer details.</param>
        </member>
        <member name="P:NAudio.Mixer.SignedMixerControl.Value">
            <summary>
            Gets or sets The value of the control
            </summary>
        </member>
        <member name="P:NAudio.Mixer.SignedMixerControl.MinValue">
            <summary>
            Gets Minimum value for this control
            </summary>
        </member>
        <member name="P:NAudio.Mixer.SignedMixerControl.MaxValue">
            <summary>
            Gets Maximum value for this control
            </summary>
        </member>
        <member name="P:NAudio.Mixer.SignedMixerControl.Percent">
            <summary>
            Gets or sets Value of the control represented as a percentage
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerLineComponentType">
            <summary>
            Mixer Line Component type enumeration
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.DestinationUndefined">
            <summary>
            Audio line is a destination that cannot be defined by one of the standard component types. A mixer device is required to use this component type for line component types that have not been defined by Microsoft Corporation.
            MIXERLINE_COMPONENTTYPE_DST_UNDEFINED
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.DestinationDigital">
            <summary>
            Audio line is a digital destination (for example, digital input to a DAT or CD audio device).
            MIXERLINE_COMPONENTTYPE_DST_DIGITAL 
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.DestinationLine">
            <summary>
            Audio line is a line level destination (for example, line level input from a CD audio device) that will be the final recording source for the analog-to-digital converter (ADC). Because most audio cards for personal computers provide some sort of gain for the recording audio source line, the mixer device will use the MIXERLINE_COMPONENTTYPE_DST_WAVEIN type.
            MIXERLINE_COMPONENTTYPE_DST_LINE
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.DestinationMonitor">
            <summary>
            Audio line is a destination used for a monitor.
            MIXERLINE_COMPONENTTYPE_DST_MONITOR
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.DestinationSpeakers">
            <summary>
            Audio line is an adjustable (gain and/or attenuation) destination intended to drive speakers. This is the typical component type for the audio output of audio cards for personal computers.
            MIXERLINE_COMPONENTTYPE_DST_SPEAKERS
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.DestinationHeadphones">
            <summary>
            Audio line is an adjustable (gain and/or attenuation) destination intended to drive headphones. Most audio cards use the same audio destination line for speakers and headphones, in which case the mixer device simply uses the MIXERLINE_COMPONENTTYPE_DST_SPEAKERS type.
            MIXERLINE_COMPONENTTYPE_DST_HEADPHONES
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.DestinationTelephone">
            <summary>
            Audio line is a destination that will be routed to a telephone line.
            MIXERLINE_COMPONENTTYPE_DST_TELEPHONE
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.DestinationWaveIn">
            <summary>
            Audio line is a destination that will be the final recording source for the waveform-audio input (ADC). This line typically provides some sort of gain or attenuation. This is the typical component type for the recording line of most audio cards for personal computers.
            MIXERLINE_COMPONENTTYPE_DST_WAVEIN
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.DestinationVoiceIn">
            <summary>
            Audio line is a destination that will be the final recording source for voice input. This component type is exactly like MIXERLINE_COMPONENTTYPE_DST_WAVEIN but is intended specifically for settings used during voice recording/recognition. Support for this line is optional for a mixer device. Many mixer devices provide only MIXERLINE_COMPONENTTYPE_DST_WAVEIN.
            MIXERLINE_COMPONENTTYPE_DST_VOICEIN
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.SourceUndefined">
            <summary>
            Audio line is a source that cannot be defined by one of the standard component types. A mixer device is required to use this component type for line component types that have not been defined by Microsoft Corporation.
            MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.SourceDigital">
            <summary>
            Audio line is a digital source (for example, digital output from a DAT or audio CD).
            MIXERLINE_COMPONENTTYPE_SRC_DIGITAL
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.SourceLine">
            <summary>
            Audio line is a line-level source (for example, line-level input from an external stereo) that can be used as an optional recording source. Because most audio cards for personal computers provide some sort of gain for the recording source line, the mixer device will use the MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY type.
            MIXERLINE_COMPONENTTYPE_SRC_LINE
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.SourceMicrophone">
            <summary>
            Audio line is a microphone recording source. Most audio cards for personal computers provide at least two types of recording sources: an auxiliary audio line and microphone input. A microphone audio line typically provides some sort of gain. Audio cards that use a single input for use with a microphone or auxiliary audio line should use the MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE component type.
            MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.SourceSynthesizer">
            <summary>
            Audio line is a source originating from the output of an internal synthesizer. Most audio cards for personal computers provide some sort of MIDI synthesizer (for example, an Adlib®-compatible or OPL/3 FM synthesizer).
            MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.SourceCompactDisc">
            <summary>
            Audio line is a source originating from the output of an internal audio CD. This component type is provided for audio cards that provide an audio source line intended to be connected to an audio CD (or CD-ROM playing an audio CD).
            MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.SourceTelephone">
            <summary>
            Audio line is a source originating from an incoming telephone line.
            MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.SourcePcSpeaker">
            <summary>
            Audio line is a source originating from personal computer speaker. Several audio cards for personal computers provide the ability to mix what would typically be played on the internal speaker with the output of an audio card. Some audio cards support the ability to use this output as a recording source.
            MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.SourceWaveOut">
            <summary>
            Audio line is a source originating from the waveform-audio output digital-to-analog converter (DAC). Most audio cards for personal computers provide this component type as a source to the MIXERLINE_COMPONENTTYPE_DST_SPEAKERS destination. Some cards also allow this source to be routed to the MIXERLINE_COMPONENTTYPE_DST_WAVEIN destination.
            MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.SourceAuxiliary">
            <summary>
            Audio line is a source originating from the auxiliary audio line. This line type is intended as a source with gain or attenuation that can be routed to the MIXERLINE_COMPONENTTYPE_DST_SPEAKERS destination and/or recorded from the MIXERLINE_COMPONENTTYPE_DST_WAVEIN destination.
            MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLineComponentType.SourceAnalog">
            <summary>
            Audio line is an analog source (for example, analog output from a video-cassette tape).
            MIXERLINE_COMPONENTTYPE_SRC_ANALOG
            </summary>
        </member>
        <member name="T:NAudio.Midi.PatchChangeEvent">
            <summary>
            Represents a MIDI patch change event
            </summary>
        </member>
        <member name="F:NAudio.Midi.PatchChangeEvent.patchNames">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.PatchChangeEvent.patch">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.PatchChangeEvent.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.PatchChangeEvent"/> class. 
            Reads a new patch change event from a MIDI stream
            </summary>
            <param name="br">
            Binary reader for the MIDI stream
            </param>
        </member>
        <member name="M:NAudio.Midi.PatchChangeEvent.#ctor(System.Int64,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.PatchChangeEvent"/> class. 
            Creates a new patch change event
            </summary>
            <param name="absoluteTime">
            Time of the event
            </param>
            <param name="channel">
            Channel number
            </param>
            <param name="patchNumber">
            Patch number
            </param>
        </member>
        <member name="M:NAudio.Midi.PatchChangeEvent.GetPatchName(System.Int32)">
            <summary>
            Gets the default MIDI instrument names
            </summary>
            <param name="patchNumber">The patch number.</param>
            <returns>The Patch Name.</returns>
        </member>
        <member name="M:NAudio.Midi.PatchChangeEvent.ToString">
            <summary>
            Describes this patch change event
            </summary>
            <returns>String describing the patch change event</returns>
        </member>
        <member name="M:NAudio.Midi.PatchChangeEvent.Export(System.Int64@,System.IO.BinaryWriter)">
            <summary>
            Calls base class export first, then exports the data
            specific to this event
            <seealso cref="M:NAudio.Midi.MidiEvent.Export(System.Int64@,System.IO.BinaryWriter)">MidiEvent.Export</seealso>
            </summary>
            <param name="absoluteTime">Absolute time used to calculate delta.
            Is updated ready for the next delta calculation</param>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="P:NAudio.Midi.PatchChangeEvent.Patch">
            <summary>
            Gets or sets The Patch Number
            </summary>
        </member>
        <member name="T:NAudio.Midi.KeySignatureEvent">
            <summary>
            Represents a MIDI key signature event event
            </summary>
        </member>
        <member name="F:NAudio.Midi.KeySignatureEvent.sharpsFlats">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.KeySignatureEvent.majorMinor">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.KeySignatureEvent.#ctor(System.IO.BinaryReader,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.KeySignatureEvent"/> class. 
            Reads a new track sequence number event from a MIDI stream
            </summary>
            <param name="br">
            The MIDI stream
            </param>
            <param name="length">
            the data length
            </param>
        </member>
        <member name="M:NAudio.Midi.KeySignatureEvent.#ctor(System.Int32,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.KeySignatureEvent"/> class.
            Creates a new Key signature event with the specified data
            </summary>
            <param name="sharpsFlats">The sharps flats.</param>
            <param name="majorMinor">The major minor.</param>
            <param name="absoluteTime">The absolute time.</param>
        </member>
        <member name="M:NAudio.Midi.KeySignatureEvent.ToString">
            <summary>
            Describes this event
            </summary>
            <returns>String describing the event</returns>
        </member>
        <member name="M:NAudio.Midi.KeySignatureEvent.Export(System.Int64@,System.IO.BinaryWriter)">
            <summary>
            Calls base class export first, then exports the data
            specific to this event
            <seealso cref="M:NAudio.Midi.MidiEvent.Export(System.Int64@,System.IO.BinaryWriter)">MidiEvent.Export</seealso>
            </summary>
            <param name="absoluteTime">Absolute time used to calculate delta.
            Is updated ready for the next delta calculation</param>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="P:NAudio.Midi.KeySignatureEvent.SharpsFlats">
            <summary>
            Gets Number of sharps or flats
            </summary>
        </member>
        <member name="P:NAudio.Midi.KeySignatureEvent.MajorMinor">
            <summary>
            Gets Major or Minor key
            </summary>
        </member>
        <member name="T:NAudio.Midi.ControlChangeEvent">
            <summary>
            Represents a MIDI control change event
            </summary>
        </member>
        <member name="F:NAudio.Midi.ControlChangeEvent.controller">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.ControlChangeEvent.controllerValue">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.ControlChangeEvent.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.ControlChangeEvent"/> class. 
            Reads a control change event from a MIDI stream
            </summary>
            <param name="br">
            Binary reader on the MIDI stream
            </param>
        </member>
        <member name="M:NAudio.Midi.ControlChangeEvent.#ctor(System.Int64,System.Int32,NAudio.Midi.MidiController,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.ControlChangeEvent"/> class. 
            Creates a control change event
            </summary>
            <param name="absoluteTime">
            The absolute Time
            </param>
            <param name="channel">
            MIDI Channel Number
            </param>
            <param name="controller">
            The MIDI Controller
            </param>
            <param name="controllerValue">
            Controller value
            </param>
        </member>
        <member name="M:NAudio.Midi.ControlChangeEvent.ToString">
            <summary>
            Describes this control change event
            </summary>
            <returns>A string describing this event</returns>
        </member>
        <member name="M:NAudio.Midi.ControlChangeEvent.Export(System.Int64@,System.IO.BinaryWriter)">
            <summary>
            Calls base class export first, then exports the data
            specific to this event
            <seealso cref="M:NAudio.Midi.MidiEvent.Export(System.Int64@,System.IO.BinaryWriter)">MidiEvent.Export</seealso>
            </summary>
            <param name="absoluteTime">Absolute time used to calculate delta.
            Is updated ready for the next delta calculation</param>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="P:NAudio.Midi.ControlChangeEvent.Controller">
            <summary>
            Gets or sets The controller number
            </summary>
        </member>
        <member name="P:NAudio.Midi.ControlChangeEvent.ControllerValue">
            <summary>
            Gets or sets The controller value
            </summary>
        </member>
        <member name="T:NAudio.Gui.TrackView.TrackViewClickEventArgs">
            <summary>
            Event for clicking the track view
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TrackViewClickEventArgs.time">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TrackViewClickEventArgs.track">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TrackViewClickEventArgs.clip">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TrackViewClickEventArgs.location">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.TrackViewClickEventArgs.#ctor(System.TimeSpan,NAudio.Gui.TrackView.Track,NAudio.Gui.TrackView.Clip,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.TrackView.TrackViewClickEventArgs"/> class. 
            Creates a new trackview clicked event
            </summary>
            <param name="time">
            Time of the cusor
            </param>
            <param name="track">
            Track clicked on
            </param>
            <param name="clip">
            Any clip under the cursor
            </param>
            <param name="location">
            Mouse location
            </param>
        </member>
        <member name="P:NAudio.Gui.TrackView.TrackViewClickEventArgs.Time">
            <summary>
            Gets Time clicked on
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.TrackViewClickEventArgs.Track">
            <summary>
            Gets Track clicked on
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.TrackViewClickEventArgs.Clip">
            <summary>
            Gets Clip clicked on
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.TrackViewClickEventArgs.Location">
            <summary>
            Gets Mouse location
            </summary>
        </member>
        <member name="T:NAudio.Gui.TrackView.TimeLine">
            <summary>
            The timeline control displays a time-grid
            Features to add:
            - Time vs MBFT
            - markers, marker dragging
            - clicking new time
            - range selection
            - zoom level
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TimeLine.measureTickHeight">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TimeLine.beatTickHeight">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TimeLine.nowTime">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TimeLine.tempo">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TimeLine.pixelsPerSecond">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TimeLine.foregroundPen">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TimeLine.foregroundBrush">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.TimeLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.TrackView.TimeLine"/> class. 
            Creates a new timeline control
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.TimeLine.OnForeColorChanged(System.EventArgs)">
            <summary>
            Forecolor changed event handler
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.TrackView.TimeLine.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint event handler
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.TrackView.TimeLine.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse down event handler
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.TrackView.TimeLine.CreateForegroundPens">
            <summary>
            Creates the foreground pens.
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.TimeLine.TimeToX(System.TimeSpan)">
            <summary>
            Times to X.
            </summary>
            <param name="t">The time span.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Gui.TrackView.TimeLine.XToTime(System.Int32)">
            <summary>
            Xs to time.
            </summary>
            <param name="x">The number of pixels.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="F:NAudio.Gui.TrackView.TimeLine.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.TimeLine.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NAudio.Gui.TrackView.TimeLine.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:NAudio.Gui.TrackView.TimeLine.PositionClicked">
            <summary>
            Position clicked event
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.TimeLine.NowTime">
            <summary>
            Gets or sets The current time
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.TimeLine.PixelsPerSecond">
            <summary>
            Gets or sets Pixels per second.
            Effectively a zoom level
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.ControllerSourceEnum">
            <summary>
            Controller Sources
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.ControllerSourceEnum.NoController">
            <summary>
            No Controller
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.ControllerSourceEnum.NoteOnVelocity">
            <summary>
            Note On Velocity
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.ControllerSourceEnum.NoteOnKeyNumber">
            <summary>
            Note On Key Number
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.ControllerSourceEnum.PolyPressure">
            <summary>
            Poly Pressure
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.ControllerSourceEnum.ChannelPressure">
            <summary>
            Channel Pressure
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.ControllerSourceEnum.PitchWheel">
            <summary>
            Pitch Wheel
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.ControllerSourceEnum.PitchWheelSensitivity">
            <summary>
            Pitch Wheel Sensitivity
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.SourceTypeEnum">
            <summary>
            Source Types
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SourceTypeEnum.Linear">
            <summary>
            Linear option.
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SourceTypeEnum.Concave">
            <summary>
            Concave option.
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SourceTypeEnum.Convex">
            <summary>
            Convex option.
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SourceTypeEnum.Switch">
            <summary>
            Switch option.
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.ModulatorType">
            <summary>
            Modulator Type
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.ModulatorType.polarity">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.ModulatorType.direction">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.ModulatorType.midiContinuousController">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.ModulatorType.controllerSource">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.ModulatorType.sourceType">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.ModulatorType.midiContinuousControllerNumber">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.ModulatorType.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.SoundFont.ModulatorType"/> class.
            </summary>
            <param name="raw">The raw value.</param>
        </member>
        <member name="M:NAudio.SoundFont.ModulatorType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:NAudio.FileFormats.SoundFont.ModulatorBuilder">
            <summary>
            The modulator builder
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.ModulatorBuilder.Read(System.IO.BinaryReader)">
            <summary>
            Reads the specified br.
            </summary>
            <param name="br">The binary reader.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.ModulatorBuilder.Write(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes the specified bw.
            </summary>
            <param name="bw">The binary writer.</param>
            <param name="o">The object.</param>
        </member>
        <member name="P:NAudio.FileFormats.SoundFont.ModulatorBuilder.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:NAudio.FileFormats.SoundFont.ModulatorBuilder.Modulators">
            <summary>
            Gets the modulators.
            </summary>
            <value>The modulators.</value>
        </member>
        <member name="T:NAudio.FileFormats.SoundFont.Instrument">
            <summary>
            SoundFont instrument
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.Instrument.startInstrumentZoneIndex">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.Instrument.endInstrumentZoneIndex">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.Instrument.zones">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.Instrument.name">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.Instrument.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NAudio.FileFormats.SoundFont.Instrument.Name">
            <summary>
            Gets or sets instrument name
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.SoundFont.Instrument.Zones">
            <summary>
            Gets or sets The Zones
            </summary>
        </member>
        <member name="T:NAudio.FileFormats.Mp3.XingHeader">
            <summary>
            Represents a Xing VBR header
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.XingHeader.sr_table">
            <summary>
            The field for the sample rate table.
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.XingHeader.vbrScale">
            <summary>
            The VBR Scale.
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.XingHeader.startOffset">
            <summary>
            The start offset.
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.XingHeader.endOffset">
            <summary>
            The end offset.
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.XingHeader.tocOffset">
            <summary>
            The table of content offset.
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.XingHeader.framesOffset">
            <summary>
            The frame offset.
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.XingHeader.bytesOffset">
            <summary>
            The bytes offset.
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.XingHeader.frame">
            <summary>
            The MP3 Frame.
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.Mp3.XingHeader.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NAudio.FileFormats.Mp3.XingHeader"/> class from being created. 
            Sees if a frame contains a Xing header
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.Mp3.XingHeader.LoadXingHeader(NAudio.FileFormats.Mp3.Mp3Frame)">
            <summary>
            Load Xing Header
            </summary>
            <param name="frame">The MP3 Frame</param>
            <returns>The Xing Header</returns>
        </member>
        <member name="M:NAudio.FileFormats.Mp3.XingHeader.ReadBigEndian(System.Byte[],System.Int32)">
            <summary>
            Reads the big endian.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.FileFormats.Mp3.XingHeader.WriteBigEndian(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the big endian.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:NAudio.FileFormats.Mp3.XingHeader.Frames">
            <summary>
            Gets or sets Number of frames
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Mp3.XingHeader.Bytes">
            <summary>
            Gets or sets Number of bytes
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Mp3.XingHeader.VbrScale">
            <summary>
            Gets VBR Scale property
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Mp3.XingHeader.Mp3Frame">
            <summary>
            Gets The MP3 frame
            </summary>
        </member>
        <member name="T:NAudio.FileFormats.Mp3.XingHeader.XingHeaderOptions">
            <summary>
            The Xing Header Options.
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.XingHeader.XingHeaderOptions.Frames">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.XingHeader.XingHeaderOptions.Bytes">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.XingHeader.XingHeaderOptions.Toc">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.XingHeader.XingHeaderOptions.VbrScale">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoMediaType">
            <summary>
            <para>For more information, see http://msdn.microsoft.com/en-us/library/aa929922.aspx.</para>
            <para>Originally known as DMO_MEDIA_TYPE</para>
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaType.majortype">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaType.subtype">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaType.bFixedSizeSamples">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaType.bTemporalCompression">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaType.lSampleSize">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaType.formattype">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaType.pUnk">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaType.cbFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaType.pbFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Dmo.DmoMediaType.GetWaveFormat">
            <summary>
            Gets the structure as a Wave format (if it is one)
            </summary>
            <returns>The Wave Format.</returns>
        </member>
        <member name="M:NAudio.Dmo.DmoMediaType.SetWaveFormat(NAudio.Wave.WaveFormat)">
            <summary>
            Sets this object up to point to a wave format
            </summary>
            <param name="waveFormat">Wave format structure</param>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.MajorType">
            <summary>
            Gets Major type
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.MajorTypeName">
            <summary>
            Gets Major type name
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.SubType">
            <summary>
            Gets The Subtype
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.SubTypeName">
            <summary>
            Gets Subtype name
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.FixedSizeSamples">
            <summary>
            Gets a value indicating whether Fixed size samples
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.SampleSize">
            <summary>
            Gets Sample size
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.FormatType">
            <summary>
            Gets Format type
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoMediaType.FormatTypeName">
            <summary>
            Gets Format type name
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveMixerStream32">
            <summary>
            WaveStream that can mix together multiple 32 bit input streams
            (Normally used with stereo input channels)
            All channels must have the same number of inputs
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveMixerStream32.inputStreams">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveMixerStream32.waveFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveMixerStream32.length">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveMixerStream32.position">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveMixerStream32.bytesPerSample">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveMixerStream32.autoStop">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveMixerStream32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveMixerStream32"/> class. 
            Creates a new 32 bit WaveMixerStream
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveMixerStream32.#ctor(System.Collections.Generic.IEnumerable{NAudio.Wave.WaveStream},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveMixerStream32"/> class. 
            Creates a new 32 bit WaveMixerStream
            </summary>
            <param name="inputStreams">
            An Array of WaveStreams - must all have the same format.
            Use WaveChannel is designed for this purpose.
            </param>
            <param name="autoStop">
            Automatically stop when all inputs have been read
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the input streams are not 32 bit floating point,
            or if they have different formats to each other
            </exception>
        </member>
        <member name="M:NAudio.Wave.WaveMixerStream32.AddInputStream(NAudio.Wave.WaveStream)">
            <summary>
            Add a new input to the mixer
            </summary>
            <param name="waveStream">The wave input to add</param>
        </member>
        <member name="M:NAudio.Wave.WaveMixerStream32.RemoveInputStream(NAudio.Wave.WaveStream)">
            <summary>
            Remove a WaveStream from the mixer
            </summary>
            <param name="waveStream">waveStream to remove</param>
        </member>
        <member name="M:NAudio.Wave.WaveMixerStream32.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from this wave stream
            </summary>
            <param name="buffer">buffer to read into</param>
            <param name="offset">offset into buffer</param>
            <param name="count">number of bytes required</param>
            <returns>Number of bytes read.</returns>
            <exception cref="T:System.ArgumentException">Thrown if an invalid number of bytes requested</exception>
        </member>
        <member name="M:NAudio.Wave.WaveMixerStream32.Dispose(System.Boolean)">
            <summary>
            Disposes this WaveStream
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Wave.WaveMixerStream32.Sum32BitAudio(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Actually performs the mixing
            </summary>
            <param name="destBuffer">The dest buffer.</param>
            <param name="offset">The offset.</param>
            <param name="sourceBuffer">The source buffer.</param>
            <param name="bytesRead">The bytes read.</param>
        </member>
        <member name="P:NAudio.Wave.WaveMixerStream32.InputCount">
            <summary>
            Gets The number of inputs to this mixer
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveMixerStream32.AutoStop">
            <summary>
            Gets or sets a value indicating whether Automatically stop when all inputs have been read
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveMixerStream32.BlockAlign">
            <summary>
            The block alignment for this wavestream. Do not modify the Position
            to anything that is not a whole multiple of this value
            </summary>
            <value></value>
        </member>
        <member name="P:NAudio.Wave.WaveMixerStream32.Length">
            <summary>
            Length of this Wave Stream (in bytes)
            <see cref="P:System.IO.Stream.Length"/>
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveMixerStream32.Position">
            <summary>
            Position within this Wave Stream (in bytes)
            <see cref="P:System.IO.Stream.Position"/>
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveMixerStream32.WaveFormat">
            <summary>
            Retrieves the WaveFormat for this stream
            </summary>
            <value></value>
        </member>
        <member name="T:NAudio.Wave.WaveFormatCustomMarshaler">
            <summary>
            Custom marshaller for WaveFormat structures
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormatCustomMarshaler.marshaler">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormatCustomMarshaler.GetInstance(System.String)">
            <summary>
            Gets the instance of this marshaller
            </summary>
            <param name="cookie">The cookie value</param>
            <returns>The Custom Marshaler</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormatCustomMarshaler.CleanUpManagedData(System.Object)">
            <summary>
            Clean up managed data
            </summary>
            <param name="ManagedObj">The managed object to be destroyed.</param>
        </member>
        <member name="M:NAudio.Wave.WaveFormatCustomMarshaler.CleanUpNativeData(System.IntPtr)">
            <summary>
            Clean up native data
            </summary>
            <param name="pNativeData">A pointer to the unmanaged data to be destroyed.</param>
        </member>
        <member name="M:NAudio.Wave.WaveFormatCustomMarshaler.GetNativeDataSize">
            <summary>
            Get native data size
            </summary>
            <returns>The size in bytes of the native data.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormatCustomMarshaler.MarshalManagedToNative(System.Object)">
            <summary>
            Marshal managed to native
            </summary>
            <param name="ManagedObj">The managed object to be converted.</param>
            <returns>
            Returns the COM view of the managed object.
            </returns>
        </member>
        <member name="M:NAudio.Wave.WaveFormatCustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
            <summary>
            Marshal Native to Managed
            </summary>
            <param name="pNativeData">A pointer to the unmanaged data to be wrapped.</param>
            <returns>
            Returns the managed view of the COM data.
            </returns>
        </member>
        <member name="T:NAudio.Wave.AdpcmWaveFormat">
            <summary>
            Microsoft ADPCM
            See http://icculus.org/SDL_sound/downloads/external_documentation/wavecomp.htm
            </summary>
        </member>
        <member name="F:NAudio.Wave.AdpcmWaveFormat.samplesPerBlock">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.AdpcmWaveFormat.numCoeff">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.AdpcmWaveFormat.coefficients">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            7 pairs of coefficients
            </remarks>
        </member>
        <member name="M:NAudio.Wave.AdpcmWaveFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.AdpcmWaveFormat"/> class. 
            Microsoft ADPCM  
            </summary>
            <param name="sampleRate">
            Sample Rate
            </param>
            <param name="channels">
            The Channels
            </param>
        </member>
        <member name="M:NAudio.Wave.AdpcmWaveFormat.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NAudio.Wave.AdpcmWaveFormat"/> class from being created. 
            Empty constructor needed for marshalling from a pointer
            </summary>
        </member>
        <member name="M:NAudio.Wave.AdpcmWaveFormat.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes this wave format
            </summary>
            <param name="writer">Binary writer</param>
        </member>
        <member name="M:NAudio.Wave.AdpcmWaveFormat.ToString">
            <summary>
            String Description of this WaveFormat
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NAudio.Wave.AdpcmWaveFormat.SamplesPerBlock">
            <summary>
            Gets Samples per block
            </summary>
        </member>
        <member name="P:NAudio.Wave.AdpcmWaveFormat.NumCoefficients">
            <summary>
            Gets Number of coefficients
            </summary>
        </member>
        <member name="P:NAudio.Wave.AdpcmWaveFormat.Coefficients">
            <summary>
            Gets the Coefficients
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveHeader">
            <summary>
            WaveHeader interop structure (WAVEHDR)
            http://msdn.microsoft.com/en-us/library/dd743837%28VS.85%29.aspx
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveHeader.dataBuffer">
            <summary>pointer to locked data buffer (lpData)</summary>
        </member>
        <member name="F:NAudio.Wave.WaveHeader.bufferLength">
            <summary>length of data buffer (dwBufferLength)</summary>
        </member>
        <member name="F:NAudio.Wave.WaveHeader.bytesRecorded">
            <summary>used for input only (dwBytesRecorded)</summary>
        </member>
        <member name="F:NAudio.Wave.WaveHeader.userData">
            <summary>for client's use (dwUser)</summary>
        </member>
        <member name="F:NAudio.Wave.WaveHeader.flags">
            <summary>assorted flags (dwFlags)</summary>
        </member>
        <member name="F:NAudio.Wave.WaveHeader.loops">
            <summary>loop control counter (dwLoops)</summary>
        </member>
        <member name="F:NAudio.Wave.WaveHeader.next">
            <summary>PWaveHdr, reserved for driver (lpNext)</summary>
        </member>
        <member name="F:NAudio.Wave.WaveHeader.reserved">
            <summary>reserved for driver</summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IComMultimediaDevice">
            <summary>
            Represents the COM IMMDevice.
            </summary>
            <remarks>
            Originally known as IMMDevice
            </remarks>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IComMultimediaDevice.Activate(System.Guid@,NAudio.CoreAudioApi.Interfaces.ClsCtx,System.IntPtr,System.Object@)">
            <summary>
            Activates the specified id.  activationParams is a propvariant
            </summary>
            <param name="id">The id of the device.</param>
            <param name="clsCtx">The CLS CTX.</param>
            <param name="activationParams">The activation params.</param>
            <param name="interfacePointer">The interface pointer.</param>
            <returns>The HResult of the action.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IComMultimediaDevice.OpenPropertyStore(NAudio.CoreAudioApi.Interfaces.StorageAccessMode,NAudio.CoreAudioApi.Interfaces.IPropertyStore@)">
            <summary>
            Opens the property store.
            </summary>
            <param name="storageAccessMode">The storage access mode.</param>
            <param name="propertyStore">The property store.</param>
            <returns>The HResult of the action.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IComMultimediaDevice.GetId(System.String@)">
            <summary>
            Gets the id.
            </summary>
            <param name="id">The id of the device.</param>
            <returns>The HResult of the action.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IComMultimediaDevice.GetState(NAudio.CoreAudioApi.DeviceState@)">
            <summary>
            Gets the device state.
            </summary>
            <param name="deviceState">The device state.</param>
            <returns>The HResult of the action.</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume">
            <summary>
            Wraps the COM IAudioEndpointVolume.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.RegisterControlChangeNotify(NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolumeCallback)">
            <summary>
            Registers the control change notify.
            </summary>
            <param name="pNotify">The p notify.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.UnregisterControlChangeNotify(NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolumeCallback)">
            <summary>
            Unregisters the control change notify.
            </summary>
            <param name="pNotify">The p notify.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.GetChannelCount(System.Int32@)">
            <summary>
            Gets the channel count.
            </summary>
            <param name="pnChannelCount">The pn channel count.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.SetMasterVolumeLevel(System.Single,System.Guid)">
            <summary>
            Sets the master volume level.
            </summary>
            <param name="fLevelDB">The f level DB.</param>
            <param name="pguidEventContext">The pguid event context.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.SetMasterVolumeLevelScalar(System.Single,System.Guid)">
            <summary>
            Sets the master volume level scalar.
            </summary>
            <param name="fLevel">The f level.</param>
            <param name="pguidEventContext">The pguid event context.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.GetMasterVolumeLevel(System.Single@)">
            <summary>
            Gets the master volume level.
            </summary>
            <param name="pfLevelDB">The pf level DB.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.GetMasterVolumeLevelScalar(System.Single@)">
            <summary>
            Gets the master volume level scalar.
            </summary>
            <param name="pfLevel">The pf level.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.SetChannelVolumeLevel(System.UInt32,System.Single,System.Guid)">
            <summary>
            Sets the channel volume level.
            </summary>
            <param name="nChannel">The n channel.</param>
            <param name="fLevelDB">The f level DB.</param>
            <param name="pguidEventContext">The pguid event context.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.SetChannelVolumeLevelScalar(System.UInt32,System.Single,System.Guid)">
            <summary>
            Sets the channel volume level scalar.
            </summary>
            <param name="nChannel">The n channel.</param>
            <param name="fLevel">The f level.</param>
            <param name="pguidEventContext">The pguid event context.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.GetChannelVolumeLevel(System.UInt32,System.Single@)">
            <summary>
            Gets the channel volume level.
            </summary>
            <param name="nChannel">The n channel.</param>
            <param name="pfLevelDB">The pf level DB.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.GetChannelVolumeLevelScalar(System.UInt32,System.Single@)">
            <summary>
            Gets the channel volume level scalar.
            </summary>
            <param name="nChannel">The n channel.</param>
            <param name="pfLevel">The pf level.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.SetMute(System.Boolean,System.Guid)">
            <summary>
            Sets the mute.
            </summary>
            <param name="bMute">if set to <c>true</c> [b mute].</param>
            <param name="pguidEventContext">The pguid event context.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.GetMute(System.Boolean@)">
            <summary>
            Gets the mute.
            </summary>
            <param name="pbMute">if set to <c>true</c> [pb mute].</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.GetVolumeStepInfo(System.UInt32@,System.UInt32@)">
            <summary>
            Gets the volume step info.
            </summary>
            <param name="pnStep">The pn step.</param>
            <param name="pnStepCount">The pn step count.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.VolumeStepUp(System.Guid)">
            <summary>
            Volumes the step up.
            </summary>
            <param name="pguidEventContext">The pguid event context.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.VolumeStepDown(System.Guid)">
            <summary>
            Volumes the step down.
            </summary>
            <param name="pguidEventContext">The pguid event context.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.QueryHardwareSupport(System.UInt32@)">
            <summary>
            Queries the hardware support.
            </summary>
            <param name="pdwHardwareSupportMask">The PDW hardware support mask.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume.GetVolumeRange(System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the volume range.
            </summary>
            <param name="pflVolumeMindB">The PFL volume mind B.</param>
            <param name="pflVolumeMaxdB">The PFL volume maxd B.</param>
            <param name="pflVolumeIncrementdB">The PFL volume incrementd B.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="T:NAudio.Utils.ByteEncoding">
            <summary>
            An encoding that can read files with extended ASCII characters
            </summary>
        </member>
        <member name="F:NAudio.Utils.ByteEncoding.Instance">
            <summary>
            The one and only instance of this class
            </summary>
        </member>
        <member name="M:NAudio.Utils.ByteEncoding.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NAudio.Utils.ByteEncoding"/> class from being created. 
            Initializes a new instance of the <see cref="T:NAudio.Utils.ByteEncoding"/> class.
            </summary>
        </member>
        <member name="M:NAudio.Utils.ByteEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="index">The index of the first character to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <returns>
            The number of bytes produced by encoding the specified characters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="chars"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than zero.
            -or-
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in <paramref name="chars"/>.
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
            A fallback occurred (see Understanding Encodings for complete explanation)
            -and-
            <see cref="P:System.Text.Encoding.EncoderFallback"/> is set to <see cref="T:System.Text.EncoderExceptionFallback"/>.
            </exception>
        </member>
        <member name="M:NAudio.Utils.ByteEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>
            The actual number of bytes written into <paramref name="bytes"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="chars"/> is null.
            -or-
            <paramref name="bytes"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="charIndex"/> or <paramref name="charCount"/> or <paramref name="byteIndex"/> is less than zero.
            -or-
            <paramref name="charIndex"/> and <paramref name="charCount"/> do not denote a valid range in <paramref name="chars"/>.
            -or-
            <paramref name="byteIndex"/> is not a valid index in <paramref name="bytes"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="bytes"/> does not have enough capacity from <paramref name="byteIndex"/> to the end of the array to accommodate the resulting bytes.
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
            A fallback occurred (see Understanding Encodings for complete explanation)
            -and-
            <see cref="P:System.Text.Encoding.EncoderFallback"/> is set to <see cref="T:System.Text.EncoderExceptionFallback"/>.
            </exception>
        </member>
        <member name="M:NAudio.Utils.ByteEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The index of the first byte to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>
            The number of characters produced by decoding the specified sequence of bytes.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than zero.
            -or-
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in <paramref name="bytes"/>.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            A fallback occurred (see Understanding Encodings for complete explanation)
            -and-
            <see cref="P:System.Text.Encoding.DecoderFallback"/> is set to <see cref="T:System.Text.DecoderExceptionFallback"/>.
            </exception>
        </member>
        <member name="M:NAudio.Utils.ByteEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="byteIndex">The index of the first byte to decode.</param>
            <param name="byteCount">The number of bytes to decode.</param>
            <param name="chars">The character array to contain the resulting set of characters.</param>
            <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
            <returns>
            The actual number of characters written into <paramref name="chars"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes"/> is null.
            -or-
            <paramref name="chars"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="byteIndex"/> or <paramref name="byteCount"/> or <paramref name="charIndex"/> is less than zero.
            -or-
            <paramref name="byteIndex"/> and <paramref name="byteCount"/> do not denote a valid range in <paramref name="bytes"/>.
            -or-
            <paramref name="charIndex"/> is not a valid index in <paramref name="chars"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="chars"/> does not have enough capacity from <paramref name="charIndex"/> to the end of the array to accommodate the resulting characters.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            A fallback occurred (see Understanding Encodings for complete explanation)
            -and-
            <see cref="P:System.Text.Encoding.DecoderFallback"/> is set to <see cref="T:System.Text.DecoderExceptionFallback"/>.
            </exception>
        </member>
        <member name="M:NAudio.Utils.ByteEncoding.GetMaxCharCount(System.Int32)">
            <summary>
            When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.
            </summary>
            <param name="byteCount">The number of bytes to decode.</param>
            <returns>
            The maximum number of characters produced by decoding the specified number of bytes.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="byteCount"/> is less than zero.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            A fallback occurred (see Understanding Encodings for complete explanation)
            -and-
            <see cref="P:System.Text.Encoding.DecoderFallback"/> is set to <see cref="T:System.Text.DecoderExceptionFallback"/>.
            </exception>
        </member>
        <member name="M:NAudio.Utils.ByteEncoding.GetMaxByteCount(System.Int32)">
            <summary>
            When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.
            </summary>
            <param name="charCount">The number of characters to encode.</param>
            <returns>
            The maximum number of bytes produced by encoding the specified number of characters.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="charCount"/> is less than zero.
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
            A fallback occurred (see Understanding Encodings for complete explanation)
            -and-
            <see cref="P:System.Text.Encoding.EncoderFallback"/> is set to <see cref="T:System.Text.EncoderExceptionFallback"/>.
            </exception>
        </member>
        <member name="T:NAudio.FileFormats.SoundFont.RiffChunk">
            <summary>
            The riff chunk
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.RiffChunk.chunkID">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.RiffChunk.chunkSize">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.RiffChunk.dataOffset">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.RiffChunk.riffFile">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.RiffChunk.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.FileFormats.SoundFont.RiffChunk"/> class.
            </summary>
            <param name="file">The binary reader file.</param>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.RiffChunk.GetTopLevelChunk(System.IO.BinaryReader)">
            <summary>
            Gets the top level chunk.
            </summary>
            <param name="file">The file as a binary reader.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.RiffChunk.ReadChunkID">
            <summary>
            just reads a chunk ID at the current position
            </summary>
            <returns>The chunk ID</returns>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.RiffChunk.GetNextSubChunk">
            <summary>
            creates a new riffchunk from current position checking that we're not
            at the end of this chunk first
            </summary>
            <returns>the new chunk</returns>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.RiffChunk.GetData">
            <summary>
            Gets the data.
            </summary>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.RiffChunk.GetDataAsString">
            <summary>
            useful for chunks that just contain a string
            </summary>
            <returns>chunk as string</returns>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.RiffChunk.GetDataAsStructure(NAudio.SoundFont.StructureBuilder)">
            <summary>
            Gets the data as structure.
            </summary>
            <param name="s">The structure builder.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.RiffChunk.GetDataAsStructureArray(NAudio.SoundFont.StructureBuilder)">
            <summary>
            Gets the data as structure array.
            </summary>
            <param name="s">The structure builder.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.RiffChunk.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.RiffChunk.ReadChunk">
            <summary>
            reads a chunk at the current position
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.SoundFont.RiffChunk.ChunkID">
            <summary>
            Gets or sets the chunk ID.
            </summary>
            <value>The chunk ID.</value>
        </member>
        <member name="P:NAudio.FileFormats.SoundFont.RiffChunk.ChunkSize">
            <summary>
            Gets the size of the chunk.
            </summary>
            <value>The size of the chunk.</value>
        </member>
        <member name="P:NAudio.FileFormats.SoundFont.RiffChunk.DataOffset">
            <summary>
            Gets the data offset.
            </summary>
            <value>The data offset.</value>
        </member>
        <member name="T:NAudio.SoundFont.InfoChunk">
            <summary>
            A soundfont info chunk
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.InfoChunk.verSoundFont">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.InfoChunk.waveTableSoundEngine">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.InfoChunk.bankName">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.InfoChunk.dataROM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.InfoChunk.creationDate">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.InfoChunk.author">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.InfoChunk.targetProduct">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.InfoChunk.copyright">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.InfoChunk.comments">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.InfoChunk.tools">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.InfoChunk.verROM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.InfoChunk.#ctor(NAudio.FileFormats.SoundFont.RiffChunk)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.SoundFont.InfoChunk"/> class.
            </summary>
            <param name="chunk">The chunk.</param>
        </member>
        <member name="M:NAudio.SoundFont.InfoChunk.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NAudio.SoundFont.InfoChunk.SoundFontVersion">
            <summary>
            Gets SoundFont Version
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.InfoChunk.WaveTableSoundEngine">
            <summary>
            Gets or sets WaveTable sound engine
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.InfoChunk.BankName">
            <summary>
            Gets or sets the Bank name
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.InfoChunk.DataROM">
            <summary>
            Gets or sets the Data ROM
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.InfoChunk.CreationDate">
            <summary>
            Gets or sets Creation Date
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.InfoChunk.Author">
            <summary>
            Gets or sets The Author
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.InfoChunk.TargetProduct">
            <summary>
            Gets or sets Target Product
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.InfoChunk.Copyright">
            <summary>
            Gets or sets The Copyright
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.InfoChunk.Comments">
            <summary>
            Gets or sets The Comments
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.InfoChunk.Tools">
            <summary>
            Gets or sets The Tools
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.InfoChunk.ROMVersion">
            <summary>
            Gets or sets ROM Version
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoInputDataBufferFlags">
            <summary>
            DMO Input Data Buffer Flags
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoInputDataBufferFlags.None">
            <summary>
            No data buffer flags
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoInputDataBufferFlags.SyncPoint">
            <summary>
            Originally known as DMO_INPUT_DATA_BUFFERF_SYNCPOINT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoInputDataBufferFlags.Time">
            <summary>
            Originally known as DMO_INPUT_DATA_BUFFERF_TIME
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoInputDataBufferFlags.TimeLength">
            <summary>
            Originally known as DMO_INPUT_DATA_BUFFERF_TIMELENGTH
            </summary>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut">
            <summary>
            NativeDirectSoundOut using DirectSound COM interop.
            Contact author: Alexandre Mutel - alexandre_mutel at yahoo.fr
            Modified by: Graham "Gee" Plumb
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.playbackState">
            <summary>
            The field for the playback state.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.waveFormat">
            <summary>
            The field for the wave format.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.samplesTotalSize">
            <summary>
            The field for the total size of the samples.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.samplesFrameSize">
            <summary>
            The field for the frame size of the samples.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.nextSamplesWriteIndex">
            <summary>
            The field for the next samples write index.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.desiredLatency">
            <summary>
            The field for the desired latency.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.samples">
            <summary>
            The field for the samples.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.waveStream">
            <summary>
            The field for the wave stream.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.directSound">
            <summary>
            The field for the direct sound.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.primarySoundBuffer">
            <summary>
            The field for the primary sound buffer.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.secondaryBuffer">
            <summary>
            The field for the secondary buffer.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.frameEventWaitHandle1">
            <summary>
            The field for the first frame wait handle.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.frameEventWaitHandle2">
            <summary>
            The field for the second frame wait handle.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.endEventWaitHandle">
            <summary>
            The end event wait handle
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.notifyThread">
            <summary>
            The field for the notification thread.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.m_LockObject">
            <summary>
            Used purely for locking
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.DirectSoundOut"/> class.
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.DirectSoundOut"/> class.
            (40ms seems to work under Vista).
            </summary>
            <param name="latency">The latency.</param>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NAudio.Wave.DirectSoundOut"/> class. 
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:NAudio.Wave.DirectSoundOut"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.Play">
            <summary>
            Begin playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.Stop">
            <summary>
            Stop playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.Pause">
            <summary>
            Pause Playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.Init(NAudio.Wave.IWaveProvider)">
            <summary>
            Initialise playback
            </summary>
            <param name="waveProvider">The waveprovider to be played</param>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.DirectSoundCreate(System.IntPtr,NAudio.Wave.DirectSoundOut.IDirectSound@,System.IntPtr)">
            <summary>
            Instanciate DirectSound from the DLL
            </summary>
            <param name="GUID">The GUID to create.</param>
            <param name="directSound">The direct sound.</param>
            <param name="pUnkOuter">The unknown outer pointer.</param>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.GetDesktopWindow">
            <summary>
            Gets the HANDLE of the desktop window.
            </summary>
            <returns>HANDLE of the Desktop window</returns>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.InitialiseDirectSound">
            <summary>
            Initialises the direct sound.
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IsBufferLost">
            <summary>
            Determines whether the SecondaryBuffer is lost.
            </summary>
            <returns>
                <c>true</c> if [is buffer lost]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.MsToBytes(System.Int32)">
            <summary>
            Convert ms to bytes size according to WaveFormat
            </summary>
            <param name="ms">The milliseconds</param>
            <returns>number of bytes</returns>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.processSamples">
            <summary>
            Processes the samples in a separate thread.
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.StopPlayback">
            <summary>
            Stop playback
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.Feed(System.Int32)">
            <summary>
            Feeds the SecondaryBuffer with the WaveStream
            </summary>
            <param name="bytesToCopy">number of bytes to feed</param>
            <returns>The result of the call.</returns>
        </member>
        <member name="E:NAudio.Wave.DirectSoundOut.PlaybackStopped">
            <summary>
            Playback Stopped
            </summary>
        </member>
        <member name="P:NAudio.Wave.DirectSoundOut.PlaybackState">
            <summary>
            Gets Current playback state
            </summary>
            <value></value>
        </member>
        <member name="P:NAudio.Wave.DirectSoundOut.Volume">
            <summary>
            Gets or sets The volume 1.0 is full scale
            </summary>
            <value></value>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.DirectSoundCooperativeLevel">
            <summary>
            The Direct Sound Cooperative Level.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundCooperativeLevel.DSSCL_NORMAL">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundCooperativeLevel.DSSCL_PRIORITY">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundCooperativeLevel.DSSCL_EXCLUSIVE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundCooperativeLevel.DSSCL_WRITEPRIMARY">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.DirectSoundPlayFlags">
            <summary>
            The Direct Sound Play Flags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundPlayFlags.DSBPLAY_LOOPING">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundPlayFlags.DSBPLAY_LOCHARDWARE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundPlayFlags.DSBPLAY_LOCSOFTWARE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundPlayFlags.DSBPLAY_TERMINATEBY_TIME">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundPlayFlags.DSBPLAY_TERMINATEBY_DISTANCE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundPlayFlags.DSBPLAY_TERMINATEBY_PRIORITY">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.DirectSoundBufferLockFlag">
            <summary>
            The Direct Sound Buffer Lock.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferLockFlag.None">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferLockFlag.FromWriteCursor">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferLockFlag.EntireBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.DirectSoundBufferStatus">
            <summary>
            The Direct Sound Buffer Status Flags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferStatus.DSBSTATUS_PLAYING">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferStatus.DSBSTATUS_BUFFERLOST">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferStatus.DSBSTATUS_LOOPING">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferStatus.DSBSTATUS_LOCHARDWARE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferStatus.DSBSTATUS_LOCSOFTWARE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferStatus.DSBSTATUS_TERMINATED">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps">
            <summary>
            The Direct Sound Buffer Caps Flags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_STATIC">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_LOCHARDWARE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_LOCSOFTWARE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_CTRL3D">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_CTRLFREQUENCY">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_CTRLPAN">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_CTRLFX">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_MUTE3DATMAXDISTANCE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferCaps.DSBCAPS_LOCDEFER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.IDirectSound">
            <summary>
            IDirectSound interface
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSound.CreateSoundBuffer(NAudio.Wave.DirectSoundOut.BufferDescription,System.Object@,System.IntPtr)">
            <summary>
            Creates the sound buffer.
            </summary>
            <param name="desc">The description.</param>
            <param name="dsDSoundBuffer">The ds D sound buffer.</param>
            <param name="pUnkOuter">The p unk outer.</param>
            <remarks>
            STDMETHOD(CreateSoundBuffer)    (THIS_ LPCDSBUFFERDESC pcDSBufferDesc, LPDIRECTSOUNDBUFFER *ppDSBuffer, LPUNKNOWN pUnkOuter) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSound.GetCaps(System.IntPtr)">
            <summary>
            Gets the caps.
            </summary>
            <param name="caps">The caps pointer.</param>
            <remarks>
            STDMETHOD(GetCaps)              (THIS_ LPDSCAPS pDSCaps) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSound.DuplicateSoundBuffer(NAudio.Wave.DirectSoundOut.IDirectSoundBuffer,NAudio.Wave.DirectSoundOut.IDirectSoundBuffer)">
            <summary>
            Duplicates the sound buffer.
            </summary>
            <param name="bufferOriginal">The buffer original.</param>
            <param name="bufferDuplicate">The buffer duplicate.</param>
            <remarks>
            STDMETHOD(DuplicateSoundBuffer) (THIS_ LPDIRECTSOUNDBUFFER pDSBufferOriginal, LPDIRECTSOUNDBUFFER *ppDSBufferDuplicate) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSound.SetCooperativeLevel(System.IntPtr,NAudio.Wave.DirectSoundOut.DirectSoundCooperativeLevel)">
            <summary>
            Sets the cooperative level.
            </summary>
            <param name="HWND">The HWND pointer.</param>
            <param name="dwLevel">The dw level.</param>
            <remarks>
            STDMETHOD(SetCooperativeLevel)  (THIS_ HWND hwnd, DWORD dwLevel) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSound.Compact">
            <summary>
            Compacts this instance.
            </summary>
            <remarks>
            STDMETHOD(Compact)              (THIS) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSound.GetSpeakerConfig(System.IntPtr)">
            <summary>
            Gets the speaker config.
            </summary>
            <param name="pdwSpeakerConfig">The PDW speaker config.</param>
            <remarks>
            STDMETHOD(GetSpeakerConfig)     (THIS_ LPDWORD pdwSpeakerConfig) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSound.SetSpeakerConfig(System.UInt32)">
            <summary>
            Sets the speaker config.
            </summary>
            <param name="pdwSpeakerConfig">The PDW speaker config.</param>
            <remarks>
            STDMETHOD(SetSpeakerConfig)     (THIS_ DWORD dwSpeakerConfig) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSound.Initialize(System.Guid)">
            <summary>
            Initializes the specified GUID.
            </summary>
            <param name="guid">The GUID to initialize.</param>
            <remarks>
            STDMETHOD(Initialize)           (THIS_ LPCGUID pcGuidDevice) PURE;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer">
            <summary>
            IDirectSoundBuffer interface
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.GetCaps(NAudio.Wave.DirectSoundOut.BufferCaps)">
            <summary>
            Gets the caps.
            </summary>
            <param name="pBufferCaps">The p buffer caps.</param>
            <remarks>
            STDMETHOD(GetCaps)              (THIS_ LPDSBCAPS pDSBufferCaps) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.GetCurrentPosition(System.UInt32@,System.UInt32@)">
            <summary>
            Gets the current position.
            </summary>
            <param name="currentPlayCursor">The current play cursor.</param>
            <param name="currentWriteCursor">The current write cursor.</param>
            <remarks>
            STDMETHOD(GetCurrentPosition)   (THIS_ LPDWORD pdwCurrentPlayCursor, LPDWORD pdwCurrentWriteCursor) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.GetFormat">
            <summary>
            Gets the format.
            </summary>
            <remarks>
            STDMETHOD(GetFormat)            (THIS_ LPWAVEFORMATEX pwfxFormat, DWORD dwSizeAllocated, LPDWORD pdwSizeWritten) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.GetVolume">
            <summary>
            Gets the volume.
            </summary>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            STDMETHOD(GetVolume)            (THIS_ LPLONG plVolume) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.GetPan(System.UInt32@)">
            <summary>
            Gets the pan.
            </summary>
            <param name="pan">The pan value.</param>
            <remarks>
            STDMETHOD(GetPan)               (THIS_ LPLONG plPan) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.GetFrequency">
            <summary>
            Gets the frequency.
            </summary>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>STDMETHOD(GetFrequency)         (THIS_ LPDWORD pdwFrequency) PURE;</remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.GetStatus">
            <summary>
            Gets the status.
            </summary>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            STDMETHOD(GetStatus)            (THIS_ LPDWORD pdwStatus) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.Initialize(NAudio.Wave.DirectSoundOut.IDirectSound,NAudio.Wave.DirectSoundOut.BufferDescription)">
            <summary>
            Initializes the specified direct sound.
            </summary>
            <param name="directSound">The direct sound.</param>
            <param name="desc">The description.</param>
            <remarks>
            STDMETHOD(Initialize)           (THIS_ LPDIRECTSOUND pDirectSound, LPCDSBUFFERDESC pcDSBufferDesc) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.Lock(System.Int32,System.UInt32,System.IntPtr@,System.Int32@,System.IntPtr@,System.Int32@,NAudio.Wave.DirectSoundOut.DirectSoundBufferLockFlag)">
            <summary>
            Locks the specified dw offset.
            </summary>
            <param name="dwOffset">The dw offset.</param>
            <param name="dwBytes">The dw bytes.</param>
            <param name="audioPtr1">The audio PTR1.</param>
            <param name="audioBytes1">The audio bytes1.</param>
            <param name="audioPtr2">The audio PTR2.</param>
            <param name="audioBytes2">The audio bytes2.</param>
            <param name="dwFlags">The dw flags.</param>
            <remarks>
            STDMETHOD(Lock)                 (THIS_ DWORD dwOffset, DWORD dwBytes, LPVOID *ppvAudioPtr1, LPDWORD pdwAudioBytes1,
                                                     LPVOID *ppvAudioPtr2, LPDWORD pdwAudioBytes2, DWORD dwFlags) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.Play(System.UInt32,System.UInt32,NAudio.Wave.DirectSoundOut.DirectSoundPlayFlags)">
            <summary>
            Plays the specified dw reserved1.
            </summary>
            <param name="dwReserved1">The dw reserved1.</param>
            <param name="dwPriority">The dw priority.</param>
            <param name="dwFlags">The dw flags.</param>
            <remarks>
            STDMETHOD(Play)                 (THIS_ DWORD dwReserved1, DWORD dwPriority, DWORD dwFlags) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.SetCurrentPosition(System.UInt32)">
            <summary>
            Sets the current position.
            </summary>
            <param name="dwNewPosition">The dw new position.</param>
            <remarks>
            STDMETHOD(SetCurrentPosition)   (THIS_ DWORD dwNewPosition) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.SetFormat(NAudio.Wave.WaveFormat)">
            <summary>
            Sets the format.
            </summary>
            <param name="pcfxFormat">The PCFX format.</param>
            <remarks>
            STDMETHOD(SetFormat)            (THIS_ LPCWAVEFORMATEX pcfxFormat) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.SetVolume(System.Int32)">
            <summary>
            Sets the volume.
            </summary>
            <param name="volume">The volume.</param>
            <remarks>
            STDMETHOD(SetVolume)            (THIS_ LONG lVolume) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.SetPan(System.UInt32)">
            <summary>
            Sets the pan.
            </summary>
            <param name="pan">The pan value.</param>
            <remarks>
            STDMETHOD(SetPan)               (THIS_ LONG lPan) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.SetFrequency(System.UInt32)">
            <summary>
            Sets the frequency.
            </summary>
            <param name="frequency">The frequency.</param>
            <remarks>
            STDMETHOD(SetFrequency)         (THIS_ DWORD dwFrequency) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.Stop">
            <summary>
            Stops this instance.
            </summary>
            <remarks>
            STDMETHOD(Stop)                 (THIS) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.Unlock(System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Unlocks the specified pv audio PTR1.
            </summary>
            <param name="pvAudioPtr1">The pv audio PTR1.</param>
            <param name="dwAudioBytes1">The dw audio bytes1.</param>
            <param name="pvAudioPtr2">The pv audio PTR2.</param>
            <param name="dwAudioBytes2">The dw audio bytes2.</param>
            <remarks>
            STDMETHOD(Unlock)               (THIS_ LPVOID pvAudioPtr1, DWORD dwAudioBytes1, LPVOID pvAudioPtr2, DWORD dwAudioBytes2) PURE;
            </remarks>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundBuffer.Restore">
            <summary>
            Restores this instance.
            </summary>
            <remarks>
            STDMETHOD(Restore)              (THIS) PURE;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.IDirectSoundNotify">
            <summary>
            IDirectSoundNotify interface
            </summary>
        </member>
        <member name="M:NAudio.Wave.DirectSoundOut.IDirectSoundNotify.SetNotificationPositions(System.UInt32,NAudio.Wave.DirectSoundOut.DirectSoundBufferPositionNotify[])">
            <summary>
            Sets the notification positions.
            </summary>
            <param name="dwPositionNotifies">The dw position notifies.</param>
            <param name="pcPositionNotifies">The pc position notifies.</param>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.DirectSoundBufferPositionNotify">
            <summary>
            The Direct Sound Buffer Position Notify.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferPositionNotify.dwOffset">
            <summary>
            The field for the offset.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.DirectSoundBufferPositionNotify.hEventNotify">
            <summary>
            The field for the event notify.
            </summary>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.BufferDescription">
            <summary>
            The buffer description
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.BufferDescription.dwSize">
            <summary>
            The field for the size.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.BufferDescription.dwFlags">
            <summary>
            The field for the flags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.BufferDescription.dwBufferBytes">
            <summary>
            The field for the buffer bytes.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.BufferDescription.dwReserved">
            <summary>
            The field for the reserved value.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.BufferDescription.lpwfxFormat">
            <summary>
            The field for the pointer to the format.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.BufferDescription.guidAlgo">
            <summary>
            The field for the algorithm guid.
            </summary>
        </member>
        <member name="T:NAudio.Wave.DirectSoundOut.BufferCaps">
            <summary>
            The buffer caps
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.BufferCaps.dwSize">
            <summary>
            The field for the size.
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.BufferCaps.dwFlags">
            <summary>
            The field for the flags
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.BufferCaps.dwBufferBytes">
            <summary>
            The field for the buffer size
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.BufferCaps.dwUnlockTransferRate">
            <summary>
            The field for the unlock transfer rate
            </summary>
        </member>
        <member name="F:NAudio.Wave.DirectSoundOut.BufferCaps.dwPlayCpuOverhead">
            <summary>
            The field for the play CPU overhead
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveOutCapabilities">
            <summary>
            WaveOutCapabilities structure (based on WAVEOUTCAPS from mmsystem.h)
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/multimed/htm/_win32_waveoutcaps_str.asp
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutCapabilities.MaxProductNameLength">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutCapabilities.manufacturerId">
            <summary>
            Originally known as wMid
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutCapabilities.productId">
            <summary>
            Originally known as wPid
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutCapabilities.driverVersion">
            <summary>
            Originally known as vDriverVersion
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutCapabilities.productName">
            <summary>
            Product Name (szPname)
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutCapabilities.supportedFormats">
            <summary>
            Supported formats (bit flags) dwFormats 
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutCapabilities.channels">
            <summary>
            Supported channels (1 for mono 2 for stereo) (wChannels)
            Seems to be set to -1 on a lot of devices
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutCapabilities.reserved">
            <summary>
            Originally known as wReserved1
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutCapabilities.support">
            <summary>
            Optional functionality supported by the device
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOutCapabilities.Channels">
            <summary>
            Gets Number of channels supported
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOutCapabilities.SupportsPlaybackRateControl">
            <summary>
            Gets a value indicating whether Whether playback control is supported
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOutCapabilities.ProductName">
            <summary>
            Gets The product name
            </summary>
        </member>
        <member name="T:NAudio.Wave.MmeInterop.WaveInterop">
            <summary>
            MME Wave function interop
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveInterop.CallbackNull">
            <summary>
            The field for the null callback.
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveInterop.CallbackWindow">
            <summary>
            The field for the window callback.
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveInterop.CallbackThread">
            <summary>
            The field for the thread callback.
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveInterop.CallbackFunction">
            <summary>
            The field for the function callback.
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveInterop.CallbackEvent">
            <summary>
            The field for the event callback.
            </summary>
        </member>
        <member name="T:NAudio.Wave.MmeInterop.WaveInterop.WaveCallback">
            <summary>
            use the userdata as a reference
            WaveOutProc http://msdn.microsoft.com/en-us/library/dd743869%28VS.85%29.aspx
            WaveInProc http://msdn.microsoft.com/en-us/library/dd743849%28VS.85%29.aspx
            </summary>
            <param name="hWaveOut">The wave out.</param>
            <param name="message">The message.</param>
            <param name="dwInstance">The instance.</param>
            <param name="wavhdr">The wave header</param>
            <param name="dwReserved">The reserved pointer.</param>
        </member>
        <member name="T:NAudio.Wave.MmeInterop.WaveInterop.WaveMessage">
            <summary>
            The Wave Message enum.
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveInterop.WaveMessage.WaveInOpen">
            <summary>
            Originally known as WIM_OPEN
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveInterop.WaveMessage.WaveInClose">
            <summary>
            Originally known as WIM_CLOSE
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveInterop.WaveMessage.WaveInData">
            <summary>
            Originally known as WIM_DATA
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveInterop.WaveMessage.WaveOutClose">
            <summary>
            Originally known as WOM_CLOSE
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveInterop.WaveMessage.WaveOutDone">
            <summary>
            Originally known as WOM_DONE
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveInterop.WaveMessage.WaveOutOpen">
            <summary>
            Originally known as WOM_OPEN
            </summary>
        </member>
        <member name="T:NAudio.Wave.MmeInterop.WaveInEventArgs">
            <summary>
            Event Args for WaveInStream event
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveInEventArgs.buffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveInEventArgs.bytes">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.MmeInterop.WaveInEventArgs.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.MmeInterop.WaveInEventArgs"/> class.
            Creates new WaveInEventArgs
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="P:NAudio.Wave.MmeInterop.WaveInEventArgs.Buffer">
            <summary>
            Gets Buffer containing recorded data. Note that it might not be completely
            full. <seealso cref="P:NAudio.Wave.MmeInterop.WaveInEventArgs.BytesRecorded"/>
            </summary>
        </member>
        <member name="P:NAudio.Wave.MmeInterop.WaveInEventArgs.BytesRecorded">
            <summary>
            Gets The number of recorded bytes in Buffer. <seealso cref="P:NAudio.Wave.MmeInterop.WaveInEventArgs.Buffer"/>
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveIn">
            <summary>
            Allows recording using the Windows waveIn APIs
            Events are raised as recorded buffers are made available
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveIn.waveInHandle">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveIn.recording">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveIn.buffers">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveIn.callback">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveIn.callbackInfo">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveIn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveIn"/> class. 
            Prepares a Wave input device for recording
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveIn.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveIn"/> class. 
            Creates a WaveIn device using the specified window handle for callbacks
            </summary>
            <param name="windowHandle">
            A valid window handle
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveIn.#ctor(NAudio.Wave.WaveCallbackInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveIn"/> class.
            Prepares a Wave input device for recording
            </summary>
            <param name="callbackInfo">The callback info.</param>
        </member>
        <member name="M:NAudio.Wave.WaveIn.GetCapabilities(System.Int32)">
            <summary>
            Retrieves the capabilities of a waveIn device
            </summary>
            <param name="devNumber">Device to test</param>
            <returns>The WaveIn device capabilities</returns>
        </member>
        <member name="M:NAudio.Wave.WaveIn.StartRecording">
            <summary>
            Start recording
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveIn.StopRecording">
            <summary>
            Stop recording
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveIn.GetMixerLine">
            <summary>
            Microphone Level
            </summary>
            <returns>The Mixer Line.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveIn.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveIn.Dispose(System.Boolean)">
            <summary>
            Dispose pattern
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Wave.WaveIn.CreateBuffers">
            <summary>
            Creates the buffers.
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveIn.Callback(System.IntPtr,NAudio.Wave.MmeInterop.WaveInterop.WaveMessage,System.IntPtr,NAudio.Wave.WaveHeader,System.IntPtr)">
            <summary>
            Called when we get a new buffer of recorded data
            </summary>
            <param name="waveInHandle">The wave in handle.</param>
            <param name="message">The message.</param>
            <param name="userData">The user data.</param>
            <param name="waveHeader">The wave header.</param>
            <param name="reserved">The reserved.</param>
        </member>
        <member name="M:NAudio.Wave.WaveIn.OpenWaveInDevice">
            <summary>
            Opens the wave in device.
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveIn.CloseWaveInDevice">
            <summary>
            Closes the wave in device.
            </summary>
        </member>
        <member name="E:NAudio.Wave.WaveIn.DataAvailable">
            <summary>
            Indicates recorded data is available 
            </summary>
        </member>
        <member name="E:NAudio.Wave.WaveIn.RecordingStopped">
            <summary>
            Indicates that all recorded data has now been received.
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveIn.DeviceCount">
            <summary>
            Gets Returns the number of Wave In devices available in the system
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveIn.BufferMilliseconds">
            <summary>
            Gets or sets Milliseconds for the buffer. Recommended value is 100ms
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveIn.NumberOfBuffers">
            <summary>
            Gets or sets Number of Buffers to use (usually 2 or 3)
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveIn.DeviceNumber">
            <summary>
            Gets or sets The device number to use
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveIn.WaveFormat">
            <summary>
            Gets or sets WaveFormat we are recording in
            </summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmFormatTagDetails">
            <summary>
            The ACM Format Tag Details.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatTagDetails.FormatTagDescriptionChars">
            <summary>
            Originally known as ACMFORMATTAGDETAILS_FORMATTAG_CHARS
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatTagDetails.structureSize">
            <summary>
            DWORD cbStruct; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatTagDetails.formatTagIndex">
            <summary>
            DWORD dwFormatTagIndex; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatTagDetails.formatTag">
            <summary>
            DWORD dwFormatTag; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatTagDetails.formatSize">
            <summary>
            DWORD cbFormatSize; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatTagDetails.supportFlags">
            <summary>
            DWORD fdwSupport;
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatTagDetails.standardFormatsCount">
            <summary>
            DWORD cStandardFormats; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatTagDetails.formatDescription">
            <summary>
            TCHAR szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS]; 
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriverCapability">
            <summary>
            ASIODriverCapability holds all the information from the ASIODriver.
            Use ASIODriverExt to get the Capabilities
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverCapability.DriverName">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverCapability.NbInputChannels">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverCapability.NbOutputChannels">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverCapability.InputLatency">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverCapability.OutputLatency">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverCapability.BufferMinSize">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverCapability.BufferMaxSize">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverCapability.BufferPreferredSize">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverCapability.BufferGranularity">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverCapability.SampleRate">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverCapability.InputChannelInfos">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverCapability.OutputChannelInfos">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver">
            <summary>
            Main ASIODriver Class. To use this class, you need to query first the GetASIODriverNames() and
            then use the GetASIODriverByName to instantiate the correct ASIODriver.
            This is the first ASIODriver binding fully implemented in C#!
            <para>Contributor: Alexandre Mutel - email: alexandre_mutel at yahoo.fr</para>
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.pASIOComObject">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.pinnedcallbacks">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.asioDriverVirtualTable">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NAudio.Wave.Asio.ASIODriver"/> class from being created.
            Initializes a new instance of the <see cref="T:NAudio.Wave.Asio.ASIODriver"/> class.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.GetASIODriverNames">
            <summary>
            Gets the ASIO driver names installed.
            </summary>
            <returns>a list of driver names. Use this name to GetASIODriverByName</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.GetASIODriverByName(System.String)">
            <summary>
            Instantiate a ASIODriver given its name.
            </summary>
            <param name="name">The name of the driver</param>
            <returns>an ASIODriver instance</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.GetASIODriverByGuid(System.Guid)">
            <summary>
            Instantiate the ASIO driver by GUID.
            </summary>
            <param name="guid">The GUID of the driver.</param>
            <returns>an ASIODriver instance</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.init(System.IntPtr)">
            <summary>
            Inits the ASIODriver..
            </summary>
            <param name="sysHandle">The sys handle.</param>
            <returns>The outcome of the call.</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.getDriverName">
            <summary>
            Gets the name of the driver.
            </summary>
            <returns>The Driver name.</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.getDriverVersion">
            <summary>
            Gets the driver version.
            </summary>
            <returns>The driver version.</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.getErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <returns>The error message</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.stop">
            <summary>
            Stops this instance.
            </summary>
            <returns>The result of the call.</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.getChannels(System.Int32@,System.Int32@)">
            <summary>
            Gets the channels.
            </summary>
            <param name="numInputChannels">The num input channels.</param>
            <param name="numOutputChannels">The num output channels.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.getLatencies(System.Int32@,System.Int32@)">
            <summary>
            Gets the latencies.
            </summary>
            <param name="inputLatency">The input latency.</param>
            <param name="outputLatency">The output latency.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.getBufferSize(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the size of the buffer.
            </summary>
            <param name="minSize">Size of the min.</param>
            <param name="maxSize">Size of the max.</param>
            <param name="preferredSize">Size of the preferred.</param>
            <param name="granularity">The granularity.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.canSampleRate(System.Double)">
            <summary>
            Determines whether this instance can use the specified sample rate.
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <returns>
                <c>true</c> if this instance [can sample rate] the specified sample rate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.getSampleRate">
            <summary>
            Gets the sample rate.
            </summary>
            <returns>The Sample Rate</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.setSampleRate(System.Double)">
            <summary>
            Sets the sample rate.
            </summary>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.getClockSources(System.Int64@,System.Int32)">
            <summary>
            Gets the clock sources.
            </summary>
            <param name="clocks">The clocks.</param>
            <param name="numSources">The num sources.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.setClockSource(System.Int32)">
            <summary>
            Sets the clock source.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.getSamplePosition(System.Int64@,NAudio.Wave.Asio.ASIO64Bit@)">
            <summary>
            Gets the sample position.
            </summary>
            <param name="samplePos">The sample pos.</param>
            <param name="timeStamp">The time stamp.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.getChannelInfo(System.Int32,System.Boolean)">
            <summary>
            Gets the channel info.
            </summary>
            <param name="channelNumber">The channel number.</param>
            <param name="trueForInputInfo">if set to <c>true</c> [true for input info].</param>
            <returns>The Channel Info</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.createBuffers(System.IntPtr,System.Int32,System.Int32,NAudio.Wave.Asio.ASIOCallbacks@)">
            <summary>
            Creates the buffers.
            </summary>
            <param name="bufferInfos">The buffer infos.</param>
            <param name="numChannels">The num channels.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="callbacks">The callbacks.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.disposeBuffers">
            <summary>
            Disposes the buffers.
            </summary>
            <returns>The result of the call.</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.controlPanel">
            <summary>
            Controls the panel.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.future(System.Int32,System.IntPtr)">
            <summary>
            Futures the specified selector.
            </summary>
            <param name="selector">The selector id.</param>
            <param name="opt">The option pointer.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.outputReady">
            <summary>
            Notifies OutputReady to the ASIODriver.
            </summary>
            <returns>The outcome of the call.</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.ReleaseComASIODriver">
            <summary>
            Releases this instance.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.handleException(NAudio.Wave.Asio.ASIOError,System.String)">
            <summary>
            Handles the exception. Throws an exception based on the error.
            </summary>
            <param name="error">The error to check.</param>
            <param name="methodName">Method name</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriver.initFromGuid(System.Guid)">
            <summary>
            Inits the vTable method from GUID. This is a tricky part of this class.
            </summary>
            <param name="ASIOGuid">The ASIO GUID.</param>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable">
            <summary>
            Internal VTable structure to store all the delegates to the C++ COM method.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.init">
            <summary>
            The field for init.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.getDriverName">
            <summary>
            The field for the get driver name.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.getDriverVersion">
            <summary>
            The field for the get driver version.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.getErrorMessage">
            <summary>
            The field for the get error message.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.start">
            <summary>
            The field for the start.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.stop">
            <summary>
            The field for the stop.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.getChannels">
            <summary>
            The field for get channels.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.getLatencies">
            <summary>
            The field for get latencies.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.getBufferSize">
            <summary>
            The field for get buffer size.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.canSampleRate">
            <summary>
            The field for can sample rate.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.getSampleRate">
            <summary>
            The field for get sample rate
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.setSampleRate">
            <summary>
            The field for set sample rate.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.getClockSources">
            <summary>
            The field for get clock sources.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.setClockSource">
            <summary>
            The field for set clock source
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.getSamplePosition">
            <summary>
            The field for get sample position.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.getChannelInfo">
            <summary>
            The field for get channel info.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.createBuffers">
            <summary>
            The field for create buffers.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.disposeBuffers">
            <summary>
            The field for dispose buffers.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.controlPanel">
            <summary>
            The field for the control panel
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.future">
            <summary>
            The field for the future.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.outputReady">
            <summary>
            The field for the output ready.
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOInit">
            <summary>
            The ASIO Init delegate.
            </summary>
            <param name="_pUnknown">The unknown pointer handle.</param>
            <param name="sysHandle">The system handle point.</param>
            <returns>A boolean value.</returns>
            <remarks>
            3  virtual ASIOBool init(void *sysHandle) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOgetDriverName">
            <summary>
            The ASIO get Driver Name delegate
            </summary>
            <param name="_pUnknown">The unknown pointer handle.</param>
            <param name="name">The driver name</param>
            <remarks>
            4  virtual void getDriverName(char *name) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOgetDriverVersion">
            <summary>
            The ASIO Get Driver Version delegate.
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            5  virtual long getDriverVersion() = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOgetErrorMessage">
            <summary>
            The ASIO Get Error Message delegate.
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <param name="errorMessage">The error message.</param>
            <remarks>
            6  virtual void getErrorMessage(char *string) = 0;    
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOstart">
            <summary>
            The ASIO start delegate
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            7  virtual ASIOError start() = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOstop">
            <summary>
            The ASIO stop delegate
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            8  virtual ASIOError stop() = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOgetChannels">
            <summary>
            The ASIO Get Channels delegate
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <param name="numInputChannels">The number of input channels.</param>
            <param name="numOutputChannels">The number of output channels.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            9  virtual ASIOError getChannels(long *numInputChannels, long *numOutputChannels) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOgetLatencies">
            <summary>
            The ASIO Get Latencies
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <param name="inputLatency">The input latency.</param>
            <param name="outputLatency">The output latency.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            10  virtual ASIOError getLatencies(long *inputLatency, long *outputLatency) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOgetBufferSize">
            <summary>
            The ASIO Get Buffer Size
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <param name="minSize">The minimum size.</param>
            <param name="maxSize">The maximum size.</param>
            <param name="preferredSize">The preferred size.</param>
            <param name="granularity">The granularity.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            11 virtual ASIOError getBufferSize(long *minSize, long *maxSize, long *preferredSize, long *granularity) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOcanSampleRate">
            <summary>
            The ASIO Can Sample Rate.
            </summary>
            <param name="_pUnknown">The unknown pointer handle.</param>
            <param name="sampleRate">The sample rate.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            12 virtual ASIOError canSampleRate(ASIOSampleRate sampleRate) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOgetSampleRate">
            <summary>
            The ASIO Get Sample Rate
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <param name="sampleRate">The sample rate.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            13 virtual ASIOError getSampleRate(ASIOSampleRate *sampleRate) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOsetSampleRate">
            <summary>
            ASIO Set Sample Rate
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <param name="sampleRate">The sample rate.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            14 virtual ASIOError setSampleRate(ASIOSampleRate sampleRate) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOgetClockSources">
            <summary>
            ASIO Get Clock Sources
            </summary>
            <param name="_pUnknown">The Unknown pointer.</param>
            <param name="clocks">The clocks.</param>
            <param name="numSources">The number of sources.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            15 virtual ASIOError getClockSources(ASIOClockSource *clocks, long *numSources) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOsetClockSource">
            <summary>
            ASIO Set Clock Source
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <param name="reference">The reference.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            16 virtual ASIOError setClockSource(long reference) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOgetSamplePosition">
            <summary>
            ASIO Get Sample Position.
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <param name="samplePos">The sample position.</param>
            <param name="timeStamp">The timestamp.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            17 virtual ASIOError getSamplePosition(ASIOSamples *sPos, ASIOTimeStamp *tStamp) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOgetChannelInfo">
            <summary>
            ASIO Get Channel Info
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <param name="info">The channel info.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            18 virtual ASIOError getChannelInfo(ASIOChannelInfo *info) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOcreateBuffers">
            <summary>
            ASIO Create Buffers
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <param name="bufferInfos">The buffer infos.</param>
            <param name="numChannels">The number of channels.</param>
            <param name="bufferSize">The buffer size.</param>
            <param name="callbacks">The callbacks.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            19 virtual ASIOError createBuffers(ASIOBufferInfo *bufferInfos, long numChannels, long bufferSize, ASIOCallbacks *callbacks) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOdisposeBuffers">
            <summary>
            ASIO Dispose Buffers
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            20 virtual ASIOError disposeBuffers() = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOcontrolPanel">
            <summary>
            ASIO Control Panel.
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            21 virtual ASIOError controlPanel() = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOfuture">
            <summary>
            ASIO Future.
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <param name="selector">The selector.</param>
            <param name="opt">The options.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            22 virtual ASIOError future(long selector,void *opt) = 0;
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriver.AsioDriverVirtualTable.ASIOoutputReady">
            <summary>
            ASIO Output Ready
            </summary>
            <param name="_pUnknown">The unknown pointer.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            23 virtual ASIOError outputReady() = 0;
            </remarks>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioMeterInformation">
            <summary>
            Audio Meter Information
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioMeterInformation._AudioMeterInformation">
            <summary>
            The audio meter information.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioMeterInformation.#ctor(NAudio.CoreAudioApi.Interfaces.IAudioMeterInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.AudioMeterInformation"/> class.
            </summary>
            <param name="realInterface">The real interface.</param>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioMeterInformation.PeakValues">
            <summary>
            Gets Peak Values
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioMeterInformation.HardwareSupport">
            <summary>
            Gets Hardware Support
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioMeterInformation.MasterPeakValue">
            <summary>
            Gets Master Peak Value
            </summary>
        </member>
        <member name="T:NAudio.Utils.FileAssociations">
            <summary>
            Helper class for registering Windows Explorer File associations
            </summary>
        </member>
        <member name="M:NAudio.Utils.FileAssociations.IsFileTypeRegistered(System.String)">
            <summary>
            Determines if the specified file type is registered
            </summary>
            <param name="extension">The file extension including the leading period (e.g. ".wav")</param>
            <returns>True if it is registered</returns>
        </member>
        <member name="M:NAudio.Utils.FileAssociations.GetFileTypeKey(System.String)">
            <summary>
            Gets the HKCR key name for the extenstion
            </summary>
            <param name="extension">The file extension including the leading period (e.g. ".wav")</param>
            <returns>The HKCR key name or null if not registered</returns>
        </member>
        <member name="M:NAudio.Utils.FileAssociations.RegisterFileType(System.String,System.String,System.String)">
            <summary>
            Registers a file type in Windows
            </summary>
            <param name="extension">Extension include leading '.'</param>
            <param name="description">The description of this file type</param>
            <param name="iconPath">Null for no icon or e.g c:\windows\regedit.exe,0</param>
        </member>
        <member name="M:NAudio.Utils.FileAssociations.AddAction(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new explorer context menu action for this file type
            Will overwrite any existing action with this key
            </summary>
            <param name="extension">The file extension (include the leading dot)</param>
            <param name="actionKey">A unique key for this action</param>
            <param name="actionDescription">What will appear on the context menu</param>
            <param name="command">The command to execute</param>
        </member>
        <member name="M:NAudio.Utils.FileAssociations.RemoveAction(System.String,System.String)">
            <summary>
            Removes an explorer context menu action from a file extension
            </summary>
            <param name="extension">The file extension (include the leading dot)</param>
            <param name="actionKey">The unique key used to register this action</param>
        </member>
        <member name="T:NAudio.Midi.SysexEvent">
            <summary>
            Represents a MIDI sysex message
            </summary>
        </member>
        <member name="F:NAudio.Midi.SysexEvent.data">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.SysexEvent.ReadSysexEvent(System.IO.BinaryReader)">
            <summary>
            Reads a sysex message from a MIDI stream
            </summary>
            <param name="br">Stream of MIDI data</param>
            <returns>a new sysex message</returns>
        </member>
        <member name="M:NAudio.Midi.SysexEvent.ToString">
            <summary>
            Describes this sysex message
            </summary>
            <returns>A string describing the sysex message</returns>
        </member>
        <member name="M:NAudio.Midi.SysexEvent.Export(System.Int64@,System.IO.BinaryWriter)">
            <summary>
            Calls base class export first, then exports the data
            specific to this event
            <seealso cref="M:NAudio.Midi.MidiEvent.Export(System.Int64@,System.IO.BinaryWriter)">MidiEvent.Export</seealso>
            </summary>
            <param name="absoluteTime">Absolute time used to calculate delta.
            Is updated ready for the next delta calculation</param>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="T:NAudio.Midi.MidiInterop">
            <summary>
            The midi interop
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.CALLBACK_FUNCTION">
            <summary>
            The field for the callback function
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.CALLBACK_NULL">
            <summary>
            The field for the null callback
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiInterop.midiConnect(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Midis the connect.
            </summary>
            <param name="hMidiIn">The h midi in.</param>
            <param name="hMidiOut">The h midi out.</param>
            <param name="pReserved">The p reserved.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd798446%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="M:NAudio.Midi.MidiInterop.midiDisconnect(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Midis the disconnect.
            </summary>
            <param name="hMidiIn">The h midi in.</param>
            <param name="hMidiOut">The h midi out.</param>
            <param name="pReserved">The p reserved.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd798447%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="M:NAudio.Midi.MidiInterop.midiInAddBuffer(System.IntPtr,NAudio.Midi.MidiInterop.MIDIHDR@,System.Int32)">
            <summary>
            Midis the in add buffer.
            </summary>
            <param name="hMidiIn">The h midi in.</param>
            <param name="lpMidiInHdr">The lp midi in HDR.</param>
            <param name="uSize">Size of the u.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd798450%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="T:NAudio.Midi.MidiInterop.MidiInCallback">
            <summary>
            The MIDI In Callback delegate
            </summary>
            <param name="midiInHandle">The MIDI In handle</param>
            <param name="message">The message.</param>
            <param name="userData">The user data.</param>
            <param name="messageParameter1">The message parameter 1</param>
            <param name="messageParameter2">The message parameter 2</param>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd798460%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="T:NAudio.Midi.MidiInterop.MidiOutCallback">
            <summary>
            The MIDI out callback delegate.
            </summary>
            <param name="midiInHandle">The MIDI in handle</param>
            <param name="message">The message</param>
            <param name="userData">The user data</param>
            <param name="messageParameter1">The message parameter 1</param>
            <param name="messageParameter2">The message parameter 2</param>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd798478%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="T:NAudio.Midi.MidiInterop.MidiInMessage">
            <summary>
            The MIDI In Message status
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MidiInMessage.Open">
            <summary>
            Originally known as MIM_OPEN
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MidiInMessage.Close">
            <summary>
            Originally known as MIM_CLOSE
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MidiInMessage.Data">
            <summary>
            Originally known as MIM_DATA
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MidiInMessage.LongData">
            <summary>
            Originally known as MIM_LONGDATA
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MidiInMessage.Error">
            <summary>
            Originally known as MIM_ERROR
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MidiInMessage.LongError">
            <summary>
            Originally known as MIM_LONGERROR
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MidiInMessage.MoreData">
            <summary>
            Originally known as MIM_MOREDATA
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiInterop.MidiOutMessage">
            <summary>
            The MIDI Out Message status
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MidiOutMessage.Open">
            <summary>
            Originally known as MOM_OPEN
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MidiOutMessage.Close">
            <summary>
            Originally known as MOM_CLOSE
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MidiOutMessage.Done">
            <summary>
            Originally known as MOM_DONE
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiInterop.MMTIME">
            <summary>
            The Multimedia Time Struct
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757347%28VS.85%29.aspx
            TODO: not sure this is right
            </remarks>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MMTIME.wType">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MMTIME.u">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiInterop.MIDIEVENT">
            <summary>
            The MIDI Event structure.
            </summary>
            <remarks>
            TODO: check for ANSI strings in these structs
            TODO: check for WORD params
            </remarks>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIEVENT.dwDeltaTime">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIEVENT.dwStreamID">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIEVENT.dwEvent">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIEVENT.dwParms">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiInterop.MIDIHDR">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd798449%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIHDR.lpData">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIHDR.dwBufferLength">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIHDR.dwBytesRecorded">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIHDR.dwUser">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIHDR.dwFlags">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIHDR.lpNext">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIHDR.reserved">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIHDR.dwOffset">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIHDR.dwReserved">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiInterop.MIDIPROPTEMPO">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIPROPTEMPO.cbStruct">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInterop.MIDIPROPTEMPO.dwTempo">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Gui.TrackView.AudioClip">
            <summary>
            Audio Clip
            </summary>
        </member>
        <member name="T:NAudio.Gui.TrackView.Clip">
            <summary>
            A trackview clip
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.Clip.name">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.Clip.foreColor">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.Clip.backColor">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.Clip.startTime">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.Clip.duration">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.Clip.#ctor(System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.TrackView.Clip"/> class.
            Creates a new trackview clip
            </summary>
            <param name="name">The name of the clip.</param>
            <param name="startTime">The start time.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="P:NAudio.Gui.TrackView.Clip.Name">
            <summary>
            Gets or sets the Clip Name
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.Clip.ForeColor">
            <summary>
            Gets or sets Foreground Colour
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.Clip.BackColor">
            <summary>
            Gets or sets Background Colour
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.Clip.StartTime">
            <summary>
            Gets or sets Start Time
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.Clip.Duration">
            <summary>
            Gets or sets The Duration
            </summary>
        </member>
        <member name="P:NAudio.Gui.TrackView.Clip.EndTime">
            <summary>
            Gets the End Time
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.AudioClip.sourceFileName">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.AudioClip.#ctor(System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.TrackView.AudioClip"/> class.
            Creates a new Audio Clip
            </summary>
            <param name="name">The name of the clip.</param>
            <param name="startTime">The start time.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="P:NAudio.Gui.TrackView.AudioClip.SourceFileName">
            <summary>
            Gets or sets Source File Name
            </summary>
        </member>
        <member name="T:NAudio.FileFormats.Ogg.vorbis_dsp_state">
            <summary>
            The vorbis_dsp_state
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.analysisp">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.vi">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.pcm">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.pcmret">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.pcm_storage">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.pcm_current">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.pcm_returned">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.preextrapolate">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.eofflag">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.lW">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.W">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.nW">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.centerW">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.granulepos">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.sequence">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.glue_bits">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.time_bits">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.floor_bits">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.res_bits">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.vorbis_dsp_state.backend_state">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.FileFormats.Map.MapBlockHeader">
            <summary>
            The map block header
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.MapBlockHeader.length">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.MapBlockHeader.value2">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.MapBlockHeader.value3">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.MapBlockHeader.value4">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.Map.MapBlockHeader.Read(System.IO.BinaryReader)">
            <summary>
            Reads the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.FileFormats.Map.MapBlockHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NAudio.FileFormats.Map.MapBlockHeader.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:NAudio.Effects.Delay">
            <summary>
            Implements a delay effect
            </summary>
        </member>
        <member name="F:NAudio.Effects.Delay.inStream">
            <summary>
            The field for the in stream.
            </summary>
        </member>
        <member name="M:NAudio.Effects.Delay.#ctor(NAudio.Wave.WaveStream)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Effects.Delay"/> class. 
            Creates a new delay effect
            </summary>
            <param name="inStream">
            The incoming audio data
            </param>
        </member>
        <member name="M:NAudio.Effects.Delay.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from this stream into a buffer
            </summary>
            <param name="buffer">Buffer to read into</param>
            <param name="offset">Offset to start at</param>
            <param name="length">Number of bytes to read</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:NAudio.Effects.Delay.GetReadSize(System.Int32)">
            <summary>
            Gets the recommended read size
            </summary>
            <param name="milliseconds">Number of milliseconds of audio to read</param>
            <returns>Recommended number of bytes to read</returns>
        </member>
        <member name="P:NAudio.Effects.Delay.WaveFormat">
            <summary>
            Returns the WaveFormat of this WaveStream
            </summary>
        </member>
        <member name="P:NAudio.Effects.Delay.Length">
            <summary>
            Returns the length of this stream
            </summary>
        </member>
        <member name="P:NAudio.Effects.Delay.Position">
            <summary>
            Returns our current position in the stream
            </summary>
        </member>
        <member name="P:NAudio.Effects.Delay.BlockAlign">
            <summary>
            Block alignment for this stream
            </summary>
        </member>
        <member name="T:NAudio.Dsp.SimpleGate">
            <summary>
            The simple gate
            </summary>
        </member>
        <member name="F:NAudio.Dsp.SimpleGate.threshdB">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dsp.SimpleGate.thresh">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dsp.SimpleGate.env">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Dsp.SimpleGate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Dsp.SimpleGate"/> class.
            </summary>
        </member>
        <member name="M:NAudio.Dsp.SimpleGate.Process(System.Double@,System.Double@)">
            <summary>
            Processes the specified in1.
            </summary>
            <param name="in1">The input parameter 1.</param>
            <param name="in2">The input parameter 2.</param>
        </member>
        <member name="P:NAudio.Dsp.SimpleGate.Threshold">
            <summary>
            Gets or sets the threshold.
            </summary>
            <value>The threshold.</value>
        </member>
        <member name="T:NAudio.Dmo.Resampler">
            <summary>
            The Resampler
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Resampler.mediaObject">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Resampler.propertyStoreInterface">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Resampler.resamplerPropsInterface">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.Resampler.mediaComObject">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Resampler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Dmo.Resampler"/> class. 
            Creates a new Resampler based on the DMO Resampler
            </summary>
        </member>
        <member name="M:NAudio.Dmo.Resampler.Dispose">
            <summary>
            Dispose code - experimental at the moment
            Was added trying to track down why Resampler crashes NUnit
            This code not currently being called by ResamplerDmoStream
            </summary>
        </member>
        <member name="P:NAudio.Dmo.Resampler.MediaObject">
            <summary>
            Gets Media Object
            </summary>
        </member>
        <member name="T:NAudio.Dmo.IWMResamplerProps">
            <summary>
            Windows Media Resampler Props
            wmcodecdsp.h
            </summary>
        </member>
        <member name="M:NAudio.Dmo.IWMResamplerProps.SetHalfFilterLength(System.Int32)">
            <summary>
            Range is 1 to 60
            </summary>
            <param name="outputQuality">The output quality.</param>
            <returns>The outcome of the call.</returns>
        </member>
        <member name="M:NAudio.Dmo.IWMResamplerProps.SetUserChannelMtx(System.Single[])">
            <summary>
            Sets the user channel MTX.
            </summary>
            <param name="channelConversionMatrix">The channel conversion matrix.</param>
            <returns>the outcome of the call.</returns>
        </member>
        <member name="T:NAudio.Dmo.DmoHResults">
            <summary>
            Defined in MediaErr.h
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoHResults.DMO_E_INVALIDSTREAMINDEX">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoHResults.DMO_E_INVALIDTYPE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoHResults.DMO_E_TYPE_NOT_SET">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoHResults.DMO_E_NOTACCEPTING">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoHResults.DMO_E_TYPE_NOT_ACCEPTED">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoHResults.DMO_E_NO_MORE_ITEMS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.CueWaveFileReader">
            <summary>
            A wave file reader supporting cue reading
            </summary>
        </member>
        <member name="F:NAudio.Wave.CueWaveFileReader.cues">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.CueWaveFileReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.CueWaveFileReader"/> class.
            Loads a wavefile and supports reading cues
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:NAudio.Wave.CueWaveFileReader.Cues">
            <summary>
            Gets Cue List (can be null if cues not present)
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveProvider16">
            <summary>
            Base class for creating a 16 bit wave provider
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveProvider16.waveFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveProvider16.#ctor">
            <summary>
            Initializes a new instance of the WaveProvider16 class 
            defaulting to 44.1kHz mono
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveProvider16.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the WaveProvider16 class with the specified
            sample rate and number of channels
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="channels">The channels.</param>
        </member>
        <member name="M:NAudio.Wave.WaveProvider16.SetWaveFormat(System.Int32,System.Int32)">
            <summary>
            Allows you to specify the sample rate and channels for this WaveProvider
            (should be initialised before you pass it to a wave player)
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="channels">The channels.</param>
        </member>
        <member name="M:NAudio.Wave.WaveProvider16.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Implements the Read method of IWaveProvider by delegating to the abstract
            Read method taking a short array
            </summary>
            <param name="buffer">The buffer to fill of wave data.</param>
            <param name="offset">Offset into buffer</param>
            <param name="count">The number of bytes to read</param>
            <returns>
            the number of bytes written to the buffer.
            </returns>
        </member>
        <member name="M:NAudio.Wave.WaveProvider16.Read(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Method to override in derived classes
            Supply the requested number of samples into the buffer
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="sampleCount">The sample count.</param>
            <returns>The number of bytes read from the buffer.</returns>
        </member>
        <member name="P:NAudio.Wave.WaveProvider16.WaveFormat">
            <summary>
            Gets The Wave Format
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveOutputs.WaveOutThreadSafe">
            <summary>
            Represents a wave out device
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.hWaveOut">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.buffers">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.waveStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.numBuffers">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.playbackState">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.callback">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.devNumber">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.desiredLatency">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.volume">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.buffersQueued">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.waveOutThread">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.actionQueue">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.workAvailable">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveOutputs.WaveOutThreadSafe"/> class. 
            Opens a WaveOut device
            </summary>
            <param name="devNumber">
            This is the device number to open. 
            This must be between 0 and <see>DeviceCount</see> - 1.
            </param>
            <param name="desiredLatency">
            The number of milliseconds of audio to read before 
            streaming to the audio device. This will be broken into 3 buffers
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NAudio.Wave.WaveOutputs.WaveOutThreadSafe"/> class. 
            Finalizer. Only called when user forgets to call <see>Dispose</see>
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.GetCapabilities(System.Int32)">
            <summary>
            Retrieves the capabilities of a waveOut device
            </summary>
            <param name="devNumber">Device to test</param>
            <returns>The WaveOut device capabilities</returns>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.Init(NAudio.Wave.IWaveProvider)">
            <summary>
            Initialises the WaveOut device
            </summary>
            <param name="waveProvider">Wave provider to play</param>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.Play">
            <summary>
            Start playing the audio from the WaveStream
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.Pause">
            <summary>
            Pause the audio
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.Resume">
            <summary>
            Resume playing after a pause from the same position
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.Stop">
            <summary>
            Stop and reset the WaveOut device
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.Dispose">
            <summary>
            Closes this WaveOut device
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.Dispose(System.Boolean)">
            <summary>
            Closes the WaveOut device and disposes of buffers
            </summary>
            <param name="disposing">True if called from <see>Dispose</see></param>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.ThreadProc">
            <summary>
            Threads the proc.
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.Exit">
            <summary>
            Exits this instance.
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.SetVolume(System.Int32)">
            <summary>
            Sets the volume.
            </summary>
            <param name="stereoVolume">The stereo volume.</param>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.Callback(System.IntPtr,NAudio.Wave.MmeInterop.WaveInterop.WaveMessage,System.IntPtr,NAudio.Wave.WaveHeader,System.IntPtr)">
            <summary>
            made non-static so that playing can be stopped here
            </summary>
            <param name="hWaveOut">The h wave out.</param>
            <param name="uMsg">The u MSG.</param>
            <param name="dwUser">The dw user.</param>
            <param name="wavhdr">The wavhdr.</param>
            <param name="dwReserved">The dw reserved.</param>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.OnBufferDone(NAudio.Wave.WaveOutBuffer)">
            <summary>
            Called when [buffer done].
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.RaisePlaybackStopped">
            <summary>
            Raises the playback stopped.
            </summary>
        </member>
        <member name="E:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.PlaybackStopped">
            <summary>
            Playback stopped
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.DeviceCount">
            <summary>
            Gets Returns the number of Wave Out devices available in the system
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.PlaybackState">
            <summary>
            Gets Playback State
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOutputs.WaveOutThreadSafe.Volume">
            <summary>
            Gets or sets Volume for this device 1.0 is full scale
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveFormats.WmaWaveFormat">
            <summary>
            The WMA wave format. 
            May not be much use because WMA codec is a DirectShow DMO not an ACM
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormats.WmaWaveFormat.wValidBitsPerSample">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormats.WmaWaveFormat.dwChannelMask">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormats.WmaWaveFormat.dwReserved1">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormats.WmaWaveFormat.dwReserved2">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormats.WmaWaveFormat.wEncodeOptions">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFormats.WmaWaveFormat.wReserved3">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFormats.WmaWaveFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveFormats.WmaWaveFormat"/> class.
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="bitsPerSample">The bits per sample.</param>
            <param name="channels">The channels.</param>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmStreamHeaderStruct">
            <summary>
            Interop structure for ACM stream headers.
            ACMSTREAMHEADER 
            http://msdn.microsoft.com/en-us/library/dd742926%28VS.85%29.aspx
            </summary>    
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeaderStruct.cbStruct">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeaderStruct.fdwStatus">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeaderStruct.userData">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeaderStruct.sourceBufferPointer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeaderStruct.sourceBufferLength">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeaderStruct.sourceBufferLengthUsed">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeaderStruct.sourceUserData">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeaderStruct.destBufferPointer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeaderStruct.destBufferLength">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeaderStruct.destBufferLengthUsed">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeaderStruct.destUserData">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStreamHeaderStruct.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Compression.AcmStreamHeaderStruct"/> class.
            </summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmStreamHeader">
            <summary>
            The acm stream header
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeader.streamHeader">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeader.sourceBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeader.hSourceBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeader.destBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeader.hDestBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeader.streamHandle">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeader.firstTime">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeader.disposed">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStreamHeader.#ctor(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Compression.AcmStreamHeader"/> class.
            </summary>
            <param name="streamHandle">The stream handle.</param>
            <param name="sourceBufferLength">Length of the source buffer.</param>
            <param name="destBufferLength">Length of the dest buffer.</param>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStreamHeader.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NAudio.Wave.Compression.AcmStreamHeader"/> class.  Releases unmanaged resources and performs other cleanup operations before the <see cref="T:NAudio.Wave.Compression.AcmStreamHeader"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStreamHeader.Convert(System.Int32,System.Int32@)">
            <summary>
            Converts the specified bytes to convert.
            </summary>
            <param name="bytesToConvert">The bytes to convert.</param>
            <param name="sourceBytesConverted">The source bytes converted.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStreamHeader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStreamHeader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStreamHeader.Prepare">
            <summary>
            Prepares this instance.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStreamHeader.Unprepare">
            <summary>
            Unprepares this instance.
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmStreamHeader.SourceBuffer">
            <summary>
            Gets the source buffer.
            </summary>
            <value>The source buffer.</value>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmStreamHeader.DestBuffer">
            <summary>
            Gets the dest buffer.
            </summary>
            <value>The dest buffer.</value>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IComMultimediaDeviceEnumerator">
            <summary>
            Represents the COM IMMDeviceEnumerator.
            </summary>
            <remarks>
            Originally known as IMMDeviceEnumerator.
            </remarks>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IComMultimediaDeviceEnumerator.EnumAudioEndpoints(NAudio.CoreAudioApi.DataFlow,NAudio.CoreAudioApi.DeviceState,NAudio.CoreAudioApi.Interfaces.IComMultimediaDeviceCollection@)">
            <summary>
            Enums the audio endpoints.
            </summary>
            <param name="dataFlow">The data flow.</param>
            <param name="stateMask">The state mask.</param>
            <param name="devices">The devices.</param>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IComMultimediaDeviceEnumerator.GetDefaultAudioEndpoint(NAudio.CoreAudioApi.DataFlow,NAudio.CoreAudioApi.Role,NAudio.CoreAudioApi.Interfaces.IComMultimediaDevice@)">
            <summary>
            Gets the default audio endpoint.
            </summary>
            <param name="dataFlow">The data flow.</param>
            <param name="role">The role of the device.</param>
            <param name="device">The device.</param>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IComMultimediaDeviceEnumerator.GetDevice(System.String,NAudio.CoreAudioApi.Interfaces.IComMultimediaDevice@)">
            <summary>
            Gets the device.
            </summary>
            <param name="id">The id of the device.</param>
            <param name="deviceName">Name of the device.</param>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IComMultimediaDeviceEnumerator.RegisterEndpointNotificationCallback(NAudio.CoreAudioApi.Interfaces.IMMNotificationClient)">
            <summary>
            Registers the endpoint notification callback.
            </summary>
            <param name="client">The client.</param>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IComMultimediaDeviceEnumerator.UnregisterEndpointNotificationCallback(NAudio.CoreAudioApi.Interfaces.IMMNotificationClient)">
            <summary>
            Unregisters the endpoint notification callback.
            </summary>
            <param name="client">The client.</param>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="T:NAudio.Utils.ProgressEventArgs">
            <summary>
            Progress Event Arguments
            </summary>
        </member>
        <member name="F:NAudio.Utils.ProgressEventArgs.message">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.ProgressEventArgs.messageType">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Utils.ProgressEventArgs.#ctor(NAudio.Utils.ProgressMessageType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Utils.ProgressEventArgs"/> class. 
            New progress event arguments
            </summary>
            <param name="messageType">
            The message type
            </param>
            <param name="message">
            The message
            </param>
        </member>
        <member name="M:NAudio.Utils.ProgressEventArgs.#ctor(NAudio.Utils.ProgressMessageType,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Utils.ProgressEventArgs"/> class. 
            New progress event arguments
            </summary>
            <param name="messageType">
            The message type
            </param>
            <param name="message">
            the message format string
            </param>
            <param name="args">
            format arguments
            </param>
        </member>
        <member name="P:NAudio.Utils.ProgressEventArgs.Message">
            <summary>
            Gets The message
            </summary>
        </member>
        <member name="P:NAudio.Utils.ProgressEventArgs.MessageType">
            <summary>
            Gets The message type
            </summary>
        </member>
        <member name="T:NAudio.Utils.HResult">
            <summary>
            The HResult
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.S_OK">
            <summary>
            Originally known as S_OK
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.S_FALSE">
            <summary>
            Originally known as S_FALSE
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.E_INVALIDARG">
            <summary>
            E_INVALIDARG (from winerror.h)
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_AAF">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_ACS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_BACKGROUNDCOPY">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_CERT">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_COMPLUS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_CONFIGURATION">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_CONTROL">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_DISPATCH">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_DPLAY">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_HTTP">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_INTERNET">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_ITF">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_MEDIASERVER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_MSMQ">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_NULL">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_RPC">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_SCARD">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_SECURITY">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_SETUPAPI">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_SSPI">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_STORAGE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_SXS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_UMI">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_URT">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_WIN32">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_WINDOWS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.HResult.FACILITY_WINDOWS_CE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Utils.HResult.MAKE_HRESULT(System.Int32,System.Int32,System.Int32)">
            <summary>
            MAKE_HRESULT macro
            </summary>
            <param name="sev">The severity.</param>
            <param name="fac">The facility.</param>
            <param name="code">The error code.</param>
            <returns>The result of the call.</returns>
        </member>
        <member name="T:NAudio.Utils.HChangeNotifyEventID">
            <summary>
            Describes the event that has occurred.
            Typically, only one event is specified at a time.
            If more than one event is specified, the values contained
            in the <i>dwItem1</i> and <i>dwItem2</i>
            parameters must be the same, respectively, for all specified events.
            This parameter can be one or more of the following values.
            </summary>
            <remarks>
            <para><b>Windows NT/2000/XP:</b> <i>dwItem2</i> contains the index
            in the system image list that has changed.
            <i>dwItem1</i> is not used and should be <see langword="null"/>.</para>
            <para><b>Windows 95/98:</b> <i>dwItem1</i> contains the index
            in the system image list that has changed.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.</para>
            </remarks>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_ALLEVENTS">
            <summary>
            All events have occurred.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_ASSOCCHANGED">
            <summary>
            A file type association has changed. <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/>
            must be specified in the <i>uFlags</i> parameter.
            <i>dwItem1</i> and <i>dwItem2</i> are not used and must be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_ATTRIBUTES">
            <summary>
            The attributes of an item or folder have changed.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the item or folder that has changed.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_CREATE">
            <summary>
            A nonfolder item has been created.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the item that was created.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_DELETE">
            <summary>
            A nonfolder item has been deleted.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the item that was deleted.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_DRIVEADD">
            <summary>
            A drive has been added.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the root of the drive that was added.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_DRIVEADDGUI">
            <summary>
            A drive has been added and the Shell should create a new window for the drive.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the root of the drive that was added.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_DRIVEREMOVED">
            <summary>
            A drive has been removed. <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the root of the drive that was removed.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_EXTENDED_EVENT">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_FREESPACE">
            <summary>
            The amount of free space on a drive has changed.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the root of the drive on which the free space changed.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_MEDIAINSERTED">
            <summary>
            Storage media has been inserted into a drive.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the root of the drive that contains the new media.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_MEDIAREMOVED">
            <summary>
            Storage media has been removed from a drive.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the root of the drive from which the media was removed.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_MKDIR">
            <summary>
            A folder has been created. <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/>
            or <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the folder that was created.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_NETSHARE">
            <summary>
            A folder on the local computer is being shared via the network.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the folder that is being shared.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_NETUNSHARE">
            <summary>
            A folder on the local computer is no longer being shared via the network.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the folder that is no longer being shared.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_RENAMEFOLDER">
            <summary>
            The name of a folder has changed.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the previous pointer to an item identifier list (PIDL) or name of the folder.
            <i>dwItem2</i> contains the new PIDL or name of the folder.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_RENAMEITEM">
            <summary>
            The name of a nonfolder item has changed.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the previous PIDL or name of the item.
            <i>dwItem2</i> contains the new PIDL or name of the item.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_RMDIR">
            <summary>
            A folder has been removed.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the folder that was removed.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_SERVERDISCONNECT">
            <summary>
            The computer has disconnected from a server.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the server from which the computer was disconnected.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_UPDATEDIR">
            <summary>
            The contents of an existing folder have changed,
            but the folder still exists and has not been renamed.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_IDLIST"/> or
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_PATHA"/> must be specified in <i>uFlags</i>.
            <i>dwItem1</i> contains the folder that has changed.
            <i>dwItem2</i> is not used and should be <see langword="null"/>.
            If a folder has been created, deleted, or renamed, use SHCNE_MKDIR, SHCNE_RMDIR, or
            SHCNE_RENAMEFOLDER, respectively, instead.
            </summary>
        </member>
        <member name="F:NAudio.Utils.HChangeNotifyEventID.SHCNE_UPDATEIMAGE">
            <summary>
            An image in the system image list has changed.
            <see cref="F:NAudio.Utils.HChangeNotifyFlags.SHCNF_DWORD"/> must be specified in <i>uFlags</i>.
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerInterop">
            <summary>
            The mixer interop
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROL_CONTROLF_UNIFORM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROL_CONTROLF_MULTIPLE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROL_CONTROLF_DISABLED">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MAXPNAMELEN">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXER_SHORT_NAME_CHARS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXER_LONG_NAME_CHARS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerInterop.MIXERLINE_LINEF">
            <summary>
            Mixer Line Flags
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE_LINEF.MIXERLINE_LINEF_ACTIVE">
            <summary>
            Audio line is active. An active line indicates that a signal is probably passing 
            through the line.
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE_LINEF.MIXERLINE_LINEF_DISCONNECTED">
            <summary>
            Audio line is disconnected. A disconnected line's associated controls can still be 
            modified, but the changes have no effect until the line is connected.
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE_LINEF.MIXERLINE_LINEF_SOURCE">
            <summary>
            Audio line is an audio source line associated with a single audio destination line. 
            If this flag is not set, this line is an audio destination line associated with zero 
            or more audio source lines.
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757294%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS.cbStruct">
            <summary>
            size of the MIXERCONTROLDETAILS structure
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS.dwControlID">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS.cChannels">
            <summary>
            Number of channels on which to get or set control properties
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS.hwndOwner">
            <summary>
            Union with DWORD cMultipleItems
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS.cbDetails">
            <summary>
            Size of the paDetails Member
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS.paDetails">
            <summary>
            Otherwise known as LPVOID
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerInterop.MIXERCAPS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757291%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCAPS.wMid">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCAPS.wPid">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCAPS.vDriverVersion">
            <summary>
            MMVERSION - major high byte, minor low byte
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCAPS.szPname">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCAPS.fdwSupport">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCAPS.cDestinations">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerInterop.MIXERLINECONTROLS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757306%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINECONTROLS.cbStruct">
            <summary>
            size of the MIXERLINECONTROLS structure
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINECONTROLS.dwLineID">
            <summary>
            Line identifier for which controls are being queried
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINECONTROLS.dwControlID">
            <summary>
            union with UInt32 dwControlType
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINECONTROLS.cControls">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINECONTROLS.cbmxctrl">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINECONTROLS.pamxctrl">
            <summary>
            see MSDN "Structs Sample"
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerInterop.MIXERLINE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757305%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.cbStruct">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.dwDestination">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.dwSource">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.dwLineID">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.fdwLine">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.dwUser">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.dwComponentType">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.cChannels">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.cConnections">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.cControls">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.szShortName">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.szName">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.dwType">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            Part of the 'Target' struct.
            </remarks>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.dwDeviceID">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            Part of the 'Target' struct.
            </remarks>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.wMid">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            Part of the 'Target' struct.
            </remarks>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.wPid">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            Part of the 'Target' struct.
            </remarks>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.vDriverVersion">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            Part of the 'Target' struct.
            </remarks>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERLINE.szPname">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            Part of the 'Target' struct.
            </remarks>
        </member>
        <member name="T:NAudio.Mixer.MixerInterop.Bounds">
            <summary>
            BOUNDS structure
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.Bounds.minimum">
            <summary>
            dwMinimum / lMinimum / reserved 0
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.Bounds.maximum">
            <summary>
            dwMaximum / lMaximum / reserved 1
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.Bounds.reserved2">
            <summary>
            reserved 2
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.Bounds.reserved3">
            <summary>
            reserved 3
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.Bounds.reserved4">
            <summary>
            reserved 4
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.Bounds.reserved5">
            <summary>
            reserved 5
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerInterop.Metrics">
            <summary>
            METRICS structure
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.Metrics.step">
            <summary>
            cSteps / reserved[0]
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.Metrics.customData">
            <summary>
            cbCustomData / reserved[1], number of bytes for control details
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.Metrics.reserved2">
            <summary>
            reserved 2
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.Metrics.reserved3">
            <summary>
            reserved 3
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.Metrics.reserved4">
            <summary>
            reserved 4
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.Metrics.reserved5">
            <summary>
            reserved 5
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerInterop.MIXERCONTROL">
            <summary>
            MIXERCONTROL struct
            http://msdn.microsoft.com/en-us/library/dd757293%28VS.85%29.aspx
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROL.cbStruct">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROL.dwControlID">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROL.dwControlType">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROL.fdwControl">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROL.cMultipleItems">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROL.szShortName">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROL.szName">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROL.Bounds">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROL.Metrics">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS_BOOLEAN">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757295%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS_BOOLEAN.fValue">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS_SIGNED">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757297%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS_SIGNED.lValue">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS_LISTTEXT">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757296%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS_LISTTEXT.dwParam1">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS_LISTTEXT.dwParam2">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS_LISTTEXT.szName">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS_UNSIGNED">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/dd757298%28VS.85%29.aspx
            </remarks>
        </member>
        <member name="F:NAudio.Mixer.MixerInterop.MIXERCONTROLDETAILS_UNSIGNED.dwValue">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiOutCapabilities">
            <summary>
            class representing the capabilities of a MIDI out device
            MIDIOUTCAPS: http://msdn.microsoft.com/en-us/library/dd798467%28VS.85%29.aspx
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutCapabilities.MaxProductNameLength">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutCapabilities.manufacturerId">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutCapabilities.productId">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutCapabilities.driverVersion">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutCapabilities.productName">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutCapabilities.wTechnology">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutCapabilities.wVoices">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutCapabilities.wNotes">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutCapabilities.wChannelMask">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutCapabilities.dwSupport">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiOutCapabilities.SupportsChannel(System.Int32)">
            <summary>
            Queries whether a particular channel is supported
            </summary>
            <param name="channel">Channel number to test</param>
            <returns>True if the channel is supported</returns>
        </member>
        <member name="P:NAudio.Midi.MidiOutCapabilities.Manufacturer">
            <summary>
            Gets the manufacturer of this device
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiOutCapabilities.ProductId">
            <summary>
            Gets the product identifier (manufacturer specific)
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiOutCapabilities.ProductName">
            <summary>
            Gets the product name
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiOutCapabilities.Voices">
            <summary>
            Gets Returns the number of supported voices
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiOutCapabilities.Notes">
            <summary>
            Gets the polyphony of the device
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiOutCapabilities.SupportsAllChannels">
            <summary>
            Gets a value indicating whether Returns true if the device supports all channels
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiOutCapabilities.SupportsPatchCaching">
            <summary>
            Gets a value indicating whether Returns true if the device supports patch caching
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiOutCapabilities.SupportsSeparateLeftAndRightVolume">
            <summary>
            Gets a value indicating whether Returns true if the device supports separate left and right volume
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiOutCapabilities.SupportsMidiStreamOut">
            <summary>
            Gets a value indicating whether Returns true if the device supports MIDI stream out
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiOutCapabilities.SupportsVolumeControl">
            <summary>
            Gets a value indicating whether Returns true if the device supports volume control
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiOutCapabilities.Technology">
            <summary>
            Gets Returns the type of technology used by this MIDI out device
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiOutCapabilities.MidiOutCapabilityFlags">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutCapabilities.MidiOutCapabilityFlags.Volume">
            <summary>
            Originally known as MIDICAPS_VOLUME
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutCapabilities.MidiOutCapabilityFlags.LeftRightVolume">
            <summary>
            <para>separate left-right volume control</para>
            Originally known as MIDICAPS_LRVOLUME
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutCapabilities.MidiOutCapabilityFlags.PatchCaching">
            <summary>
            Originally known as MIDICAPS_CACHE
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutCapabilities.MidiOutCapabilityFlags.Stream">
            <summary>
            MIDICAPS_STREAM
            driver supports midiStreamOut directly
            </summary>
        </member>
        <member name="T:NAudio.Midi.MetaEventType">
            <summary>
            MIDI MetaEvent Type
            </summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.TrackSequenceNumber">
            <summary>Track sequence number</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.TextEvent">
            <summary>Text event</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.Copyright">
            <summary>Copyright option.</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.SequenceTrackName">
            <summary>Sequence track name</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.TrackInstrumentName">
            <summary>Track instrument name</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.Lyric">
            <summary>Lyric option.</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.Marker">
            <summary>Marker option.</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.CuePoint">
            <summary>Cue point option.</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.ProgramName">
            <summary>Program (patch) name</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.DeviceName">
            <summary>Device (port) name</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.MidiChannel">
            <summary>MIDI Channel (not official?)</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.MidiPort">
            <summary>MIDI Port (not official?)</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.EndTrack">
            <summary>End track option.</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.SetTempo">
            <summary>Set tempo option.</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.SmpteOffset">
            <summary>SMPTE offset</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.TimeSignature">
            <summary>Time signature</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.KeySignature">
            <summary>Key signature</summary>
        </member>
        <member name="F:NAudio.Midi.MetaEventType.SequencerSpecific">
            <summary>Sequencer specific</summary>
        </member>
        <member name="T:NAudio.SoundFont.InstrumentBuilder">
            <summary>
            Instrument Builder
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.InstrumentBuilder.lastInstrument">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.InstrumentBuilder.Read(System.IO.BinaryReader)">
            <summary>
            Reads the specified br.
            </summary>
            <param name="br">The binary reader.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.SoundFont.InstrumentBuilder.Write(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes the specified bw.
            </summary>
            <param name="bw">The binary writer.</param>
            <param name="o">The object.</param>
        </member>
        <member name="M:NAudio.SoundFont.InstrumentBuilder.LoadZones(NAudio.SoundFont.Zone[])">
            <summary>
            Loads the zones.
            </summary>
            <param name="zones">The zones.</param>
        </member>
        <member name="P:NAudio.SoundFont.InstrumentBuilder.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:NAudio.SoundFont.InstrumentBuilder.Instruments">
            <summary>
            Gets the instruments.
            </summary>
            <value>The instruments.</value>
        </member>
        <member name="T:NAudio.FileFormats.Sfz.Group">
            <summary>
            The group class.
            </summary>
        </member>
        <member name="T:NAudio.Dsp.ShiftBuffer">
            <summary>
            A shift buffer
            </summary>
        </member>
        <member name="F:NAudio.Dsp.ShiftBuffer.list">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dsp.ShiftBuffer.insertPos">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dsp.ShiftBuffer.size">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Dsp.ShiftBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Dsp.ShiftBuffer"/> class.
            creates a new shift buffer
            </summary>
            <param name="size">The size of the buffer.</param>
        </member>
        <member name="M:NAudio.Dsp.ShiftBuffer.Add(System.Double[])">
            <summary>
            Add samples to the buffer
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:NAudio.Dsp.ShiftBuffer.Item(System.Int32)">
            <summary>
            Return samples from the buffer
            </summary>
            <param name="index">The index to get.</param>
            <value>An array of values</value>
        </member>
        <member name="T:NAudio.Dmo.MediaObject">
            <summary>
            Media Object
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaObject.mediaObject">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaObject.inputStreams">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaObject.outputStreams">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.#ctor(NAudio.Dmo.IMediaObject)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Dmo.MediaObject"/> class. 
            Creates a new Media Object
            </summary>
            <param name="mediaObject">
            Media Object COM interface
            </param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetInputType(System.Int32,System.Int32)">
            <summary>
            Gets the input media type for the specified input stream
            </summary>
            <param name="inputStream">Input stream index</param>
            <param name="inputTypeIndex">Input type index</param>
            <returns>DMO Media Type or null if there are no more input types</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetOutputType(System.Int32,System.Int32)">
            <summary>
            Gets the DMO Media Output type
            </summary>
            <param name="outputStream">The output stream</param>
            <param name="outputTypeIndex">Output type index</param>
            <returns>DMO Media Type or null if no more available</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetInputTypes(System.Int32)">
            <summary>
            Enumerates the supported input types
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <returns>Enumeration of input types</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetOutputTypes(System.Int32)">
            <summary>
            Enumerates the output types
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <returns>Enumeration of supported output types</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SupportsInputType(System.Int32,NAudio.Dmo.DmoMediaType)">
            <summary>
            Querys whether a specified input type is supported
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="mediaType">Media type to check</param>
            <returns>true if supports</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SetInputType(System.Int32,NAudio.Dmo.DmoMediaType)">
            <summary>
            Sets the input type
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="mediaType">Media Type</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SetInputWaveFormat(System.Int32,NAudio.Wave.WaveFormat)">
            <summary>
            Sets the input type to the specified Wave format
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="waveFormat">Wave format</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SupportsInputWaveFormat(System.Int32,NAudio.Wave.WaveFormat)">
            <summary>
            Requests whether the specified Wave format is supported as an input
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="waveFormat">Wave format</param>
            <returns>true if supported</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SupportsOutputType(System.Int32,NAudio.Dmo.DmoMediaType)">
            <summary>
            Checks if a specified output type is supported
            n.b. you may need to set the input type first
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <param name="mediaType">Media type</param>
            <returns>True if supported</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SupportsOutputWaveFormat(System.Int32,NAudio.Wave.WaveFormat)">
            <summary>
            Tests if the specified Wave Format is supported for output
            n.b. may need to set the input type first
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <param name="waveFormat">Wave format</param>
            <returns>True if supported</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SetOutputType(System.Int32,NAudio.Dmo.DmoMediaType)">
            <summary>
            Sets the output type
            n.b. may need to set the input type first
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <param name="mediaType">Media type to set</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SetOutputWaveFormat(System.Int32,NAudio.Wave.WaveFormat)">
            <summary>
            Set output type to the specified wave format
            n.b. may need to set input type first
            </summary>
            <param name="outputStreamIndex">Output stream index</param>
            <param name="waveFormat">Wave format</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetInputSizeInfo(System.Int32)">
            <summary>
            Get Input Size Info
            </summary>
            <param name="inputStreamIndex">Input Stream Index</param>
            <returns>Input Size Info</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetOutputSizeInfo(System.Int32)">
            <summary>
            Get Output Size Info
            </summary>
            <param name="outputStreamIndex">Output Stream Index</param>
            <returns>Output Size Info</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.ProcessInput(System.Int32,NAudio.Dmo.IMediaBuffer,NAudio.Dmo.DmoInputDataBufferFlags,System.Int64,System.Int64)">
            <summary>
            Process Input
            </summary>
            <param name="inputStreamIndex">Input Stream index</param>
            <param name="mediaBuffer">Media Buffer</param>
            <param name="flags">The buffer Flags</param>
            <param name="timestamp">The Timestamp</param>
            <param name="duration">The Duration</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.ProcessOutput(NAudio.Dmo.DmoProcessOutputFlags,System.Int32,NAudio.Dmo.DmoOutputDataBuffer[])">
            <summary>
            Process Output
            </summary>
            <param name="flags">The output Flags</param>
            <param name="outputBufferCount">Output buffer count</param>
            <param name="outputBuffers">Output buffers</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.AllocateStreamingResources">
            <summary>
            Gives the DMO a chance to allocate any resources needed for streaming
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.FreeStreamingResources">
            <summary>
            Tells the DMO to free any resources needed for streaming
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.GetInputMaxLatency(System.Int32)">
            <summary>
            Gets maximum input latency
            </summary>
            <param name="inputStreamIndex">input stream index</param>
            <returns>Maximum input latency as a ref-time</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.Flush">
            <summary>
            Flushes all buffered data
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.Discontinuity(System.Int32)">
            <summary>
            Report a discontinuity on the specified input stream
            </summary>
            <param name="inputStreamIndex">Input Stream index</param>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.IsAcceptingData(System.Int32)">
            <summary>
            Is this input stream accepting data?
            </summary>
            <param name="inputStreamIndex">Input Stream index</param>
            <returns>true if accepting data</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.Dispose">
            <summary>
            Experimental code, not currently being called
            Not sure if it is necessary anyway
            </summary>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SetOutputType(System.Int32,NAudio.Dmo.DmoMediaType,NAudio.Dmo.DmoSetTypeFlags)">
            <summary>
            Helper method to call SetOutputType
            </summary>
            <param name="outputStreamIndex">Index of the output stream.</param>
            <param name="mediaType">Type of the media.</param>
            <param name="flags">The flags.</param>
            <returns>The result of the call.</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.SetInputType(System.Int32,NAudio.Dmo.DmoMediaType,NAudio.Dmo.DmoSetTypeFlags)">
            <summary>
            Sets the input type helper method
            </summary>
            <param name="inputStreamIndex">Input stream index</param>
            <param name="mediaType">Media type</param>
            <param name="flags">Flags (can be used to test rather than set)</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:NAudio.Dmo.MediaObject.CreateDmoMediaTypeForWaveFormat(NAudio.Wave.WaveFormat)">
            <summary>
            Helper function to make a DMO Media Type to represent a particular WaveFormat
            </summary>
            <param name="waveFormat">The wave format.</param>
            <returns>The DMO Media Type</returns>
        </member>
        <member name="P:NAudio.Dmo.MediaObject.InputStreamCount">
            <summary>
            Gets Number of input streams
            </summary>
        </member>
        <member name="P:NAudio.Dmo.MediaObject.OutputStreamCount">
            <summary>
            Gets Number of output streams
            </summary>
        </member>
        <member name="T:NAudio.Daw.TempoMap">
            <summary>
            The Tempo map class
            </summary>
        </member>
        <member name="F:NAudio.Daw.TempoMap.tempos">
            <summary>
            The list of tempos
            </summary>
        </member>
        <member name="M:NAudio.Daw.TempoMap.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Daw.TempoMap"/> class. 
            Create a new tempo map
            </summary>
            <param name="startTempo">
            Initial tempo
            </param>
        </member>
        <member name="T:NAudio.Wave.WaveOutBuffer">
            <summary>
            A buffer of Wave samples for streaming to a Wave Output device
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutBuffer.header">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutBuffer.bufferSize">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutBuffer.buffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutBuffer.hBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutBuffer.hWaveOut">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutBuffer.hHeader">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutBuffer.hThis">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutBuffer.waveStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutBuffer.waveOutLock">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOutBuffer.#ctor(System.IntPtr,System.Int32,NAudio.Wave.IWaveProvider,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveOutBuffer"/> class. 
            creates a new wavebuffer
            </summary>
            <param name="hWaveOut">
            WaveOut device to write to
            </param>
            <param name="bufferSize">
            Buffer size in bytes
            </param>
            <param name="bufferFillStream">
            Stream to provide more data
            </param>
            <param name="waveOutLock">
            Lock to protect WaveOut API's from being called on &gt;1 thread
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveOutBuffer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NAudio.Wave.WaveOutBuffer"/> class. 
            Finalizer for this wave buffer
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOutBuffer.Dispose">
            <summary>
            Releases resources held by this WaveBuffer
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOutBuffer.OnDone">
            <summary>
            Called when [done].  this is called by the WAVE callback and should be used to refill the buffer
            </summary>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Wave.WaveOutBuffer.Dispose(System.Boolean)">
            <summary>
            Releases resources held by this WaveBuffer
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Wave.WaveOutBuffer.WriteToWaveOut">
            <summary>
            Writes to wave out.
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOutBuffer.BufferSize">
            <summary>
            Gets The buffer size in bytes
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOutBuffer.InQueue">
            <summary>
            Gets a value indicating whether Whether the header's in queue flag is set
            </summary>
        </member>
        <member name="T:NAudio.Wave.Cue">
            <summary>
            Holds information on a cue: a labeled position within a Wave file
            </summary>
        </member>
        <member name="M:NAudio.Wave.Cue.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Cue"/> class.
            Creates a Cue based on a sample position and label
            </summary>
            <param name="position">The position.</param>
            <param name="label">The label.</param>
        </member>
        <member name="P:NAudio.Wave.Cue.Position">
            <summary>
            Gets Cue position in samples
            </summary>
        </member>
        <member name="P:NAudio.Wave.Cue.Label">
            <summary>
            Gets Label of the cue
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveOutputs.WaveOutAction">
            <summary>
            The wave out action
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOutputs.WaveOutAction.#ctor(NAudio.Wave.WaveOutFunction,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveOutputs.WaveOutAction"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="data">The data of this wave out.</param>
        </member>
        <member name="P:NAudio.Wave.WaveOutputs.WaveOutAction.Function">
            <summary>
            Gets the function.
            </summary>
            <value>The function.</value>
        </member>
        <member name="P:NAudio.Wave.WaveOutputs.WaveOutAction.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data of this wave out.</value>
        </member>
        <member name="T:NAudio.Wave.WaveOut">
            <summary>
            Represents a wave out device
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOut.hWaveOut">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOut.buffers">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOut.waveStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOut.playbackState">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOut.callback">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOut.volume">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOut.callbackInfo">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOut.waveOutLock">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOut.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveOut"/> class. 
            Creates a default WaveOut device
            WARNING: only use this constructor on a GUI thread
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOut.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveOut"/> class. 
            Creates a WaveOut device using the specified window handle for callbacks
            </summary>
            <param name="windowHandle">
            A valid window handle
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveOut.#ctor(NAudio.Wave.WaveCallbackInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveOut"/> class.
            Opens a WaveOut device
            </summary>
            <param name="callbackInfo">The callback info.</param>
        </member>
        <member name="M:NAudio.Wave.WaveOut.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NAudio.Wave.WaveOut"/> class. 
            Finalizer. Only called when user forgets to call <see>Dispose</see>
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOut.GetCapabilities(System.Int32)">
            <summary>
            Retrieves the capabilities of a waveOut device
            </summary>
            <param name="devNumber">Device to test</param>
            <returns>The WaveOut device capabilities</returns>
        </member>
        <member name="M:NAudio.Wave.WaveOut.Init(NAudio.Wave.IWaveProvider)">
            <summary>
            Initialises the WaveOut device
            </summary>
            <param name="waveProvider">WaveProvider to play</param>
        </member>
        <member name="M:NAudio.Wave.WaveOut.Play">
            <summary>
            Start playing the audio from the WaveStream
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOut.Pause">
            <summary>
            Pause the audio
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOut.Resume">
            <summary>
            Resume playing after a pause from the same position
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOut.Stop">
            <summary>
            Stop and reset the WaveOut device
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOut.Dispose">
            <summary>
            Closes this WaveOut device
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOut.Dispose(System.Boolean)">
            <summary>
            Closes the WaveOut device and disposes of buffers
            </summary>
            <param name="disposing">True if called from <see>Dispose</see></param>
        </member>
        <member name="M:NAudio.Wave.WaveOut.Callback(System.IntPtr,NAudio.Wave.MmeInterop.WaveInterop.WaveMessage,System.IntPtr,NAudio.Wave.WaveHeader,System.IntPtr)">
            <summary>
            made non-static so that playing can be stopped here
            </summary>
            <param name="hWaveOut">The h wave out.</param>
            <param name="uMsg">The u MSG.</param>
            <param name="dwInstance">The dw instance.</param>
            <param name="wavhdr">The wavhdr.</param>
            <param name="dwReserved">The dw reserved.</param>
        </member>
        <member name="M:NAudio.Wave.WaveOut.RaisePlaybackStoppedEvent">
            <summary>
            Raises the playback stopped event.
            </summary>
        </member>
        <member name="E:NAudio.Wave.WaveOut.PlaybackStopped">
            <summary>
            Indicates playback has stopped automatically
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOut.DeviceCount">
            <summary>
            Gets Returns the number of Wave Out devices available in the system
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOut.DesiredLatency">
            <summary>
            Gets or sets the desired latency in milliseconds
            Should be set before a call to Init
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOut.NumberOfBuffers">
            <summary>
            Gets or sets the number of buffers used
            Should be set before a call to Init
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOut.DeviceNumber">
            <summary>
            Gets or sets the device number
            Should be set before a call to Init
            This must be between 0 and <see>DeviceCount</see> - 1.
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOut.PlaybackState">
            <summary>
            Gets Playback State
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOut.Volume">
            <summary>
            Gets or sets Volume for this device 1.0 is full scale
            </summary>
        </member>
        <member name="T:NAudio.Wave.Mp3WaveFormat">
            <summary>
            MP3 WaveFormat, MPEGLAYER3WAVEFORMAT from mmreg.h
            </summary>
        </member>
        <member name="F:NAudio.Wave.Mp3WaveFormat.Mp3WaveFormatExtraBytes">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Mp3WaveFormat.id">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Mp3WaveFormat.flags">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Mp3WaveFormat.blockSize">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Mp3WaveFormat.framesPerBlock">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Mp3WaveFormat.codecDelay">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.Mp3WaveFormat.#ctor(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Mp3WaveFormat"/> class.
            Creates a new MP3 WaveFormat
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="channels">The channels.</param>
            <param name="blockSize">Size of the block.</param>
            <param name="bitRate">The bit rate.</param>
        </member>
        <member name="M:NAudio.Wave.Mp3WaveFormat.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Mp3WaveFormat"/> class.
            Creates a new MP3 WaveFormat
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="channels">The channels.</param>
            <param name="blockSize">Size of the block.</param>
            <param name="bitRate">The bit rate.</param>
        </member>
        <member name="P:NAudio.Wave.Mp3WaveFormat.BlockAlign">
            <summary>
            Gets Returns the block alignment
            </summary>
            <value></value>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmMetrics">
            <summary>
            The ACM Metrics.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.CountDrivers">
            <summary>Originally known as ACM_METRIC_COUNT_DRIVERS</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.CountCodecs">
            <summary>Originally known as ACM_METRIC_COUNT_CODECS</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.CountConverters">
            <summary>Originally known as ACM_METRIC_COUNT_CONVERTERS</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.CountFilters">
            <summary>Originally known as ACM_METRIC_COUNT_FILTERS</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.CountDisabled">
            <summary>Originally known as ACM_METRIC_COUNT_DISABLED</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.CountHardware">
            <summary>Originally known as ACM_METRIC_COUNT_HARDWARE</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.CountLocalDrivers">
            <summary>Originally known as ACM_METRIC_COUNT_LOCAL_DRIVERS</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.CountLocalCodecs">
            <summary>Originally known as ACM_METRIC_COUNT_LOCAL_CODECS</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.CountLocalConverters">
            <summary>Originally known as ACM_METRIC_COUNT_LOCAL_CONVERTERS</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.CountLocalFilters">
            <summary>Originally known as ACM_METRIC_COUNT_LOCAL_FILTERS</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.CountLocalDisabled">
            <summary>Originally known as ACM_METRIC_COUNT_LOCAL_DISABLED</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.HardwareWaveInput">
            <summary>Originally known as ACM_METRIC_HARDWARE_WAVE_INPUT</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.HardwareWaveOutput">
            <summary>Originally known as ACM_METRIC_HARDWARE_WAVE_OUTPUT</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.MaxSizeFormat">
            <summary>Originally known as ACM_METRIC_MAX_SIZE_FORMAT</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.MaxSizeFilter">
            <summary>Originally known as ACM_METRIC_MAX_SIZE_FILTER</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.DriverSupport">
            <summary>Originally known as ACM_METRIC_DRIVER_SUPPORT</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmMetrics.DriverPriority">
            <summary>Originally known as ACM_METRIC_DRIVER_PRIORITY</summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmFormatEnumFlags">
            <summary>
            Format Enumeration Flags
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatEnumFlags.None">
            <summary>
            No format flags
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatEnumFlags.Convert">
            <summary>
            ACM_FORMATENUMF_CONVERT
            The WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will only enumerate destination formats that can be converted from the given pwfx format. 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatEnumFlags.Hardware">
            <summary>
            ACM_FORMATENUMF_HARDWARE
            The enumerator should only enumerate formats that are supported as native input or output formats on one or more of the installed waveform-audio devices. This flag provides a way for an application to choose only formats native to an installed waveform-audio device. This flag must be used with one or both of the ACM_FORMATENUMF_INPUT and ACM_FORMATENUMF_OUTPUT flags. Specifying both ACM_FORMATENUMF_INPUT and ACM_FORMATENUMF_OUTPUT will enumerate only formats that can be opened for input or output. This is true regardless of whether this flag is specified. 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatEnumFlags.Input">
            <summary>
            ACM_FORMATENUMF_INPUT
            Enumerator should enumerate only formats that are supported for input (recording). 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatEnumFlags.Channels">
            <summary>
            ACM_FORMATENUMF_NCHANNELS 
            The nChannels member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatEnumFlags.SamplesPerSecond">
            <summary>
            ACM_FORMATENUMF_NSAMPLESPERSEC
            The nSamplesPerSec member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatEnumFlags.Output">
            <summary>
            ACM_FORMATENUMF_OUTPUT 
            Enumerator should enumerate only formats that are supported for output (playback). 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatEnumFlags.Suggest">
            <summary>
            ACM_FORMATENUMF_SUGGEST
            The WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate all suggested destination formats for the given pwfx format. This mechanism can be used instead of the acmFormatSuggest function to allow an application to choose the best suggested format for conversion. The dwFormatIndex member will always be set to zero on return. 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatEnumFlags.BitsPerSample">
            <summary>
            ACM_FORMATENUMF_WBITSPERSAMPLE
            The wBitsPerSample member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatEnumFlags.FormatTag">
            <summary>
            ACM_FORMATENUMF_WFORMATTAG
            The wFormatTag member of the WAVEFORMATEX structure pointed to by the pwfx member of the ACMFORMATDETAILS structure is valid. The enumerator will enumerate only a format that conforms to this attribute. The dwFormatTag member of the ACMFORMATDETAILS structure must be equal to the wFormatTag member. 
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOException">
            <summary>
            ASIO common Exception.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOException.error">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Asio.ASIOException"/> class.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Asio.ASIOException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Asio.ASIOException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIOException.getErrorName(NAudio.Wave.Asio.ASIOError)">
            <summary>
            Gets the name of the error.
            </summary>
            <param name="error">The error.</param>
            <returns>the name of the error</returns>
        </member>
        <member name="P:NAudio.Wave.Asio.ASIOException.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The ASIO error.</value>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.StorageAccessMode">
            <summary>
            MultimediaDevice STGM enumeration
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.StorageAccessMode.Read">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.StorageAccessMode.Write">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.StorageAccessMode.ReadWrite">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Utils.ProgressLog">
            <summary>
            A thread-safe Progress Log Control
            </summary>
        </member>
        <member name="F:NAudio.Utils.ProgressLog.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NAudio.Utils.ProgressLog.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NAudio.Utils.ProgressLog.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NAudio.Utils.ProgressLog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Utils.ProgressLog"/> class. 
            Creates a new progress log control
            </summary>
        </member>
        <member name="M:NAudio.Utils.ProgressLog.ReportProgress(NAudio.Utils.ProgressEventArgs)">
            <summary>
            Report progress from a progress event
            </summary>
            <param name="e">The <see cref="T:NAudio.Utils.ProgressEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NAudio.Utils.ProgressLog.LogMessage(System.Drawing.Color,System.String)">
            <summary>
            Log a message
            </summary>
            <param name="color">The color.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:NAudio.Utils.ProgressLog.ClearLog">
            <summary>
            Clear the log
            </summary>
        </member>
        <member name="P:NAudio.Utils.ProgressLog.Text">
            <summary>
            Gets The contents of the log as text
            </summary>
        </member>
        <member name="T:NAudio.Utils.ProgressLog.LogMessageDelegate">
            <summary>
            Log Message Delegate
            </summary>
            <param name="color">The color to use.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="T:NAudio.Utils.ProgressLog.ClearLogDelegate">
            <summary>
            Clear Log delegate.
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerFlags">
            <summary>
            Mixer Interop Flags
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.Handle">
            <summary>
            MIXER_OBJECTF_HANDLE     = 0x80000000;
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.Mixer">
            <summary>
            MIXER_OBJECTF_MIXER     = 0x00000000;
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.MixerHandle">
            <summary>
            Originally known as MIXER_OBJECTF_HMIXER
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.WaveOut">
            <summary>
            Originally known as MIXER_OBJECTF_WAVEOUT
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.WaveOutHandle">
            <summary>
            Originally known as MIXER_OBJECTF_HWAVEOUT
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.WaveIn">
            <summary>
            Originally known as MIXER_OBJECTF_WAVEIN
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.WaveInHandle">
            <summary>
            Originally known as MIXER_OBJECTF_HWAVEIN
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.MidiOut">
            <summary>
            Originally known as MIXER_OBJECTF_MIDIOUT
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.MidiOutHandle">
            <summary>
            Originally known as MIXER_OBJECTF_HMIDIOUT
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.MidiIn">
            <summary>
            Originally known as MIXER_OBJECTF_MIDIIN
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.MidiInHandle">
            <summary>
            Originally known as MIXER_OBJECTF_HMIDIIN
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.Aux">
            <summary>
            Originally known as MIXER_OBJECTF_AUX
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.Value">
            <summary>
            MIXER_GETCONTROLDETAILSF_VALUE          = 0x00000000;
            MIXER_SETCONTROLDETAILSF_VALUE          = 0x00000000;
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.ListText">
            <summary>
            MIXER_GETCONTROLDETAILSF_LISTTEXT       = 0x00000001;
            MIXER_SETCONTROLDETAILSF_LISTTEXT       = 0x00000001;
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.QueryMask">
            <summary>
            MIXER_GETCONTROLDETAILSF_QUERYMASK      = 0x0000000F;
            MIXER_SETCONTROLDETAILSF_QUERYMASK      = 0x0000000F;
            MIXER_GETLINECONTROLSF_QUERYMASK        = 0x0000000F;
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.All">
            <summary>
            MIXER_GETLINECONTROLSF_ALL              = 0x00000000;
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.OneById">
            <summary>
            MIXER_GETLINECONTROLSF_ONEBYID          = 0x00000001;
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.OneByType">
            <summary>
            MIXER_GETLINECONTROLSF_ONEBYTYPE        = 0x00000002;
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.GetLineInfoOfDestination">
            <summary>
            MIXER_GETLINEINFOF_DESTINATION          = 0x00000000;
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.GetLineInfoOfSource">
            <summary>
            MIXER_GETLINEINFOF_SOURCE               = 0x00000001;
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.GetLineInfoOfLineId">
            <summary>
            MIXER_GETLINEINFOF_LINEID               = 0x00000002;
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.GetLineInfoOfComponentType">
            <summary>
            MIXER_GETLINEINFOF_COMPONENTTYPE        = 0x00000003;
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.GetLineInfoOfTargetType">
            <summary>
            MIXER_GETLINEINFOF_TARGETTYPE           = 0x00000004;
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerFlags.GetLineInfoOfQueryMask">
            <summary>
            MIXER_GETLINEINFOF_QUERYMASK            = 0x0000000F;
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiOutTechnology">
            <summary>
            Represents the different types of technology used by a MIDI out device
            </summary>
            <remarks>from mmsystem.h</remarks>
        </member>
        <member name="F:NAudio.Midi.MidiOutTechnology.MidiPort">
            <summary>The device is a MIDI port</summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutTechnology.Synth">
            <summary>The device is a MIDI synth</summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutTechnology.SquareWaveSynth">
            <summary>The device is a square wave synth</summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutTechnology.FMSynth">
            <summary>The device is an FM synth</summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutTechnology.MidiMapper">
            <summary>The device is a MIDI mapper</summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutTechnology.WaveTableSynth">
            <summary>The device is a WaveTable synth</summary>
        </member>
        <member name="F:NAudio.Midi.MidiOutTechnology.SoftwareSynth">
            <summary>The device is a software synth</summary>
        </member>
        <member name="T:NAudio.Midi.MidiFile">
            <summary>
            Class able to read a MIDI file
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiFile.events">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiFile.fileFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiFile.deltaTicksPerQuarterNote">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiFile.strictChecking">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.MidiFile"/> class. 
            Opens a MIDI file for reading
            </summary>
            <param name="filename">
            Name of MIDI file
            </param>
            <param name="strictChecking">
            If true will error on non-paired note events
            </param>
        </member>
        <member name="M:NAudio.Midi.MidiFile.Export(System.String,NAudio.Midi.MidiEventCollection)">
            <summary>
            Exports a MIDI file
            </summary>
            <param name="filename">Filename to export to</param>
            <param name="events">Events to export</param>
        </member>
        <member name="M:NAudio.Midi.MidiFile.ToString">
            <summary>
            Describes the MIDI file
            </summary>
            <returns>A string describing the MIDI file and its events</returns>
        </member>
        <member name="M:NAudio.Midi.MidiFile.SwapUInt32(System.UInt32)">
            <summary>
            Swaps the U int32.
            </summary>
            <param name="i">The value to swap.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Midi.MidiFile.SwapUInt16(System.UInt16)">
            <summary>
            Swaps the U int16.
            </summary>
            <param name="i">The value to swap.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Midi.MidiFile.FindNoteOn(NAudio.Midi.NoteEvent,System.Collections.Generic.List{NAudio.Midi.NoteOnEvent})">
            <summary>
            Finds the note on.
            </summary>
            <param name="offEvent">The off event.</param>
            <param name="outstandingNoteOns">The outstanding note ons.</param>
        </member>
        <member name="P:NAudio.Midi.MidiFile.FileFormat">
            <summary>
            Gets MIDI File format
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiFile.Events">
            <summary>
            Gets The collection of events in this MIDI file
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiFile.Tracks">
            <summary>
            Gets Number of tracks in this MIDI file
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiFile.DeltaTicksPerQuarterNote">
            <summary>
            Gets Delta Ticks Per Quarter Note
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiEventComparer">
            <summary>
            Utility class for comparing MidiEvent objects
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiEventComparer.Compare(NAudio.Midi.MidiEvent,NAudio.Midi.MidiEvent)">
            <summary>
            Compares two MidiEvents
            Sorts by time, with EndTrack always sorted to the end
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:NAudio.Midi.MidiEventCollection">
            <summary>
            A helper class to manage collection of MIDI events
            It has the ability to organise them in tracks
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiEventCollection.midiFileType">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiEventCollection.trackEvents">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiEventCollection.deltaTicksPerQuarterNote">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiEventCollection.startAbsoluteTime">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiEventCollection.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.MidiEventCollection"/> class. 
            Creates a new Midi Event collection
            </summary>
            <param name="midiFileType">
            Initial file type
            </param>
            <param name="deltaTicksPerQuarterNote">
            Delta Ticks Per Quarter Note
            </param>
        </member>
        <member name="M:NAudio.Midi.MidiEventCollection.GetTrackEvents(System.Int32)">
            <summary>
            Gets events on a specified track
            </summary>
            <param name="trackNumber">Track number</param>
            <returns>The list of events</returns>
        </member>
        <member name="M:NAudio.Midi.MidiEventCollection.AddTrack">
            <summary>
            Adds a new track
            </summary>
            <returns>The new track event list</returns>
        </member>
        <member name="M:NAudio.Midi.MidiEventCollection.AddTrack(System.Collections.Generic.IList{NAudio.Midi.MidiEvent})">
            <summary>
            Adds a new track
            </summary>
            <param name="initialEvents">Initial events to add to the new track</param>
            <returns>The new track event list</returns>
        </member>
        <member name="M:NAudio.Midi.MidiEventCollection.RemoveTrack(System.Int32)">
            <summary>
            Removes a track
            </summary>
            <param name="track">Track number to remove</param>
        </member>
        <member name="M:NAudio.Midi.MidiEventCollection.Clear">
            <summary>
            Clears all events
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiEventCollection.AddEvent(NAudio.Midi.MidiEvent,System.Int32)">
            <summary>
            Adds an event to the appropriate track depending on file type
            </summary>
            <param name="midiEvent">The event to be added</param>
            <param name="originalTrack">The original (or desired) track number</param>
            <remarks>When adding events in type 0 mode, the originalTrack parameter
            is ignored. If in type 1 mode, it will use the original track number to
            store the new events. If the original track was 0 and this is a channel based
            event, it will create new tracks if necessary and put it on the track corresponding
            to its channel number</remarks>
        </member>
        <member name="M:NAudio.Midi.MidiEventCollection.PrepareForExport">
            <summary>
            Sorts, removes empty tracks and adds end track markers
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiEventCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the lists of track events
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:NAudio.Midi.MidiEventCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the lists of track events
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:NAudio.Midi.MidiEventCollection.EnsureTracks(System.Int32)">
            <summary>
            Ensures the tracks.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:NAudio.Midi.MidiEventCollection.ExplodeToManyTracks">
            <summary>
            Explodes to many tracks.
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiEventCollection.FlattenToOneTrack">
            <summary>
            Flattens to one track.
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiEventCollection.Tracks">
            <summary>
            Gets The number of tracks
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiEventCollection.StartAbsoluteTime">
            <summary>
            Gets or sets The absolute time that should be considered as time zero
            Not directly used here, but useful for timeshifting applications
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiEventCollection.DeltaTicksPerQuarterNote">
            <summary>
            Gets The number of ticks per quarter note
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiEventCollection.MidiFileType">
            <summary>
            Gets or sets The MIDI file type
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiEventCollection.Item(System.Int32)">
            <summary>
            Gets events on a specific track
            </summary>
            <param name="trackNumber">Track number</param>
            <returns>The list of events</returns>
        </member>
        <member name="T:NAudio.Midi.MidiController">
            <summary>
            MidiController enumeration
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiController.Modulation">
            <summary>Modulation option.</summary>
        </member>
        <member name="F:NAudio.Midi.MidiController.MainVolume">
            <summary>Main volume</summary>
        </member>
        <member name="F:NAudio.Midi.MidiController.Pan">
            <summary>Pan option.</summary>
        </member>
        <member name="F:NAudio.Midi.MidiController.Expression">
            <summary>Expression option.</summary>
        </member>
        <member name="F:NAudio.Midi.MidiController.Sustain">
            <summary>Sustain option.</summary>
        </member>
        <member name="F:NAudio.Midi.MidiController.ResetAllControllers">
            <summary>Reset all controllers</summary>
        </member>
        <member name="F:NAudio.Midi.MidiController.AllNotesOff">
            <summary>All notes off</summary>
        </member>
        <member name="T:NAudio.SoundFont.PresetBuilder">
            <summary>
            The preset builder
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.PresetBuilder.lastPreset">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.PresetBuilder.Read(System.IO.BinaryReader)">
            <summary>
            Reads the specified br.
            </summary>
            <param name="br">The binary reader.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.SoundFont.PresetBuilder.Write(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes the specified bw.
            </summary>
            <param name="bw">The binary writer.</param>
            <param name="o">The object.</param>
        </member>
        <member name="M:NAudio.SoundFont.PresetBuilder.LoadZones(NAudio.SoundFont.Zone[])">
            <summary>
            Loads the zones.
            </summary>
            <param name="presetZones">The preset zones.</param>
        </member>
        <member name="P:NAudio.SoundFont.PresetBuilder.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:NAudio.SoundFont.PresetBuilder.Presets">
            <summary>
            Gets the presets.
            </summary>
            <value>The presets.</value>
        </member>
        <member name="T:NAudio.FileFormats.Sfz.Region">
            <summary>
            The region class.
            </summary>
        </member>
        <member name="T:NAudio.Dmo.MediaParamCurveType">
            <summary>
            Originally known as MP_CURVE_TYPE
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamCurveType.MP_CURVE_JUMP">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamCurveType.MP_CURVE_LINEAR">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamCurveType.MP_CURVE_SQUARE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamCurveType.MP_CURVE_INVSQUARE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.MediaParamCurveType.MP_CURVE_SINE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Dmo.AudioMediaSubtypes">
            <summary>
            The audio media subtypes
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_PCM">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_PCMAudioObsolete">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_MPEG1Packet">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_MPEG1Payload">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_MPEG2_AUDIO">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_DVD_LPCM_AUDIO">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_DRM_Audio">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_IEEE_FLOAT">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_DOLBY_AC3">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_DOLBY_AC3_SPDIF">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_RAW_SPORT">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_SPDIF_TAG_241h">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_WAVE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_AU">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.MEDIASUBTYPE_AIFF">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.AudioSubTypes">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.AudioMediaSubtypes.AudioSubTypeNames">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Dmo.AudioMediaSubtypes.GetAudioSubtypeName(System.Guid)">
            <summary>
            Gets the name of the audio subtype.
            </summary>
            <param name="subType">Type of the sub.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.Daw.MeasuresBeatsTicks">
            <summary>
            The measures beats ticks
            </summary>
        </member>
        <member name="P:NAudio.Daw.MeasuresBeatsTicks.Measure">
            <summary>
            Gets or sets the measure.
            </summary>
            <value>The measure count.</value>
        </member>
        <member name="P:NAudio.Daw.MeasuresBeatsTicks.Beat">
            <summary>
            Gets or sets the beat.
            </summary>
            <value>The beat count.</value>
        </member>
        <member name="P:NAudio.Daw.MeasuresBeatsTicks.Tick">
            <summary>
            Gets or sets the tick.
            </summary>
            <value>The tick count.</value>
        </member>
        <member name="T:NAudio.Dmo.InputStreamInfoFlags">
            <summary>
            The Input Stream Info Flags.
            </summary>
        </member>
        <member name="F:NAudio.Dmo.InputStreamInfoFlags.None">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.InputStreamInfoFlags.DMO_INPUT_STREAMF_WHOLE_SAMPLES">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.InputStreamInfoFlags.DMO_INPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.InputStreamInfoFlags.DMO_INPUT_STREAMF_FIXED_SAMPLE_SIZE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.InputStreamInfoFlags.DMO_INPUT_STREAMF_HOLDS_BUFFERS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveCallbackInfo">
            <summary>
            Wave Callback Info
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveCallbackInfo.waveOutWindow">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveCallbackInfo.waveOutWindowNative">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveCallbackInfo.#ctor(NAudio.Wave.WaveCallbackStrategy,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveCallbackInfo"/> class.
            </summary>
            <param name="strategy">The strategy.</param>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:NAudio.Wave.WaveCallbackInfo.FunctionCallback">
            <summary>
            Sets up a new WaveCallbackInfo for function callbacks
            </summary>
            <returns>The Wave Callback Info.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveCallbackInfo.NewWindow">
            <summary>
            Sets up a new WaveCallbackInfo to use a New Window
            IMPORTANT: only use this on the GUI thread
            </summary>
            <returns>The Wave Callback Info.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveCallbackInfo.ExistingWindow(System.IntPtr)">
            <summary>
            Sets up a new WaveCallbackInfo to use an existing window
            IMPORTANT: only use this on the GUI thread
            </summary>
            <param name="handle">The handle.</param>
            <returns>The Wave Callback Info</returns>
        </member>
        <member name="M:NAudio.Wave.WaveCallbackInfo.Connect(NAudio.Wave.MmeInterop.WaveInterop.WaveCallback)">
            <summary>
            Connects the specified callback.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:NAudio.Wave.WaveCallbackInfo.WaveOutOpen(System.IntPtr@,System.Int32,NAudio.Wave.WaveFormat,NAudio.Wave.MmeInterop.WaveInterop.WaveCallback)">
            <summary>
            Waves the out open.
            </summary>
            <param name="waveOutHandle">The wave out handle.</param>
            <param name="deviceNumber">The device number.</param>
            <param name="waveFormat">The wave format.</param>
            <param name="callback">The callback.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Wave.WaveCallbackInfo.WaveInOpen(System.IntPtr@,System.Int32,NAudio.Wave.WaveFormat,NAudio.Wave.MmeInterop.WaveInterop.WaveCallback)">
            <summary>
            Waves the in open.
            </summary>
            <param name="waveInHandle">The wave in handle.</param>
            <param name="deviceNumber">The device number.</param>
            <param name="waveFormat">The wave format.</param>
            <param name="callback">The callback.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Wave.WaveCallbackInfo.Disconnect">
            <summary>
            Disconnects this instance.
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveCallbackInfo.Strategy">
            <summary>
            Gets Callback Strategy
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveCallbackInfo.Handle">
            <summary>
            Gets Window Handle (if applicable)
            </summary>
        </member>
        <member name="T:NAudio.Wave.MmeInterop.WaveWindow">
            <summary>
            The wave window
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveWindow.waveCallback">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.MmeInterop.WaveWindow.#ctor(NAudio.Wave.MmeInterop.WaveInterop.WaveCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.MmeInterop.WaveWindow"/> class.
            </summary>
            <param name="waveCallback">The wave callback.</param>
        </member>
        <member name="M:NAudio.Wave.MmeInterop.WaveWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
            WNDs the proc.
            </summary>
            <param name="m">The message.</param>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmDriver">
            <summary>
            Represents an installed ACM Driver
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriver.drivers">
            <summary>
            The field for the list of ACM Drivers.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriver.details">
            <summary>
            The field for the driver details.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriver.driverId">
            <summary>
            The driver ID.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriver.driverHandle">
            <summary>
            The driver handle.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriver.formatTags">
            <summary>
            The list of format tags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriver.tempFormatsList">
            <summary>
            The temporary formats list.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmDriver.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Compression.AcmDriver"/> class.
            </summary>
            <param name="hAcmDriver">Driver handle</param>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmDriver.IsCodecInstalled(System.String)">
            <summary>
            Helper function to determine whether a particular codec is installed
            </summary>
            <param name="shortName">The short name of the function</param>
            <returns>Whether the codec is installed</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmDriver.ShowFormatChooseDialog(System.IntPtr,System.String,NAudio.Wave.Compression.AcmFormatEnumFlags,NAudio.Wave.WaveFormat,NAudio.Wave.WaveFormat@,System.String@,System.String@)">
            <summary>
            Show Format Choose Dialog
            </summary>
            <param name="ownerWindowHandle">Owner window handle, can be null</param>
            <param name="windowTitle">Window title</param>
            <param name="enumFlags">Enumeration flags. None to get everything</param>
            <param name="enumFormat">Enumeration format. Only needed with certain enumeration flags</param>
            <param name="selectedFormat">The selected format</param>
            <param name="selectedFormatDescription">Textual description of the selected format</param>
            <param name="selectedFormatTagDescription">Textual description of the selected format tag</param>
            <returns>True if a format was selected</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmDriver.FindByShortName(System.String)">
            <summary>
            Finds a Driver by its short name
            </summary>
            <param name="shortName">Short Name</param>
            <returns>The driver, or null if not found</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmDriver.EnumerateAcmDrivers">
            <summary>
            Gets a list of the ACM Drivers installed
            </summary>
            <returns>The result of the call.</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmDriver.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmDriver.GetFormats(NAudio.Wave.Compression.AcmFormatTag)">
            <summary>
            Gets all the supported formats for a given format tag
            </summary>
            <param name="formatTag">Format tag</param>
            <returns>Supported formats</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmDriver.Open">
            <summary>
            Opens this driver
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmDriver.Close">
            <summary>
            Closes this driver
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmDriver.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmDriver.DriverEnumCallback(System.IntPtr,System.IntPtr,NAudio.Wave.Compression.AcmDriverDetailsSupportFlags)">
            <summary>
            The callback for acmDriverEnum
            </summary>
            <param name="hAcmDriver">The h acm driver.</param>
            <param name="dwInstance">The dw instance.</param>
            <param name="flags">The flags.</param>
            <returns>The result of the call.</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmDriver.AcmFormatTagEnumCallback(System.IntPtr,NAudio.Wave.Compression.AcmFormatTagDetails@,System.IntPtr,NAudio.Wave.Compression.AcmDriverDetailsSupportFlags)">
            <summary>
            Acms the format tag enum callback.
            </summary>
            <param name="hAcmDriverId">The h acm driver id.</param>
            <param name="formatTagDetails">The format tag details.</param>
            <param name="dwInstance">The dw instance.</param>
            <param name="flags">The flags.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmDriver.AcmFormatEnumCallback(System.IntPtr,NAudio.Wave.Compression.AcmFormatDetails@,System.IntPtr,NAudio.Wave.Compression.AcmDriverDetailsSupportFlags)">
            <summary>
            Acms the format enum callback.
            </summary>
            <param name="hAcmDriverId">The h acm driver id.</param>
            <param name="formatDetails">The format details.</param>
            <param name="dwInstance">The dw instance.</param>
            <param name="flags">The flags.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmDriver.MaxFormatSize">
            <summary>
            Gets the maximum size needed to store a WaveFormat for ACM interop functions
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmDriver.ShortName">
            <summary>
            Gets The short name of this driver
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmDriver.LongName">
            <summary>
            Gets The full name of this driver
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmDriver.DriverId">
            <summary>
            Gets The driver ID
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmDriver.FormatTags">
            <summary>
            Gets The list of FormatTags for this ACM Driver
            </summary>
        </member>
        <member name="T:NAudio.Mixer.MixerLine">
            <summary>
            Represents a mixer line (source or destination)
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLine.mixerLine">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLine.mixerHandle">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerLine.mixerHandleType">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Mixer.MixerLine.#ctor(System.IntPtr,System.Int32,NAudio.Mixer.MixerFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Mixer.MixerLine"/> class. 
            Creates a new mixer destination
            </summary>
            <param name="mixerHandle">
            Mixer Handle
            </param>
            <param name="destinationIndex">
            Destination Index
            </param>
            <param name="mixerHandleType">
            Mixer Handle Type
            </param>
        </member>
        <member name="M:NAudio.Mixer.MixerLine.#ctor(System.IntPtr,System.Int32,System.Int32,NAudio.Mixer.MixerFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Mixer.MixerLine"/> class. 
            Creates a new Mixer Source For a Specified Source
            </summary>
            <param name="mixerHandle">
            Mixer Handle
            </param>
            <param name="destinationIndex">
            Destination Index
            </param>
            <param name="sourceIndex">
            Source Index
            </param>
            <param name="mixerHandleType">
            Flag indicating the meaning of mixerHandle
            </param>
        </member>
        <member name="M:NAudio.Mixer.MixerLine.GetMixerIdForWaveIn(System.Int32)">
            <summary>
            Creates a new Mixer Source
            </summary>
            <param name="waveInDevice">Wave In Device</param>
            <returns>The Mixer Id.</returns>
        </member>
        <member name="M:NAudio.Mixer.MixerLine.GetSource(System.Int32)">
            <summary>
            Gets the specified source
            </summary>
            <param name="sourceIndex">Index of the source.</param>
            <returns>The Mixer Line.</returns>
        </member>
        <member name="M:NAudio.Mixer.MixerLine.ToString">
            <summary>
            Describes this Mixer Line (for diagnostic purposes)
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NAudio.Mixer.MixerLine.Name">
            <summary>
            Gets Mixer Line Name
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerLine.ShortName">
            <summary>
            Gets Mixer Line short name
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerLine.LineId">
            <summary>
            Gets The line ID
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerLine.ComponentType">
            <summary>
            Gets Component Type
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerLine.TypeDescription">
            <summary>
            Gets Mixer destination type description
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerLine.Channels">
            <summary>
            Gets Number of channels
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerLine.SourceCount">
            <summary>
            Gets Number of sources
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerLine.ControlsCount">
            <summary>
            Gets Number of controls
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerLine.IsActive">
            <summary>
            Gets a value indicating whether Is this destination active
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerLine.IsDisconnected">
            <summary>
            Gets a value indicating whether Is this destination disconnected
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerLine.IsSource">
            <summary>
            Gets a value indicating whether Is this destination a source
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerLine.Controls">
            <summary>
            Gets Enumerator for the controls on this Mixer Limne
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerLine.Sources">
            <summary>
            Gets Enumerator for the sources on this Mixer Line
            </summary>
        </member>
        <member name="P:NAudio.Mixer.MixerLine.TargetName">
            <summary>
            Gets The name of the target output device
            </summary>
        </member>
        <member name="T:NAudio.Midi.PitchWheelChangeEvent">
            <summary>
            Represents a MIDI pitch wheel change event
            </summary>
        </member>
        <member name="F:NAudio.Midi.PitchWheelChangeEvent.pitch">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.PitchWheelChangeEvent.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.PitchWheelChangeEvent"/> class. 
            Reads a pitch wheel change event from a MIDI stream
            </summary>
            <param name="br">
            The MIDI stream to read from
            </param>
        </member>
        <member name="M:NAudio.Midi.PitchWheelChangeEvent.#ctor(System.Int64,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.PitchWheelChangeEvent"/> class. 
            Creates a new pitch wheel change event
            </summary>
            <param name="absoluteTime">
            Absolute event time
            </param>
            <param name="channel">
            The Channel
            </param>
            <param name="pitchWheel">
            Pitch wheel value
            </param>
        </member>
        <member name="M:NAudio.Midi.PitchWheelChangeEvent.ToString">
            <summary>
            Describes this pitch wheel change event
            </summary>
            <returns>String describing this pitch wheel change event</returns>
        </member>
        <member name="M:NAudio.Midi.PitchWheelChangeEvent.Export(System.Int64@,System.IO.BinaryWriter)">
            <summary>
            Calls base class export first, then exports the data
            specific to this event
            <seealso cref="M:NAudio.Midi.MidiEvent.Export(System.Int64@,System.IO.BinaryWriter)">MidiEvent.Export</seealso>
            </summary>
            <param name="absoluteTime">Absolute time used to calculate delta.
            Is updated ready for the next delta calculation</param>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="P:NAudio.Midi.PitchWheelChangeEvent.Pitch">
            <summary>
            Gets or sets Pitch Wheel Value 0 is minimum, 0x2000 (8192) is default, 0x4000 (16384) is maximum
            </summary>
        </member>
        <member name="T:NAudio.Midi.NoteEvent">
            <summary>
            Represents a note MIDI event
            </summary>
        </member>
        <member name="F:NAudio.Midi.NoteEvent.NoteNames">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.NoteEvent.noteNumber">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.NoteEvent.velocity">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.NoteEvent.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.NoteEvent"/> class. 
            Reads a NoteEvent from a stream of MIDI data
            </summary>
            <param name="br">
            Binary Reader for the stream
            </param>
        </member>
        <member name="M:NAudio.Midi.NoteEvent.#ctor(System.Int64,System.Int32,NAudio.Midi.MidiCommandCode,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.NoteEvent"/> class. 
            Creates a MIDI Note Event with specified parameters
            </summary>
            <param name="absoluteTime">
            Absolute time of this event
            </param>
            <param name="channel">
            MIDI channel number
            </param>
            <param name="commandCode">
            MIDI command code
            </param>
            <param name="noteNumber">
            MIDI Note Number
            </param>
            <param name="velocity">
            MIDI Note Velocity
            </param>
        </member>
        <member name="M:NAudio.Midi.NoteEvent.GetAsShortMessage">
            <summary>
            Converts this MIDI event to a short message (32 bit integer) that
            can be sent by the Windows MIDI out short message APIs
            Cannot be implemented for all MIDI messages
            </summary>
            <returns>A short message</returns>
        </member>
        <member name="M:NAudio.Midi.NoteEvent.ToString">
            <summary>
            Describes the Note Event
            </summary>
            <returns>Note event as a string</returns>
        </member>
        <member name="M:NAudio.Midi.NoteEvent.Export(System.Int64@,System.IO.BinaryWriter)">
            <summary>
            Exports this MIDI event's data
            Overriden in derived classes, but they should call this version
            </summary>
            <param name="absoluteTime">Absolute time used to calculate delta.
            Is updated ready for the next delta calculation</param>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="P:NAudio.Midi.NoteEvent.NoteNumber">
            <summary>
            Gets or sets The MIDI note number
            </summary>
        </member>
        <member name="P:NAudio.Midi.NoteEvent.Velocity">
            <summary>
            Gets or sets The note velocity
            </summary>
        </member>
        <member name="P:NAudio.Midi.NoteEvent.NoteName">
            <summary>
            Gets The note name
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiIn">
            <summary>
            Represents a MIDI in device
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiIn.hMidiIn">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiIn.disposed">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiIn.callback">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiIn.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.MidiIn"/> class. 
            Opens a specified MIDI in device
            </summary>
            <param name="deviceNo">
            The device number
            </param>
        </member>
        <member name="M:NAudio.Midi.MidiIn.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NAudio.Midi.MidiIn"/> class.  Releases unmanaged resources and performs other cleanup operations before the <see cref="T:NAudio.Midi.MidiIn"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiIn.DeviceInfo(System.Int32)">
            <summary>
            Gets the MIDI in device info
            </summary>
            <param name="midiInDeviceNumber">The midi in device number.</param>
            <returns>The MIDI Capabilities.</returns>
        </member>
        <member name="M:NAudio.Midi.MidiIn.Close">
            <summary>
            Closes this MIDI in device
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiIn.Dispose">
            <summary>
            Closes this MIDI in device
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiIn.Start">
            <summary>
            Start the MIDI in device
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiIn.Stop">
            <summary>
            Stop the MIDI in device
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiIn.Reset">
            <summary>
            Reset the MIDI in device
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiIn.Dispose(System.Boolean)">
            <summary>
            Closes the MIDI out device
            </summary>
            <param name="disposing">True if called from Dispose</param>
        </member>
        <member name="M:NAudio.Midi.MidiIn.Callback(System.IntPtr,NAudio.Midi.MidiInterop.MidiInMessage,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Callbacks the specified midi in handle.
            </summary>
            <param name="midiInHandle">The midi in handle.</param>
            <param name="message">The message.</param>
            <param name="userData">The user data.</param>
            <param name="messageParameter1">The message parameter1.</param>
            <param name="messageParameter2">The message parameter2.</param>
        </member>
        <member name="E:NAudio.Midi.MidiIn.MessageReceived">
            <summary>
            Called when a MIDI message is received
            </summary>
        </member>
        <member name="E:NAudio.Midi.MidiIn.ErrorReceived">
            <summary>
            An invalid MIDI message
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiIn.NumberOfDevices">
            <summary>
            Gets the number of MIDI input devices available in the system
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.Zone">
            <summary>
            A SoundFont zone
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Zone.generatorIndex">
            <summary>
            The generator index.
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Zone.modulatorIndex">
            <summary>
            The modulator index.
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Zone.generatorCount">
            <summary>
            The generator count.
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Zone.modulatorCount">
            <summary>
            The field for the modulator count.
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Zone.modulators">
            <summary>
            The field for the modulators.
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Zone.generators">
            <summary>
            The field for the generators.
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.Zone.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NAudio.SoundFont.Zone.Modulators">
            <summary>
            Gets or sets Modulators for this Zone
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.Zone.Generators">
            <summary>
            Gets or sets Generators for this Zone
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.SoundFont">
            <summary>
            Represents a SoundFont
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SoundFont.info">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SoundFont.presetsChunk">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SoundFont.sampleData">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.SoundFont.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.SoundFont.SoundFont"/> class. 
            Loads a SoundFont from a file
            </summary>
            <param name="fileName">
            Filename of the SoundFont
            </param>
        </member>
        <member name="M:NAudio.SoundFont.SoundFont.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NAudio.SoundFont.SoundFont.FileInfo">
            <summary>
            Gets The File Info Chunk
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.SoundFont.Presets">
            <summary>
            Gets The Presets
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.SoundFont.Instruments">
            <summary>
            Gets The Instruments
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.SoundFont.SampleHeaders">
            <summary>
            Gets The Sample Headers
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.SoundFont.SampleData">
            <summary>
            Gets The Sample Data
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.SampleHeader">
            <summary>
            A SoundFont Sample Header
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleHeader.SampleName">
            <summary>
            The sample name
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleHeader.Start">
            <summary>
            Start offset
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleHeader.End">
            <summary>
            End offset
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleHeader.StartLoop">
            <summary>
            Start loop point
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleHeader.EndLoop">
            <summary>
            End loop point
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleHeader.SampleRate">
            <summary>
            Sample Rate
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleHeader.OriginalPitch">
            <summary>
            Original pitch
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleHeader.PitchCorrection">
            <summary>
            Pitch correction
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleHeader.SampleLink">
            <summary>
            Sample Link
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleHeader.SFSampleLink">
            <summary>
            SoundFont Sample Link Type
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.SampleHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:NAudio.SoundFont.SampleDataChunk">
            <summary>
            The sample data chunk
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SampleDataChunk.sampleData">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.SampleDataChunk.#ctor(NAudio.FileFormats.SoundFont.RiffChunk)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.SoundFont.SampleDataChunk"/> class.
            </summary>
            <param name="chunk">The chunk.</param>
        </member>
        <member name="P:NAudio.SoundFont.SampleDataChunk.SampleData">
            <summary>
            Gets the sample data.
            </summary>
            <value>The sample data.</value>
        </member>
        <member name="T:NAudio.FileFormats.Sfz.SfzFileReader">
            <summary>
            The SFZ file reader
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.Sfz.SfzFileReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.FileFormats.Sfz.SfzFileReader"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="T:NAudio.FileFormats.Ogg.OggInterop">
            <summary>
            The ogg interop
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.AudioVolumeNotificationDataStruct">
            <summary>
            The Audio Volume Notification Data struct.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioVolumeNotificationDataStruct.guidEventContext">
            <summary>
            The event context guid.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioVolumeNotificationDataStruct.bMuted">
            <summary>
            The muted flag.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioVolumeNotificationDataStruct.fMasterVolume">
            <summary>
            The master volume
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioVolumeNotificationDataStruct.nChannels">
            <summary>
            the number of channels.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Interfaces.AudioVolumeNotificationDataStruct.ChannelVolume">
            <summary>
            the channel volume.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.AudioVolumeNotificationDataStruct.FixCS0649">
            <summary>
            Fixes the C S0649.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioCaptureClient">
            <summary>
            Audio Capture Client
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioCaptureClient.audioCaptureClientInterface">
            <summary>
            The audio capture client interface.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioCaptureClient.#ctor(NAudio.CoreAudioApi.Interfaces.IAudioCaptureClient)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.AudioCaptureClient"/> class.
            </summary>
            <param name="audioCaptureClientInterface">The audio capture client interface.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioCaptureClient.GetBuffer(System.Int32@,NAudio.CoreAudioApi.AudioClientBufferFlags@,System.Int64@,System.Int64@)">
            <summary>
            Gets a pointer to the buffer
            </summary>
            <param name="numFramesToRead">The num frames to read.</param>
            <param name="bufferFlags">The buffer flags.</param>
            <param name="devicePosition">The device position.</param>
            <param name="qpcPosition">The QPC position.</param>
            <returns>Pointer to the buffer</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioCaptureClient.GetBuffer(System.Int32@,NAudio.CoreAudioApi.AudioClientBufferFlags@)">
            <summary>
            Gets a pointer to the buffer
            </summary>
            <param name="numFramesToRead">Number of frames to read</param>
            <param name="bufferFlags">Buffer flags</param>
            <returns>Pointer to the buffer</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioCaptureClient.GetNextPacketSize">
            <summary>
            Gets the size of the next packet
            </summary>
            <returns>The next packet's size</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioCaptureClient.ReleaseBuffer(System.Int32)">
            <summary>
            Release buffer
            </summary>
            <param name="numFramesWritten">Number of frames written</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioCaptureClient.Dispose">
            <summary>
            Release the COM object
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoInputStatusFlags">
            <summary>
            The DMO Input Status Flags
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoInputStatusFlags.None">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoInputStatusFlags.DMO_INPUT_STATUSF_ACCEPT_DATA">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveOffsetStream">
            <summary>
            Simply shifts the input stream in time, optionally
            clipping its start and end.
            (n.b. may include looping in the future)
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOffsetStream.bytesPerSample">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOffsetStream.sourceStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOffsetStream.audioStartPosition">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOffsetStream.sourceOffsetBytes">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOffsetStream.sourceLengthBytes">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOffsetStream.length">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOffsetStream.position">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOffsetStream.startTime">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOffsetStream.sourceOffset">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOffsetStream.sourceLength">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveOffsetStream.#ctor(NAudio.Wave.WaveStream,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveOffsetStream"/> class. 
            Creates a new WaveOffsetStream
            </summary>
            <param name="sourceStream">
            the source stream
            </param>
            <param name="startTime">
            the time at which we should start reading from the source stream
            </param>
            <param name="sourceOffset">
            amount to trim off the front of the source stream
            </param>
            <param name="sourceLength">
            length of time to play from source stream
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveOffsetStream.#ctor(NAudio.Wave.WaveStream)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveOffsetStream"/> class. 
            Creates a WaveOffsetStream with default settings (no offset or pre-delay,
            and whole length of source stream)
            </summary>
            <param name="sourceStream">
            The source stream
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveOffsetStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from this wave stream
            </summary>
            <param name="destBuffer">The destination buffer</param>
            <param name="offset">Offset into the destination buffer</param>
            <param name="numBytes">Number of bytes read</param>
            <returns>Number of bytes read.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveOffsetStream.HasData(System.Int32)">
            <summary>
            Determines whether this channel has any data to play
            to allow optimisation to not read, but bump position forward
            </summary>
            <param name="count">Number of bytes to read</param>
            <returns>A value indicating if this has data.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveOffsetStream.Dispose(System.Boolean)">
            <summary>
            Disposes this WaveStream
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:NAudio.Wave.WaveOffsetStream.StartTime">
            <summary>
            Gets or sets The length of time before which no audio will be played
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOffsetStream.SourceOffset">
            <summary>
            Gets or sets An offset into the source stream from which to start playing
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOffsetStream.SourceLength">
            <summary>
            Gets or sets Length of time to read from the source stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOffsetStream.BlockAlign">
            <summary>
            Gets the block alignment for this WaveStream
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOffsetStream.Length">
            <summary>
            Returns the stream length
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOffsetStream.Position">
            <summary>
            Gets or sets the current position in the stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveOffsetStream.WaveFormat">
            <summary>
            Retrieves the WaveFormat for this stream
            </summary>
            <value></value>
        </member>
        <member name="T:NAudio.Wave.WaveStreams.Mp3FileReader">
            <summary>
            Class for reading from MP3 files
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.Mp3FileReader.waveFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.Mp3FileReader.mp3Stream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.Mp3FileReader.length">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.Mp3FileReader.dataStartPosition">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.Mp3FileReader.frameLengthInBytes">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.Mp3FileReader.id3v2Tag">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.Mp3FileReader.xingHeader">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.Mp3FileReader.id3v1Tag">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.Mp3FileReader.ownInputStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.Mp3FileReader.tableOfContents">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveStreams.Mp3FileReader.sampleRate">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.Mp3FileReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveStreams.Mp3FileReader"/> class. Supports opening a MP3 file
            </summary>
            <param name="mp3FileName">Name of the MP3 file.</param>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.Mp3FileReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveStreams.Mp3FileReader"/> class.
            Opens MP3 from a stream rather than a file
            Will not dispose of this stream itself
            </summary>
            <param name="inputStream">The input stream.</param>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.Mp3FileReader.ReadNextFrame">
            <summary>
            Reads the next mp3 frame
            </summary>
            <returns>Next mp3 frame, or null if EOF</returns>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.Mp3FileReader.ReadNextFrame(System.Boolean)">
            <summary>
            Reads the next mp3 frame
            </summary>
            <param name="readData">if set to <c>true</c> [read data].</param>
            <returns>Next mp3 frame, or null if EOF</returns>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.Mp3FileReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specified sample buffer.
            </summary>
            <param name="sampleBuffer">The sample buffer.</param>
            <param name="offset">The offset.</param>
            <param name="numBytes">The num bytes.</param>
            <returns>The outcome of the function call</returns>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.Mp3FileReader.GetReadSize(System.Int32)">
            <summary>
            Recommends a number of bytes to read, given a desired number of
            milliseconds. Use this in subsequent calls to Read, to ensure that
            full blocks are read
            </summary>
            <param name="milliseconds">Number of milliseconds desired</param>
            <returns>Number of bytes to read</returns>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.Mp3FileReader.Dispose(System.Boolean)">
            <summary>
            Disposes this WaveStream
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.Mp3FileReader.TotalMilliseconds">
            <summary>
            Gets the total length of this file in milliseconds.
            </summary>
            <returns>The total milliseconds.</returns>
        </member>
        <member name="M:NAudio.Wave.WaveStreams.Mp3FileReader.FrameCount">
            <summary>
            Returns the number of frames in this file.
            </summary>
            <returns>The frame count.</returns>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.Mp3FileReader.Id3v2Tag">
            <summary>
            Gets ID3v2 tag if present
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.Mp3FileReader.Id3v1Tag">
            <summary>
            Gets ID3v1 tag if present
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.Mp3FileReader.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">
            A class derived from Stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.Mp3FileReader.WaveFormat">
            <summary>
            Retrieves the WaveFormat for this stream
            </summary>
            <value></value>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.Mp3FileReader.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.Mp3FileReader.CurrentTime">
            <summary>
            The current position in the stream in Time format
            </summary>
            <value></value>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.Mp3FileReader.TotalTime">
            <summary>
            Total length in real-time of the stream (may be an estimate for compressed files)
            </summary>
            <value></value>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.Mp3FileReader.BlockAlign">
            <summary>
            The block alignment for this wavestream. Do not modify the Position
            to anything that is not a whole multiple of this value
            </summary>
            <value></value>
        </member>
        <member name="P:NAudio.Wave.WaveStreams.Mp3FileReader.XingHeader">
            <summary>
            Gets Xing header if present
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveRecorder">
            <summary>
            Utility class to intercept audio from an IWaveProvider and
            save it to disk
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveRecorder.writer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveRecorder.source">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveRecorder.#ctor(NAudio.Wave.IWaveProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveRecorder"/> class.
            Constructs a new WaveRecorder
            </summary>
            <param name="source">The Source Wave Provider</param>
            <param name="destination">The location to write the WAV file to</param>
        </member>
        <member name="M:NAudio.Wave.WaveRecorder.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read simply returns what the source returns, but writes to disk along the way
            </summary>
            <param name="buffer">The buffer to fill of wave data.</param>
            <param name="offset">Offset into buffer</param>
            <param name="count">The number of bytes to read</param>
            <returns>
            the number of bytes written to the buffer.
            </returns>
        </member>
        <member name="M:NAudio.Wave.WaveRecorder.Dispose">
            <summary>
            Closes the WAV file
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveRecorder.WaveFormat">
            <summary>
            Gets The WaveFormat
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveFileWriter">
            <summary>
            This class writes WAV data to a .wav file on disk
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileWriter.outStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileWriter.writer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileWriter.dataSizePos">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileWriter.factSampleCountPos">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileWriter.dataChunkSize">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileWriter.format">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileWriter.overwriting">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileWriter.filename">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveFileWriter.value24">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.#ctor(System.IO.Stream,NAudio.Wave.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveFileWriter"/> class. 
            WaveFileWriter that actually writes to a stream
            </summary>
            <param name="outStream">
            Stream to be written to
            </param>
            <param name="format">
            Wave format to use
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveFileWriter"/> class. 
            Creates a new WaveFileWriter, simply overwriting the samples on an existing file
            </summary>
            <param name="filename">
            The filename
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.#ctor(System.String,NAudio.Wave.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.WaveFileWriter"/> class. 
            Creates a new WaveFileWriter
            </summary>
            <param name="filename">
            The filename to write to
            </param>
            <param name="format">
            The Wave Format of the output data
            </param>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NAudio.Wave.WaveFileWriter"/> class. 
            Finaliser - should only be called if the user forgot to close this WaveFileWriter
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.CreateWaveFile(System.String,NAudio.Wave.WaveStream)">
            <summary>
            Creates a Wave file by reading all the data from a WaveStream
            </summary>
            <param name="filename">The filename to use</param>
            <param name="stream">The source WaveStream</param>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.WriteData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the WaveFile (assumes they are already in the correct format)
            </summary>
            <param name="data">the buffer containing the wave data</param>
            <param name="offset">the offset from which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.WriteSample(System.Single)">
            <summary>
            Writes a single sample to the Wave file
            </summary>
            <param name="sample">the sample to write (assumed floating point with 1.0f as max value)</param>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.WriteData(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Writes 16 bit samples to the Wave file
            </summary>
            <param name="data">The buffer containing the wave data</param>
            <param name="offset">The offset from which to start writing</param>
            <param name="count">The number of 16 bit samples to write</param>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.WriteData(System.Single[][],System.Int32,System.Int32)">
            <summary>
            Writes float samples to the Wave file
            </summary>
            <param name="data">The buffer containing the wave data</param>
            <param name="offset">The offset from which to start writing</param>
            <param name="count">The number of float samples to write</param>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.Flush">
            <summary>
            Ensures data is written to disk
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.Close">
            <summary>
            Closes this WaveFile (calls <see>Dispose</see>)
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.Dispose">
            <summary>
            Closes this WaveFile
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.Dispose(System.Boolean)">
            <summary>
            Actually performs the close,making sure the header contains the correct data
            </summary>
            <param name="disposing">True if called from <see>Dispose</see></param>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.UpdateHeader(System.IO.BinaryWriter)">
            <summary>
            Updates the header with file size information
            </summary>
            <param name="writer">The binary writer.</param>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.WriteDataChunkHeader">
            <summary>
            Writes the data chunk header.
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveFileWriter.CreateFactChunk">
            <summary>
            Creates the fact chunk.
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFileWriter.Filename">
            <summary>
            Gets The wave file name
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFileWriter.Length">
            <summary>
            Gets Number of bytes of audio
            </summary>
        </member>
        <member name="P:NAudio.Wave.WaveFileWriter.WaveFormat">
            <summary>
            Gets WaveFormat of this wave file
            </summary>
        </member>
        <member name="T:NAudio.Wave.Mp3WaveFormatFlags">
            <summary>
            The MP3 Wave Format flags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Mp3WaveFormatFlags.PaddingIso">
            <summary>
            Originally known as MPEGLAYER3_FLAG_PADDING_ISO
            </summary>
        </member>
        <member name="F:NAudio.Wave.Mp3WaveFormatFlags.PaddingOn">
            <summary>
            Originally known as MPEGLAYER3_FLAG_PADDING_ON
            </summary>
        </member>
        <member name="F:NAudio.Wave.Mp3WaveFormatFlags.PaddingOff">
            <summary>
            Originally known as MPEGLAYER3_FLAG_PADDING_OFF
            </summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmStreamSizeFlags">
            <summary>
            The ACM Stream Size Flags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamSizeFlags.Source">
            <summary>
            Originally known as ACM_STREAMSIZEF_SOURCE
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamSizeFlags.Destination">
            <summary>
            Originally known as ACM_STREAMSIZEF_DESTINATION
            </summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmFormat">
            <summary>
            ACM Format
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormat.formatDetails">
            <summary>
            The format details.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormat.waveFormat">
            <summary>
            The wave format.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmFormat.#ctor(NAudio.Wave.Compression.AcmFormatDetails)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Compression.AcmFormat"/> class.
            </summary>
            <param name="formatDetails">The format details.</param>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmFormat.FormatIndex">
            <summary>
            Gets Format Index
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmFormat.FormatTag">
            <summary>
            Gets Format Tag
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmFormat.SupportFlags">
            <summary>
            Gets Support Flags
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmFormat.WaveFormat">
            <summary>
            Gets The WaveFormat
            </summary>    
        </member>
        <member name="P:NAudio.Wave.Compression.AcmFormat.WaveFormatByteSize">
            <summary>
            Gets WaveFormat Size
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmFormat.FormatDescription">
            <summary>
            Gets Format Description
            </summary>        
        </member>
        <member name="T:NAudio.Wave.Asio.AsioTimeInfoFlags">
            <summary>
            The ASIO Time Info Flags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.AsioTimeInfoFlags.kSystemTimeValid">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            must always be valid
            </remarks>
        </member>
        <member name="F:NAudio.Wave.Asio.AsioTimeInfoFlags.kSamplePositionValid">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            must always be valid
            </remarks>
        </member>
        <member name="F:NAudio.Wave.Asio.AsioTimeInfoFlags.kSampleRateValid">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.AsioTimeInfoFlags.kSpeedValid">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.AsioTimeInfoFlags.kSampleRateChanged">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.AsioTimeInfoFlags.kClockSourceChanged">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOCallbacks">
            <summary>
            The ASIO callbacks.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOCallbacks.pbufferSwitch">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            void (*bufferSwitch) (long doubleBufferIndex, ASIOBool directProcess);
            </remarks>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOCallbacks.psampleRateDidChange">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            void (*sampleRateDidChange) (ASIOSampleRate sRate);
            </remarks>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOCallbacks.pasioMessage">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            long (*asioMessage) (long selector, long value, void* message, double* opt);
            </remarks>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOCallbacks.pbufferSwitchTimeInfo">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
            <remarks>
            ASIOTime* (*bufferSwitchTimeInfo) (ASIOTime* params, long doubleBufferIndex, ASIOBool directProcess);
            </remarks>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOCallbacks.ASIOBufferSwitchCallBack">
            <summary>
            The delegate ASIO Buffer switch call back.
            </summary>
            <param name="doubleBufferIndex">The double buffer index.</param>
            <param name="directProcess">The direct process.</param>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOCallbacks.ASIOSampleRateDidChangeCallBack">
            <summary>
            The delegate ASIO Sample Rate did change call back.
            </summary>
            <param name="sRate">The sample rate.</param>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOCallbacks.ASIOAsioMessageCallBack">
            <summary>
            The delegate ASIO Message Call Back.
            </summary>
            <param name="selector">The Selector.</param>
            <param name="value">The value.</param>
            <param name="message">The message.</param>
            <param name="opt">The options.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOCallbacks.ASIOBufferSwitchTimeInfoCallBack">
            <summary>
            The ASIO Buffer switch time info call back.
            </summary>
            <param name="asioTimeParam">The asio time parameter.</param>
            <param name="doubleBufferIndex">The double buffer index.</param>
            <param name="directProcess">The direct process.</param>
            <returns>return ASIOTime*</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.MultimediaDeviceEnumerator">
            <summary>
            MM Device Enumerator
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.MultimediaDeviceEnumerator.comMultimediaDeviceEnumerator">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.MultimediaDeviceEnumerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.MultimediaDeviceEnumerator"/> class. 
            Creates a new MM Device Enumerator
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.MultimediaDeviceEnumerator.EnumerateAudioEndPoints(NAudio.CoreAudioApi.DataFlow,NAudio.CoreAudioApi.DeviceState)">
            <summary>
            Enumerate Audio Endpoints
            </summary>
            <param name="dataFlow">Desired DataFlow</param>
            <param name="dwStateMask">State Mask</param>
            <returns>Device Collection</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.MultimediaDeviceEnumerator.GetDefaultAudioEndpoint(NAudio.CoreAudioApi.DataFlow,NAudio.CoreAudioApi.Role)">
            <summary>
            Get Default Endpoint
            </summary>
            <param name="dataFlow">The Data Flow</param>
            <param name="role">Role of the device.</param>
            <returns>The default Device that matches the criteria.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.MultimediaDeviceEnumerator.GetDevice(System.String)">
            <summary>
            Get device by ID
            </summary>
            <param name="deviceId">The Device ID</param>
            <returns>The Device</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioClient">
            <summary>
            n.b. WORK IN PROGRESS - this code will probably do nothing but crash at the moment
            Defined in AudioClient.h
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient.Initialize(NAudio.CoreAudioApi.AudioClientShareMode,NAudio.CoreAudioApi.AudioClientStreamFlags,System.Int64,System.Int64,NAudio.Wave.WaveFormat,System.Guid@)">
            <summary>
            Initializes the specified share mode.
            </summary>
            <param name="shareMode">The share mode.</param>
            <param name="StreamFlags">The stream flags.</param>
            <param name="hnsBufferDuration">Duration of the HNS buffer.</param>
            <param name="hnsPeriodicity">The HNS periodicity.</param>
            <param name="pFormat">The p format.</param>
            <param name="AudioSessionGuid">The audio session GUID.</param>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient.GetBufferSize(System.UInt32@)">
            <summary>
            The GetBufferSize method retrieves the size (maximum capacity) of the endpoint buffer.
            </summary>
            <param name="bufferSize">Size of the buffer.</param>
            <returns>The buffer size</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient.GetStreamLatency">
            <summary>
            Gets the stream latency.
            </summary>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient.GetCurrentPadding(System.Int32@)">
            <summary>
            Gets the current padding.
            </summary>
            <param name="currentPadding">The current padding.</param>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient.IsFormatSupported(NAudio.CoreAudioApi.AudioClientShareMode,NAudio.Wave.WaveFormat,NAudio.Wave.WaveFormatExtensible@)">
            <summary>
            Determines whether [is format supported] [the specified share mode].
            </summary>
            <param name="shareMode">The share mode.</param>
            <param name="pFormat">The p format.</param>
            <param name="closestMatchFormat">The closest match format.</param>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient.GetMixFormat(System.IntPtr@)">
            <summary>
            Gets the mix format.
            </summary>
            <param name="deviceFormatPointer">The device format pointer.</param>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient.GetDevicePeriod(System.Int64@,System.Int64@)">
            <summary>
            Gets the device period.  REFERENCE_TIME is 64 bit int    
            </summary>
            <param name="defaultDevicePeriod">The default device period.</param>
            <param name="minimumDevicePeriod">The minimum device period.</param>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient.Start">
            <summary>
            Starts this instance.
            </summary>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient.Stop">
            <summary>
            Stops this instance.
            </summary>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient.Reset">
            <summary>
            Resets this instance.
            </summary>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient.SetEventHandle(System.IntPtr)">
            <summary>
            Sets the event handle.
            </summary>
            <param name="eventHandle">The event handle.</param>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioClient.GetService(System.Guid@,System.Object@)">
            <summary>
            Gets the service.
            </summary>
            <param name="interfaceId">The interface id.</param>
            <param name="interfacePointer">The interface pointer.</param>
            <returns>The HResult of the call.</returns>
        </member>
        <member name="T:NAudio.Mixer.MixerControlType">
            <summary>
            Mixer control types
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Custom">
            <summary>Custom option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.BooleanMeter">
            <summary>Boolean meter</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.SignedMeter">
            <summary>Signed meter</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.PeakMeter">
            <summary>Peak meter</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.UnsignedMeter">
            <summary>Unsigned meter</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Boolean">
            <summary>Boolean option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.OnOff">
            <summary>On Off option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Mute">
            <summary>Mute option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Mono">
            <summary>Mono option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Loudness">
            <summary>Loudness option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.StereoEnhance">
            <summary>Stereo Enhance</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Button">
            <summary>Button option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Decibels">
            <summary>Decibels option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Signed">
            <summary>Signed option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Unsigned">
            <summary>Unsigned option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Percent">
            <summary>Percent option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Slider">
            <summary>Slider option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Pan">
            <summary>Pan option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.QSoundPan">
            <summary>Q-sound pan</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Fader">
            <summary>Fader option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Volume">
            <summary>Volume option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Bass">
            <summary>Bass option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Treble">
            <summary>Treble option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Equalizer">
            <summary>Equaliser option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.SingleSelect">
            <summary>Single Select</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Mux">
            <summary>Mux option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.MultipleSelect">
            <summary>Multiple select</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.Mixer">
            <summary>Mixer option.</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.MicroTime">
            <summary>Micro time</summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlType.MilliTime">
            <summary>Milli time</summary>
        </member>
        <member name="T:NAudio.Midi.TimeSignatureEvent">
            <summary>
            Represents a MIDI time signature event
            </summary>
        </member>
        <member name="F:NAudio.Midi.TimeSignatureEvent.numerator">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.TimeSignatureEvent.denominator">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.TimeSignatureEvent.ticksInMetronomeClick">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.TimeSignatureEvent.no32ndNotesInQuarterNote">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.TimeSignatureEvent.#ctor(System.IO.BinaryReader,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.TimeSignatureEvent"/> class. 
            Reads a new time signature event from a MIDI stream
            </summary>
            <param name="br">
            The MIDI stream
            </param>
            <param name="length">
            The data length
            </param>
        </member>
        <member name="M:NAudio.Midi.TimeSignatureEvent.#ctor(System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.TimeSignatureEvent"/> class. 
            Creates a new TimeSignatureEvent
            </summary>
            <param name="absoluteTime">
            Time at which to create this event
            </param>
            <param name="numerator">
            The Numerator
            </param>
            <param name="denominator">
            The Denominator
            </param>
            <param name="ticksInMetronomeClick">
            Ticks in Metronome Click
            </param>
            <param name="no32ndNotesInQuarterNote">
            No of 32nd Notes in Quarter Click
            </param>
        </member>
        <member name="M:NAudio.Midi.TimeSignatureEvent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.TimeSignatureEvent"/> class.
            Creates a new time signature event with the specified parameters
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <param name="ticksInMetronomeClick">The ticks in metronome click.</param>
            <param name="no32ndNotesInQuarterNote">The no32nd notes in quarter note.</param>
            <param name="absoluteTime">The absolute time.</param>
        </member>
        <member name="M:NAudio.Midi.TimeSignatureEvent.ToString">
            <summary>
            Describes this time signature event
            </summary>
            <returns>A string describing this event</returns>
        </member>
        <member name="M:NAudio.Midi.TimeSignatureEvent.Export(System.Int64@,System.IO.BinaryWriter)">
            <summary>
            Calls base class export first, then exports the data
            specific to this event
            <seealso cref="M:NAudio.Midi.MidiEvent.Export(System.Int64@,System.IO.BinaryWriter)">MidiEvent.Export</seealso>
            </summary>
            <param name="absoluteTime">Absolute time used to calculate delta.
            Is updated ready for the next delta calculation</param>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="P:NAudio.Midi.TimeSignatureEvent.Numerator">
            <summary>
            Gets The Numerator
            </summary>
        </member>
        <member name="P:NAudio.Midi.TimeSignatureEvent.Denominator">
            <summary>
            Gets The Denominator
            </summary>
        </member>
        <member name="P:NAudio.Midi.TimeSignatureEvent.TicksInMetronomeClick">
            <summary>
            Gets Ticks in a metronome click
            </summary>
        </member>
        <member name="P:NAudio.Midi.TimeSignatureEvent.No32ndNotesInQuarterNote">
            <summary>
            Gets Number of 32nd notes in a quarter note
            </summary>
        </member>
        <member name="P:NAudio.Midi.TimeSignatureEvent.TimeSignature">
            <summary>
            Gets The time signature
            </summary>
        </member>
        <member name="T:NAudio.Gui.VolumeMeter">
            <summary>
            Implements a rudimentary volume meter
            </summary>
        </member>
        <member name="F:NAudio.Gui.VolumeMeter.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NAudio.Gui.VolumeMeter.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NAudio.Gui.VolumeMeter.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NAudio.Gui.VolumeMeter.foregroundBrush">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.VolumeMeter.amplitude">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.VolumeMeter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.VolumeMeter"/> class. 
            Basic volume meter
            </summary>
        </member>
        <member name="M:NAudio.Gui.VolumeMeter.OnForeColorChanged(System.EventArgs)">
            <summary>
            On Fore Color Changed
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.VolumeMeter.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the volume meter
            </summary>
            <param name="pe">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:NAudio.Gui.VolumeMeter.Amplitude">
            <summary>
            Gets or sets Current Value
            </summary>
        </member>
        <member name="P:NAudio.Gui.VolumeMeter.MinDb">
            <summary>
            Gets or sets Minimum decibels
            </summary>
        </member>
        <member name="P:NAudio.Gui.VolumeMeter.MaxDb">
            <summary>
            Gets or sets Maximum decibels
            </summary>
        </member>
        <member name="P:NAudio.Gui.VolumeMeter.Orientation">
            <summary>
            Gets or sets Meter orientation
            </summary>
        </member>
        <member name="T:NAudio.FileFormats.SoundFont.GeneratorEnum">
            <summary>
            Generator types
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.StartAddressOffset">
            <summary>Start address offset</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.EndAddressOffset">
            <summary>End address offset</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.StartLoopAddressOffset">
            <summary>Start loop address offset</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.EndLoopAddressOffset">
            <summary>End loop address offset</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.StartAddressCoarseOffset">
            <summary>Start address coarse offset</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.ModulationLFOToPitch">
            <summary>Modulation LFO to pitch</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.VibratoLFOToPitch">
            <summary>Vibrato LFO to pitch</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.ModulationEnvelopeToPitch">
            <summary>Modulation envelope to pitch</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.InitialFilterCutoffFrequency">
            <summary>Initial filter cutoff frequency</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.InitialFilterQ">
            <summary>Initial filter Q</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.ModulationLFOToFilterCutoffFrequency">
            <summary>Modulation LFO to filter Cutoff frequency</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.ModulationEnvelopeToFilterCutoffFrequency">
            <summary>Modulation envelope to filter cutoff frequency</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.EndAddressCoarseOffset">
            <summary>End address coarse offset</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.ModulationLFOToVolume">
            <summary>Modulation LFO to volume</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.Unused1">
            <summary>Unused option</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.ChorusEffectsSend">
            <summary>Chorus effects send</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.ReverbEffectsSend">
            <summary>Reverb effects send</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.Pan">
            <summary>Pan option.</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.Unused2">
            <summary>Unused option.</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.Unused3">
            <summary>Unused option.</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.Unused4">
            <summary>Unused option.</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.DelayModulationLFO">
            <summary>Delay modulation LFO</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.FrequencyModulationLFO">
            <summary>Frequency modulation LFO</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.DelayVibratoLFO">
            <summary>Delay vibrato LFO</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.FrequencyVibratoLFO">
            <summary>Frequency vibrato LFO</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.DelayModulationEnvelope">
            <summary>Delay modulation envelope</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.AttackModulationEnvelope">
            <summary>Attack modulation envelope</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.HoldModulationEnvelope">
            <summary>Hold modulation envelope</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.DecayModulationEnvelope">
            <summary>Decay modulation envelope</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.SustainModulationEnvelope">
            <summary>Sustain modulation envelop</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.ReleaseModulationEnvelope">
            <summary>Release modulation envelope</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.KeyNumberToModulationEnvelopeHold">
            <summary>Key number to modulation envelope hold</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.KeyNumberToModulationEnvelopeDecay">
            <summary>Key number to modulation envelope decay</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.DelayVolumeEnvelope">
            <summary>Delay volume envelope</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.AttackVolumeEnvelope">
            <summary>Attack volume envelope</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.HoldVolumeEnvelope">
            <summary>Hold volume envelope</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.DecayVolumeEnvelope">
            <summary>Decay volume envelope</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.SustainVolumeEnvelope">
            <summary>Sustain volume envelope</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.ReleaseVolumeEnvelope">
            <summary>Release volume envelope</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.KeyNumberToVolumeEnvelopeHold">
            <summary>Key number to volume envelope hold</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.KeyNumberToVolumeEnvelopeDecay">
            <summary>Key number to volume envelope decay</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.Instrument">
            <summary>Instrument option.</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.Reserved1">
            <summary>Reserved option.</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.KeyRange">
            <summary>Key range option</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.VelocityRange">
            <summary>Velocity range</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.StartLoopAddressCoarseOffset">
            <summary>Start loop address coarse offset</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.KeyNumber">
            <summary>Key number</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.Velocity">
            <summary>Velocity option.</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.InitialAttenuation">
            <summary>Initial attenuation</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.Reserved2">
            <summary>Reserved option.</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.EndLoopAddressCoarseOffset">
            <summary>End loop address coarse offset</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.CoarseTune">
            <summary>Coarse tune</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.FineTune">
            <summary>Fine tune option</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.SampleID">
            <summary>Sample ID option</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.SampleModes">
            <summary>Sample modes</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.Reserved3">
            <summary>Reserved option.</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.ScaleTuning">
            <summary>Scale tuning</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.ExclusiveClass">
            <summary>Exclusive class</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.OverridingRootKey">
            <summary>Overriding root key</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.Unused5">
            <summary>Unused option.</summary>
        </member>
        <member name="F:NAudio.FileFormats.SoundFont.GeneratorEnum.UnusedEnd">
            <summary>Unused option.</summary>
        </member>
        <member name="T:NAudio.FileFormats.SoundFont.GeneratorBuilder">
            <summary>
            The generator builder
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.GeneratorBuilder.Read(System.IO.BinaryReader)">
            <summary>
            Reads the specified br.
            </summary>
            <param name="br">The binary reader.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.GeneratorBuilder.Write(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes the specified bw.
            </summary>
            <param name="bw">The binary writer.</param>
            <param name="o">The object.</param>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.GeneratorBuilder.Load(NAudio.FileFormats.SoundFont.Instrument[])">
            <summary>
            Loads the specified instruments.
            </summary>
            <param name="instruments">The instruments.</param>
        </member>
        <member name="M:NAudio.FileFormats.SoundFont.GeneratorBuilder.Load(NAudio.SoundFont.SampleHeader[])">
            <summary>
            Loads the specified sample headers.
            </summary>
            <param name="sampleHeaders">The sample headers.</param>
        </member>
        <member name="P:NAudio.FileFormats.SoundFont.GeneratorBuilder.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:NAudio.FileFormats.SoundFont.GeneratorBuilder.Generators">
            <summary>
            Gets the generators.
            </summary>
            <value>The generators.</value>
        </member>
        <member name="T:NAudio.FileFormats.Mp3.MpegLayer">
            <summary>
            MPEG Layer flags
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.MpegLayer.Reserved">
            <summary>
            Reserved option.
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.MpegLayer.Layer3">
            <summary>
            Layer 3 option
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.MpegLayer.Layer2">
            <summary>
            Layer 2 option
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.MpegLayer.Layer1">
            <summary>
            Layer 1 option
            </summary>
        </member>
        <member name="T:NAudio.FileFormats.Mp3.Id3v2Tag">
            <summary>
            An ID3v2 Tag
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Id3v2Tag.tagStartPosition">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Id3v2Tag.tagEndPosition">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Id3v2Tag.rawData">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.Mp3.Id3v2Tag.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.FileFormats.Mp3.Id3v2Tag"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:NAudio.FileFormats.Mp3.Id3v2Tag.ReadTag(System.IO.Stream)">
            <summary>
            Reads an ID3v2 tag from a stream
            </summary>
            <param name="input">The input.</param>
            <returns>A Id3v2 Tag</returns>
        </member>
        <member name="P:NAudio.FileFormats.Mp3.Id3v2Tag.RawData">
            <summary>
            Gets Raw data from this tag
            </summary>
        </member>
        <member name="T:NAudio.Dmo.ResamplerMediaComObject">
            <summary>
            From wmcodecsdp.h
            Implements:
            - IMediaObject 
            - IMFTransform (Media foundation - we will leave this for now as there is loads of MF stuff)
            - IPropertyStore 
            - IWMResamplerProps 
            Can resample PCM or IEEE
            </summary>
        </member>
        <member name="T:NAudio.Dmo.IEnumDmo">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Dmo.IEnumDmo.Next(System.Int32,System.Guid@,System.IntPtr@,System.Int32@)">
            <summary>
            Nexts the specified items to fetch. lets do one at a time to keep it simple - don't call with itemsToFetch > 1
            </summary>
            <param name="itemsToFetch">The items to fetch.</param>
            <param name="clsid">The CLSID.</param>
            <param name="name">The name of the DMO.</param>
            <param name="itemsFetched">The items fetched.</param>
            <returns>TODO: Fill in with actual documentation</returns>
            <remarks>
            int Next(int itemsToFetch, CLSID[] clsids, string[] names, out int itemsFetched);
            </remarks>
        </member>
        <member name="M:NAudio.Dmo.IEnumDmo.Skip(System.Int32)">
            <summary>
            Skips the specified items to skip.
            </summary>
            <param name="itemsToSkip">The items to skip.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IEnumDmo.Reset">
            <summary>
            Resets this instance.
            </summary>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Dmo.IEnumDmo.Clone(NAudio.Dmo.IEnumDmo@)">
            <summary>
            Clones the specified enum pointer.
            </summary>
            <param name="enumPointer">The enum pointer.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.Dmo.DmoOutputDataBuffer">
            <summary>
            DMO Output Data Buffer
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoOutputDataBuffer.pBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoOutputDataBuffer.dwStatus">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoOutputDataBuffer.rtTimestamp">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoOutputDataBuffer.referenceTimeDuration">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Dmo.DmoOutputDataBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Dmo.DmoOutputDataBuffer"/> struct. 
            Creates a new DMO Output Data Buffer structure
            </summary>
            <param name="maxBufferSize">
            Maximum buffer size
            </param>
        </member>
        <member name="M:NAudio.Dmo.DmoOutputDataBuffer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NAudio.Dmo.DmoOutputDataBuffer.RetrieveData(System.Byte[],System.Int32)">
            <summary>
            Retrives the data in this buffer
            </summary>
            <param name="data">Buffer to receive data</param>
            <param name="offset">Offset into buffer</param>
        </member>
        <member name="P:NAudio.Dmo.DmoOutputDataBuffer.MediaBuffer">
            <summary>
            Gets Media Buffer
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoOutputDataBuffer.Length">
            <summary>
            Gets Length of data in buffer
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoOutputDataBuffer.StatusFlags">
            <summary>
            Gets Status Flags
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoOutputDataBuffer.Timestamp">
            <summary>
            Gets The Timestamp
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoOutputDataBuffer.Duration">
            <summary>
            Gets The Duration
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoOutputDataBuffer.MoreDataAvailable">
            <summary>
            Gets a value indicating whether Is more data available
            If true, ProcessOuput should be called again
            </summary>
        </member>
        <member name="T:NAudio.Wave.ResamplerDmoStream">
            <summary>
            Wave Stream for converting between sample rates
            </summary>
        </member>
        <member name="F:NAudio.Wave.ResamplerDmoStream.inputProvider">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.ResamplerDmoStream.inputStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.ResamplerDmoStream.outputFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.ResamplerDmoStream.resampler">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.ResamplerDmoStream.position">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.ResamplerDmoStream.inputMediaBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.ResamplerDmoStream.outputBuffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.ResamplerDmoStream.#ctor(NAudio.Wave.IWaveProvider,NAudio.Wave.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.ResamplerDmoStream"/> class. 
            WaveStream to resample using the DMO Resampler
            </summary>
            <param name="inputProvider">
            Input Stream
            </param>
            <param name="outputFormat">
            Desired Output Format
            </param>
        </member>
        <member name="M:NAudio.Wave.ResamplerDmoStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from input stream
            </summary>
            <param name="buffer">The buffer</param>
            <param name="offset">offset into buffer</param>
            <param name="count">Bytes required</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:NAudio.Wave.ResamplerDmoStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Wave.ResamplerDmoStream.InputToOutputPosition(System.Int64)">
            <summary>
            Inputs to output position.
            </summary>
            <param name="inputPosition">The input position.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Wave.ResamplerDmoStream.OutputToInputPosition(System.Int64)">
            <summary>
            Outputs to input position.
            </summary>
            <param name="outputPosition">The output position.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="P:NAudio.Wave.ResamplerDmoStream.WaveFormat">
            <summary>
            Stream Wave Format
            </summary>
        </member>
        <member name="P:NAudio.Wave.ResamplerDmoStream.InputStream">
            <summary>
            Gets Input Stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.ResamplerDmoStream.Length">
            <summary>
            Stream length in bytes
            </summary>
        </member>
        <member name="P:NAudio.Wave.ResamplerDmoStream.Position">
            <summary>
            Stream position in bytes
            </summary>
        </member>
        <member name="T:NAudio.Wave.MmeInterop.WaveHeaderFlags">
            <summary>
            Wave Header Flags enumeration
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveHeaderFlags.BeginLoop">
            <summary>
            WHDR_BEGINLOOP
            This buffer is the first buffer in a loop.  This flag is used only with output buffers.
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveHeaderFlags.Done">
            <summary>
            WHDR_DONE
            Set by the device driver to indicate that it is finished with the buffer and is returning it to the application.
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveHeaderFlags.EndLoop">
            <summary>
            WHDR_ENDLOOP
            This buffer is the last buffer in a loop.  This flag is used only with output buffers.
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveHeaderFlags.InQueue">
            <summary>
            WHDR_INQUEUE
            Set by Windows to indicate that the buffer is queued for playback.
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveHeaderFlags.Prepared">
            <summary>
            WHDR_PREPARED
            Set by Windows to indicate that the buffer has been prepared with the waveInPrepareHeader or waveOutPrepareHeader function.
            </summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmStream">
            <summary>
            AcmStream encapsulates an Audio Compression Manager Stream
            used to convert audio from one format to another
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStream.streamHandle">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStream.driverHandle">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStream.streamHeader">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStream.sourceFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStream.#ctor(NAudio.Wave.WaveFormat,NAudio.Wave.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Compression.AcmStream"/> class. 
            Creates a new ACM stream to convert one format to another. Note that
            not all conversions can be done in one step
            </summary>
            <param name="sourceFormat">
            The source audio format
            </param>
            <param name="destFormat">
            The destination audio format
            </param>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStream.#ctor(System.IntPtr,NAudio.Wave.WaveFormat,NAudio.Wave.Compression.WaveFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Compression.AcmStream"/> class. 
            Creates a new ACM stream to convert one format to another, using a 
            specified driver identified and wave filter
            </summary>
            <param name="driverId">
            the driver identifier
            </param>
            <param name="sourceFormat">
            the source format
            </param>
            <param name="waveFilter">
            the wave filter
            </param>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStream.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NAudio.Wave.Compression.AcmStream"/> class. 
            Frees resources associated with this ACM Stream
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStream.SuggestPcmFormat(NAudio.Wave.WaveFormat)">
            <summary>
            Suggests an appropriate PCM format that the compressed format can be converted
            to in one step
            </summary>
            <param name="compressedFormat">The compressed format</param>
            <returns>The PCM format</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStream.SourceToDest(System.Int32)">
            <summary>
            Returns the number of output bytes for a given number of input bytes
            </summary>
            <param name="source">Number of input bytes</param>
            <returns>Number of output bytes</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStream.DestToSource(System.Int32)">
            <summary>
            Returns the number of source bytes for a given number of destination bytes
            </summary>
            <param name="dest">Number of destination bytes</param>
            <returns>Number of source bytes</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStream.Convert(System.Int32,System.Int32@)">
            <summary>
            Converts the contents of the SourceBuffer into the DestinationBuffer
            </summary>
            <param name="bytesToConvert">The number of bytes in the SourceBuffer
            that need to be converted</param>
            <param name="sourceBytesConverted">The number of source bytes actually converted</param>
            <returns>The number of converted bytes in the DestinationBuffer</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStream.Convert(System.Int32)">
            <summary>
            Converts the contents of the SourceBuffer into the DestinationBuffer
            </summary>
            <param name="bytesToConvert">The number of bytes in the SourceBuffer
            that need to be converted</param>
            <returns>The number of converted bytes in the DestinationBuffer</returns>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStream.Dispose">
            <summary>
            Frees resources associated with this ACM Stream
            </summary>
        </member>
        <member name="M:NAudio.Wave.Compression.AcmStream.Dispose(System.Boolean)">
            <summary>
            Frees resources associated with this ACM Stream
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmStream.SourceBuffer">
            <summary>
            Gets Returns the Source Buffer. Fill this with data prior to calling convert
            </summary>
        </member>
        <member name="P:NAudio.Wave.Compression.AcmStream.DestBuffer">
            <summary>
            Gets Returns the Destination buffer. This will contain the converted data
            after a successful call to Convert
            </summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmFormatDetails">
            <summary>
            <para>Originally known as ACMFORMATDETAILS</para>
            <para>For more information, see http://msdn.microsoft.com/en-us/library/dd742913%28VS.85%29.aspx.</para>
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatDetails.FormatDescriptionChars">
            <summary>
            Originally known as ACMFORMATDETAILS_FORMAT_CHARS
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatDetails.structSize">
            <summary>
            DWORD cbStruct; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatDetails.formatIndex">
            <summary>
            DWORD dwFormatIndex; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatDetails.formatTag">
            <summary>
            DWORD dwFormatTag; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatDetails.supportFlags">
            <summary>
            DWORD fdwSupport; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatDetails.waveFormatPointer">
            <summary>
            LPWAVEFORMATEX pwfx; 
            </summary>    
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatDetails.waveFormatByteSize">
            <summary>
            DWORD cbwfx; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatDetails.formatDescription">
            <summary>
            TCHAR szFormat[ACMFORMATDETAILS_FORMAT_CHARS];
            </summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmDriverDetailsSupportFlags">
            <summary>
            Flags indicating what support a particular ACM driver has
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetailsSupportFlags.Codec">
            <summary>ACMDRIVERDETAILS_SUPPORTF_CODEC - Codec</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetailsSupportFlags.Converter">
            <summary>ACMDRIVERDETAILS_SUPPORTF_CONVERTER - Converter</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetailsSupportFlags.Filter">
            <summary>ACMDRIVERDETAILS_SUPPORTF_FILTER - Filter</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetailsSupportFlags.Hardware">
            <summary>ACMDRIVERDETAILS_SUPPORTF_HARDWARE - Hardware</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetailsSupportFlags.Async">
            <summary>ACMDRIVERDETAILS_SUPPORTF_ASYNC - Async</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetailsSupportFlags.Local">
            <summary>ACMDRIVERDETAILS_SUPPORTF_LOCAL - Local</summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmDriverDetailsSupportFlags.Disabled">
            <summary>ACMDRIVERDETAILS_SUPPORTF_DISABLED - Disabled</summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Role">
            <summary>
            The ERole enumeration defines constants that indicate the role 
            that the system has assigned to an audio endpoint device
            </summary>
            <remarks>
            For more information, see http://msdn.microsoft.com/en-us/library/dd370842%28VS.85%29.aspx.
            </remarks>
        </member>
        <member name="F:NAudio.CoreAudioApi.Role.Console">
            <summary>
            Games, system notification sounds, and voice commands.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Role.Multimedia">
            <summary>
            Music, movies, narration, and live music recording
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.Role.Communications">
            <summary>
            Voice communications (talking to another person).
            </summary>
        </member>
        <member name="T:NAudio.Mixer.Mixer">
            <summary>Represents a Windows mixer device</summary>
        </member>
        <member name="F:NAudio.Mixer.Mixer.caps">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.Mixer.mixerHandle">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.Mixer.mixerHandleType">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Mixer.Mixer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Mixer.Mixer"/> class. Connects to the specified mixer
            </summary>
            <param name="mixerIndex">
            The index of the mixer to use. 
            This should be between zero and NumberOfDevices - 1
            </param>
        </member>
        <member name="M:NAudio.Mixer.Mixer.GetDestination(System.Int32)">
            <summary>
            Retrieve the specified MixerDestination object
            </summary>
            <param name="destinationIndex">The ID of the destination to use.
            Should be between 0 and DestinationCount - 1</param>
            <returns>The Destination.</returns>
        </member>
        <member name="P:NAudio.Mixer.Mixer.Mixers">
            <summary>
            Gets A way to enumerate all available devices
            </summary>
        </member>
        <member name="P:NAudio.Mixer.Mixer.NumberOfDevices">
            <summary>Gets The number of mixer devices available</summary>    
        </member>
        <member name="P:NAudio.Mixer.Mixer.DestinationCount">
            <summary>Gets The number of destinations this mixer supports</summary>
        </member>
        <member name="P:NAudio.Mixer.Mixer.Name">
            <summary>Gets The name of this mixer device</summary>
        </member>
        <member name="P:NAudio.Mixer.Mixer.Manufacturer">
            <summary>Gets The manufacturer code for this mixer device</summary>
        </member>
        <member name="P:NAudio.Mixer.Mixer.ProductID">
            <summary>Gets The product identifier code for this mixer device</summary>
        </member>
        <member name="P:NAudio.Mixer.Mixer.Destinations">
            <summary>
            Gets A way to enumerate the destinations
            </summary>
        </member>
        <member name="T:NAudio.Mixer.CustomMixerControl">
            <summary>
            Custom Mixer control
            </summary>
        </member>
        <member name="M:NAudio.Mixer.CustomMixerControl.#ctor(NAudio.Mixer.MixerInterop.MIXERCONTROL,System.IntPtr,NAudio.Mixer.MixerFlags,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Mixer.CustomMixerControl"/> class.
            </summary>
            <param name="mixerControl">The mixer control.</param>
            <param name="mixerHandle">The mixer handle.</param>
            <param name="mixerHandleType">Type of the mixer handle.</param>
            <param name="nChannels">The n channels.</param>
        </member>
        <member name="M:NAudio.Mixer.CustomMixerControl.GetDetails(System.IntPtr)">
            <summary>
            Get the data for this custom control
            </summary>
            <param name="pDetails">pointer to memory to receive data</param>
        </member>
        <member name="T:NAudio.Midi.TextEvent">
            <summary>
            Represents a MIDI text event
            </summary>
        </member>
        <member name="F:NAudio.Midi.TextEvent.text">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.TextEvent.#ctor(System.IO.BinaryReader,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.TextEvent"/> class. 
            Reads a new text event from a MIDI stream
            </summary>
            <param name="br">
            The MIDI stream
            </param>
            <param name="length">
            The data length
            </param>
        </member>
        <member name="M:NAudio.Midi.TextEvent.#ctor(System.String,NAudio.Midi.MetaEventType,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.TextEvent"/> class. 
            Creates a new TextEvent
            </summary>
            <param name="text">
            The text in this type
            </param>
            <param name="metaEventType">
            MetaEvent type (must be one that is
            associated with text data)
            </param>
            <param name="absoluteTime">
            Absolute time of this event
            </param>
        </member>
        <member name="M:NAudio.Midi.TextEvent.ToString">
            <summary>
            Describes this MIDI text event
            </summary>
            <returns>A string describing this event</returns>
        </member>
        <member name="M:NAudio.Midi.TextEvent.Export(System.Int64@,System.IO.BinaryWriter)">
            <summary>
            Calls base class export first, then exports the data
            specific to this event
            <seealso cref="M:NAudio.Midi.MidiEvent.Export(System.Int64@,System.IO.BinaryWriter)">MidiEvent.Export</seealso>
            </summary>
            <param name="absoluteTime">Absolute time used to calculate delta.
            Is updated ready for the next delta calculation</param>
            <param name="writer">Stream to write to</param>
        </member>
        <member name="P:NAudio.Midi.TextEvent.Text">
            <summary>
            Gets or sets The contents of this text event
            </summary>
        </member>
        <member name="T:NAudio.Gui.WaveViewer">
            <summary>
            Control for viewing waveforms
            </summary>
        </member>
        <member name="F:NAudio.Gui.WaveViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="F:NAudio.Gui.WaveViewer.waveStream">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.WaveViewer.samplesPerPixel">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.WaveViewer.startPosition">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.WaveViewer.bytesPerSample">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.WaveViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.WaveViewer"/> class. 
            Creates a new WaveViewer control
            </summary>
        </member>
        <member name="M:NAudio.Gui.WaveViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Gui.WaveViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.WaveViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NAudio.Gui.WaveViewer.WaveStream">
            <summary>
            Gets or sets the associated wavestream
            </summary>
        </member>
        <member name="P:NAudio.Gui.WaveViewer.SamplesPerPixel">
            <summary>
            Gets or sets The zoom level, in samples per pixel
            </summary>
        </member>
        <member name="P:NAudio.Gui.WaveViewer.StartPosition">
            <summary>
            Gets or sets Start position (currently in bytes)
            </summary>
        </member>
        <member name="T:NAudio.Gui.TrackView.TimeLinePositionClickedEventArgs">
            <summary>
            TimeLine Position Clicked event arguments
            </summary>
        </member>
        <member name="F:NAudio.Gui.TrackView.TimeLinePositionClickedEventArgs.position">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.TrackView.TimeLinePositionClickedEventArgs.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.TrackView.TimeLinePositionClickedEventArgs"/> class.
            Creates a new TimeLinePositionClickedEventArgs
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="P:NAudio.Gui.TrackView.TimeLinePositionClickedEventArgs.Position">
            <summary>
            Gets The position clicked
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.Preset">
            <summary>
            A SoundFont Preset
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Preset.startPresetZoneIndex">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Preset.endPresetZoneIndex">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Preset.library">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Preset.genre">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Preset.morphology">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Preset.name">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Preset.patchNumber">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Preset.bank">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Preset.zones">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.Preset.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NAudio.SoundFont.Preset.Name">
            <summary>
            Gets or sets Preset name
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.Preset.PatchNumber">
            <summary>
            Gets or sets Patch Number
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.Preset.Bank">
            <summary>
            Gets or sets Bank number
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.Preset.Zones">
            <summary>
            Gets or sets The Zones
            </summary>
        </member>
        <member name="T:NAudio.FileFormats.Mp3.MpegVersion">
            <summary>
            MPEG Version Flags
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.MpegVersion.Version25">
            <summary>
            Version 2.5
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.MpegVersion.Reserved">
            <summary>
            Reserved for later use
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.MpegVersion.Version2">
            <summary>
            Version 2 option
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.MpegVersion.Version1">
            <summary>
            Version 1 option
            </summary>
        </member>
        <member name="T:NAudio.FileFormats.Mp3.Mp3Frame">
            <summary>
            Represents an MP3 Frame
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Mp3Frame.bitRatesLayer3Version1">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Mp3Frame.bitRatesLayer3Version2">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Mp3Frame.sampleRatesVersion1">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Mp3Frame.sampleRatesVersion2">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Mp3Frame.sampleRatesVersion25">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Mp3Frame.bitRate">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Mp3Frame.crcPresent">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Mp3Frame.crc">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Mp3Frame.sampleRate">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Mp3Frame.frameLengthInBytes">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Mp3Frame.rawData">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Mp3Frame.mpegVersion">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Mp3Frame.layer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Mp3.Mp3Frame.channelMode">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.Mp3.Mp3Frame.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.FileFormats.Mp3.Mp3Frame"/> class. Reads an MP3Frame from a stream
            </summary>
            <param name="input">The input.</param>
            <remarks>
            http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm
            has some good info
            </remarks>
        </member>
        <member name="M:NAudio.FileFormats.Mp3.Mp3Frame.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.FileFormats.Mp3.Mp3Frame"/> class. Reads an MP3Frame from a stream
            </summary>
            <param name="input">The input.</param>
            <param name="readData">if set to <c>true</c> [read data].</param>
            <remarks>
            http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm
            has some good info
            </remarks>
        </member>
        <member name="M:NAudio.FileFormats.Mp3.Mp3Frame.CheckForRiff(System.IO.Stream,System.IO.BinaryReader,System.Byte[])">
            <summary>
            Checks for riff.
            </summary>
            <param name="input">The input.</param>
            <param name="reader">The reader.</param>
            <param name="headerBytes">The header bytes.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="P:NAudio.FileFormats.Mp3.Mp3Frame.SampleRate">
            <summary>
            Gets Sample rate of this frame
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Mp3.Mp3Frame.FrameLength">
            <summary>
            Gets Frame length in bytes
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Mp3.Mp3Frame.BitRate">
            <summary>
            Gets the Bit Rate
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Mp3.Mp3Frame.RawData">
            <summary>
            Gets Raw frame data
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Mp3.Mp3Frame.MpegVersion">
            <summary>
            Gets MPEG Version
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Mp3.Mp3Frame.MpegLayer">
            <summary>
            Gets MPEG Layer
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Mp3.Mp3Frame.ChannelMode">
            <summary>
            Gets Channel Mode
            </summary>
        </member>
        <member name="T:NAudio.Dsp.Complex">
            <summary>
            Type to represent complex number
            </summary>
        </member>
        <member name="F:NAudio.Dsp.Complex.X">
            <summary>
            The Real Part
            </summary>
        </member>
        <member name="F:NAudio.Dsp.Complex.Y">
            <summary>
            Imaginary Part
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoGuids">
            <summary>
            DMO Guids for use with DMOEnum
            dmoreg.h
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoGuids.DMOCATEGORY_AUDIO_DECODER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoGuids.DMOCATEGORY_AUDIO_ENCODER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoGuids.DMOCATEGORY_VIDEO_DECODER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoGuids.DMOCATEGORY_VIDEO_ENCODER">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoGuids.DMOCATEGORY_AUDIO_EFFECT">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoGuids.DMOCATEGORY_VIDEO_EFFECT">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoGuids.DMOCATEGORY_AUDIO_CAPTURE_EFFECT">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioRenderClient">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioRenderClient.GetBuffer(System.Int32,System.IntPtr@)">
            <summary>
            Gets the buffer.
            </summary>
            <param name="numFramesRequested">The num frames requested.</param>
            <param name="dataBufferPointer">The data buffer pointer.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioRenderClient.ReleaseBuffer(System.Int32,NAudio.CoreAudioApi.AudioClientBufferFlags)">
            <summary>
            Releases the buffer.
            </summary>
            <param name="numFramesWritten">The num frames written.</param>
            <param name="bufferFlags">The buffer flags.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolumeCallback">
            <summary>
            Wraps the COM IAudioEndpointVolumeCallback.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolumeCallback.OnNotify(System.IntPtr)">
            <summary>
            Called when [notify].
            </summary>
            <param name="pNotifyData">The p notify data.</param>
            <returns>A return value for this call.</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioRenderClient">
            <summary>
            Audio Render Client
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioRenderClient.audioRenderClientInterface">
            <summary>
            The audio render client interface.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioRenderClient.#ctor(NAudio.CoreAudioApi.Interfaces.IAudioRenderClient)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.AudioRenderClient"/> class.
            </summary>
            <param name="audioRenderClientInterface">The audio render client interface.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioRenderClient.GetBuffer(System.Int32)">
            <summary>
            Gets a pointer to the buffer
            </summary>
            <param name="numFramesRequested">Number of frames requested</param>
            <returns>Pointer to the buffer</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioRenderClient.ReleaseBuffer(System.Int32,NAudio.CoreAudioApi.AudioClientBufferFlags)">
            <summary>
            Release buffer
            </summary>
            <param name="numFramesWritten">Number of frames written</param>
            <param name="bufferFlags">Buffer flags</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioRenderClient.Dispose">
            <summary>
            Release the COM object
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioEndpointVolumeStepInformation">
            <summary>
            Audio Endpoint Volume Step Information
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioEndpointVolumeStepInformation._Step">
            <summary>
            The field for the step.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioEndpointVolumeStepInformation._StepCount">
            <summary>
            The field for the step count.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolumeStepInformation.#ctor(NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.AudioEndpointVolumeStepInformation"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeStepInformation.Step">
            <summary>
            Gets the current Step
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeStepInformation.StepCount">
            <summary>
            Gets the current StepCount
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioEndpointVolumeCallback">
            <summary>
            This class implements the IAudioEndpointVolumeCallback interface, it is implemented in this class because implementing it on AudioEndpointVolume (where the functionality is really wanted, would cause the OnNotify function to show up in the public API.  
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioEndpointVolumeCallback.parent">
            <summary>
            The parent audio endpoint volume.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolumeCallback.#ctor(NAudio.CoreAudioApi.AudioEndpointVolume)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.AudioEndpointVolumeCallback"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolumeCallback.OnNotify(System.IntPtr)">
            <summary>
            Called when [notify].
            </summary>
            <param name="notifyData">The notify data.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.Dmo.DmoOutputDataBufferFlags">
            <summary>
            DMO Output Data Buffer Flags
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoOutputDataBufferFlags.None">
            <summary>
            No buffer flags
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoOutputDataBufferFlags.SyncPoint">
            <summary>
            Originally known as DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoOutputDataBufferFlags.Time">
            <summary>
            Originally known as DMO_OUTPUT_DATA_BUFFERF_TIME
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoOutputDataBufferFlags.TimeLength">
            <summary>
            Originally known as DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoOutputDataBufferFlags.Incomplete">
            <summary>
            Originally known as DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE
            </summary>
        </member>
        <member name="T:NAudio.Wave.CueWaveFileWriter">
            <summary>
            A wave file writer that adds cue support
            </summary>
        </member>
        <member name="F:NAudio.Wave.CueWaveFileWriter.cues">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.CueWaveFileWriter.#ctor(System.String,NAudio.Wave.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.CueWaveFileWriter"/> class.
            Writes a wave file, including a cues chunk
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="waveFormat">The wave format.</param>
        </member>
        <member name="M:NAudio.Wave.CueWaveFileWriter.AddCue(System.Int32,System.String)">
            <summary>
            Adds a cue to the Wave file
            </summary>
            <param name="position">Sample position</param>
            <param name="label">Label text</param>
        </member>
        <member name="M:NAudio.Wave.CueWaveFileWriter.UpdateHeader(System.IO.BinaryWriter)">
            <summary>
            Updates the header, and writes the cues out
            </summary>
            <param name="writer">The binary writer.</param>
        </member>
        <member name="M:NAudio.Wave.CueWaveFileWriter.WriteCues(System.IO.BinaryWriter)">
            <summary>
            Writes the cues.
            </summary>
            <param name="w">The binary writer.</param>
        </member>
        <member name="T:NAudio.Wave.Mp3WaveFormatId">
            <summary>
            The MP3 Wave Format ID.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Mp3WaveFormatId.Unknown">
            <summary>Originally known as MPEGLAYER3_ID_UNKNOWN</summary>
        </member>
        <member name="F:NAudio.Wave.Mp3WaveFormatId.Mpeg">
            <summary>Originally known as MPEGLAYER3_ID_MPEG</summary>
        </member>
        <member name="F:NAudio.Wave.Mp3WaveFormatId.ConstantFrameSize">
            <summary>Originally known as MPEGLAYER3_ID_CONSTANTFRAMESIZE</summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmStreamHeaderStatusFlags">
            <summary>
            The ACM Stream Header Status Flags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeaderStatusFlags.Done">
            <summary>
            Originally known as ACMSTREAMHEADER_STATUSF_DONE
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeaderStatusFlags.Prepared">
            <summary>
            Originally known as ACMSTREAMHEADER_STATUSF_PREPARED
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmStreamHeaderStatusFlags.InQueue">
            <summary>
            Originally known as ACMSTREAMHEADER_STATUSF_INQUEUE
            </summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmFormatChoose">
            <summary>
            <para>Originally known as ACMFORMATCHOOSE</para>
            <para>For more information, see http://msdn.microsoft.com/en-us/library/dd742911%28VS.85%29.aspx</para>
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.structureSize">
            <summary>
            DWORD cbStruct; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.styleFlags">
            <summary>
            DWORD fdwStyle; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.ownerWindowHandle">
            <summary>
            HWND hwndOwner; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.selectedWaveFormatPointer">
            <summary>
            LPWAVEFORMATEX pwfx; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.selectedWaveFormatByteSize">
            <summary>
            DWORD cbwfx; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.title">
            <summary>
            LPCTSTR pszTitle; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.formatTagDescription">
            <summary>
            TCHAR szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS]; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.formatDescription">
            <summary>
            TCHAR szFormat[ACMFORMATDETAILS_FORMAT_CHARS]; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.name">
            <summary>
            LPTSTR pszName; 
            n.b. can be written into
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.nameByteSize">
            <summary>
            DWORD cchName
            Should be at least 128 unless name is zero
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.formatEnumFlags">
            <summary>
            DWORD fdwEnum; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.waveFormatEnumPointer">
            <summary>
            LPWAVEFORMATEX pwfxEnum; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.instanceHandle">
            <summary>
            HINSTANCE hInstance; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.templateName">
            <summary>
            LPCTSTR pszTemplateName; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.customData">
            <summary>
            LPARAM lCustData; 
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatChoose.windowCallbackFunction">
            <summary>
            ACMFORMATCHOOSEHOOKPROC pfnHook; 
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IMMEndpoint">
            <summary>
            defined in MMDeviceAPI.h
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IMMEndpoint.GetDataFlow(NAudio.CoreAudioApi.DataFlow@)">
            <summary>
            Gets the data flow.
            </summary>
            <param name="dataFlow">The data flow.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.Mixer.MixerControlSubclass">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlSubclass.SwitchBoolean">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlSubclass.SwitchButton">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlSubclass.MeterPolled">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlSubclass.TimeMicrosecs">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlSubclass.TimeMillisecs">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlSubclass.ListSingle">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlSubclass.ListMultiple">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Mixer.MixerControlSubclass.Mask">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.SFSampleLink">
            <summary>
            Sample Link Type
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SFSampleLink.MonoSample">
            <summary>
            Mono Sample
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SFSampleLink.RightSample">
            <summary>
            Right Sample
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SFSampleLink.LeftSample">
            <summary>
            Left Sample
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SFSampleLink.LinkedSample">
            <summary>
            Linked Sample
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SFSampleLink.RomMonoSample">
            <summary>
            ROM Mono Sample
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SFSampleLink.RomRightSample">
            <summary>
            ROM Right Sample
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SFSampleLink.RomLeftSample">
            <summary>
            ROM Left Sample
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.SFSampleLink.RomLinkedSample">
            <summary>
            ROM Linked Sample
            </summary>
        </member>
        <member name="T:NAudio.SoundFont.SampleHeaderBuilder">
            <summary>
            The sample header builder
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.SampleHeaderBuilder.Read(System.IO.BinaryReader)">
            <summary>
            Reads the specified br.
            </summary>
            <param name="br">The binary reader.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.SoundFont.SampleHeaderBuilder.Write(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes the specified bw.
            </summary>
            <param name="bw">The binary writer.</param>
            <param name="o">The object.</param>
        </member>
        <member name="M:NAudio.SoundFont.SampleHeaderBuilder.RemoveEOS">
            <summary>
            Removes the EOS.
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.SampleHeaderBuilder.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:NAudio.SoundFont.SampleHeaderBuilder.SampleHeaders">
            <summary>
            Gets the sample headers.
            </summary>
            <value>The sample headers.</value>
        </member>
        <member name="T:NAudio.FileFormats.Ogg.VorbisInfo">
            <summary>
            The vorbis_info
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.VorbisInfo.version">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.VorbisInfo.channels">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.VorbisInfo.rate">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.VorbisInfo.bitrate_upper">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.VorbisInfo.bitrate_nominal">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.VorbisInfo.bitrate_lower">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.VorbisInfo.bitrate_window">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.VorbisInfo.codec_setup">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.FileFormats.Map.CakewalkMapFile">
            <summary>
            Represents a Cakewalk Drum Map file (.map)
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkMapFile.mapEntryCount">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkMapFile.drumMappings">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkMapFile.fileHeader1">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkMapFile.fileHeader2">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkMapFile.mapNameHeader">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkMapFile.outputs1Header">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkMapFile.outputs2Header">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkMapFile.outputs3Header">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkMapFile.outputs1Count">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkMapFile.outputs2Count">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkMapFile.outputs3Count">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkMapFile.mapName">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.Map.CakewalkMapFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.FileFormats.Map.CakewalkMapFile"/> class. 
            Parses a Cakewalk Drum Map file
            </summary>
            <param name="filename">
            Path of the .map file
            </param>
        </member>
        <member name="M:NAudio.FileFormats.Map.CakewalkMapFile.ToString">
            <summary>
            Describes this drum map
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NAudio.FileFormats.Map.CakewalkMapFile.ReadMapHeader(System.IO.BinaryReader)">
            <summary>
            Reads the map header.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:NAudio.FileFormats.Map.CakewalkMapFile.ReadMapEntry(System.IO.BinaryReader)">
            <summary>
            Reads the map entry.
            </summary>
            <param name="reader">The reader.</param>
            <returns>A populated CakewalkDrumMapping based on the reader.</returns>
        </member>
        <member name="M:NAudio.FileFormats.Map.CakewalkMapFile.ReadMapName(System.IO.BinaryReader)">
            <summary>
            Reads the name of the map.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:NAudio.FileFormats.Map.CakewalkMapFile.ReadOutputsSection1(System.IO.BinaryReader)">
            <summary>
            Reads the outputs section1.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:NAudio.FileFormats.Map.CakewalkMapFile.ReadOutputsSection2(System.IO.BinaryReader)">
            <summary>
            Reads the outputs section2.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:NAudio.FileFormats.Map.CakewalkMapFile.ReadOutputsSection3(System.IO.BinaryReader)">
            <summary>
            Reads the outputs section3.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="P:NAudio.FileFormats.Map.CakewalkMapFile.DrumMappings">
            <summary>
            Gets The drum mappings in this drum map
            </summary>
        </member>
        <member name="T:NAudio.Dsp.ImpulseResponseConvolution">
            <summary>
            Used for Impulse Response Convultion.
            </summary>
        </member>
        <member name="M:NAudio.Dsp.ImpulseResponseConvolution.Convolve(System.Single[],System.Single[])">
            <summary>
            A very simple mono convolution algorithm
            </summary>
            <param name="input">The input.</param>
            <param name="impulseResponse">The impulse response.</param>
            <returns>the output array</returns>
            <remarks>
            This will be very slow
            </remarks>
        </member>
        <member name="M:NAudio.Dsp.ImpulseResponseConvolution.Normalize(System.Single[])">
            <summary>
            This is actually a downwards normalize for data that will clip
            </summary>
            <param name="data">The data array.</param>
        </member>
        <member name="T:NAudio.Dsp.EnvelopeDetector">
            <summary>
            The envelope detector
            </summary>
        </member>
        <member name="F:NAudio.Dsp.EnvelopeDetector.sampleRate">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dsp.EnvelopeDetector.ms">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dsp.EnvelopeDetector.coeff">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Dsp.EnvelopeDetector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Dsp.EnvelopeDetector"/> class.
            </summary>
        </member>
        <member name="M:NAudio.Dsp.EnvelopeDetector.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Dsp.EnvelopeDetector"/> class.
            </summary>
            <param name="ms">The milliseconds.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="M:NAudio.Dsp.EnvelopeDetector.run(System.Double,System.Double@)">
            <summary>
            Runs the specified in value.
            </summary>
            <param name="inValue">The in value.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:NAudio.Dsp.EnvelopeDetector.setCoef">
            <summary>
            Sets the coef.
            </summary>
        </member>
        <member name="P:NAudio.Dsp.EnvelopeDetector.TimeConstant">
            <summary>
            Gets or sets the time constant.
            </summary>
            <value>The time constant.</value>
        </member>
        <member name="P:NAudio.Dsp.EnvelopeDetector.SampleRate">
            <summary>
            Gets or sets the sample rate.
            </summary>
            <value>The sample rate.</value>
        </member>
        <member name="T:NAudio.CoreAudioApi.WasapiCapture">
            <summary>
            Audio Capture using Wasapi
            See http://msdn.microsoft.com/en-us/library/dd370800%28VS.85%29.aspx
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.WasapiCapture.RequestedDuration">
            <summary>
            The requested duration.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.WasapiCapture.ReftimesPerSec">
            <summary>
            The reftimes per second.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.WasapiCapture.ReftimesPerMillisec">
            <summary>
            The reftimes per millisecond.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.WasapiCapture.audioClient">
            <summary>
            The field for the audio client.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.WasapiCapture.stop">
            <summary>
            An indicator of whether to stop recording.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.WasapiCapture.recordBuffer">
            <summary>
            The buffer used when recording.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.WasapiCapture.captureThread">
            <summary>
            The thread that capturing happens on.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.WasapiCapture.bytesPerFrame">
            <summary>
            The number of bytes per frame.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.WasapiCapture"/> class. 
            Initialises a new instance of the WASAPI capture class
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.#ctor(NAudio.CoreAudioApi.MultimediaDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.WasapiCapture"/> class. 
            Initialises a new instance of the WASAPI capture class
            </summary>
            <param name="captureDevice">
            Capture device to use
            </param>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.GetDefaultCaptureDevice">
            <summary>
            Gets the default audio capture device
            </summary>
            <returns>The default audio capture device</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.StartRecording">
            <summary>
            Start Recording
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.StopRecording">
            <summary>
            Stop Recording
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.CaptureThread(NAudio.CoreAudioApi.AudioClient)">
            <summary>
            Captures the thread.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.ReadNextPacket(NAudio.CoreAudioApi.AudioCaptureClient)">
            <summary>
            Reads the next packet.
            </summary>
            <param name="capture">The capture.</param>
        </member>
        <member name="M:NAudio.CoreAudioApi.WasapiCapture.InitializeCaptureDevice">
            <summary>
            Initializes the capture device.
            </summary>
        </member>
        <member name="E:NAudio.CoreAudioApi.WasapiCapture.DataAvailable">
            <summary>
            Indicates recorded data is available 
            </summary>
        </member>
        <member name="E:NAudio.CoreAudioApi.WasapiCapture.RecordingStopped">
            <summary>
            Indicates that all recorded data has now been received.
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.WasapiCapture.WaveFormat">
            <summary>
            Gets or sets Recording wave format
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioClientStreamFlags">
            <summary>
            Originally known as AUDCLNT_STREAMFLAGS
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamFlags.None">
            <summary>
            No stream flags
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamFlags.CrossProcess">
            <summary>
            Originally known as AUDCLNT_STREAMFLAGS_CROSSPROCESS
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamFlags.Loopback">
            <summary>
            Originally known as AUDCLNT_STREAMFLAGS_LOOPBACK
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamFlags.EventCallback">
            <summary>
            Originally known as AUDCLNT_STREAMFLAGS_EVENTCALLBACK 
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientStreamFlags.NoPersist">
            <summary>
            Originally known as AUDCLNT_STREAMFLAGS_NOPERSIST     
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioClientBufferFlags">
            <summary>
            Audio Client Buffer Flags
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientBufferFlags.None">
            <summary>
            No buffer flags.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientBufferFlags.DataDiscontinuity">
            <summary>
            Originally known as AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientBufferFlags.Silent">
            <summary>
            Originally known as AUDCLNT_BUFFERFLAGS_SILENT
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioClientBufferFlags.TimestampError">
            <summary>
            Originally known as AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveProvider32">
            <summary>
            Base class for creating a 32 bit floating point wave provider
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveProvider32.waveFormat">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveProvider32.#ctor">
            <summary>
            Initializes a new instance of the WaveProvider32 class 
            defaulting to 44.1kHz mono
            </summary>
        </member>
        <member name="M:NAudio.Wave.WaveProvider32.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the WaveProvider32 class with the specified
            sample rate and number of channels
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="channels">The channels.</param>
        </member>
        <member name="M:NAudio.Wave.WaveProvider32.SetWaveFormat(System.Int32,System.Int32)">
            <summary>
            Allows you to specify the sample rate and channels for this WaveProvider
            (should be initialised before you pass it to a wave player)
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="channels">The channels.</param>
        </member>
        <member name="M:NAudio.Wave.WaveProvider32.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Implements the Read method of IWaveProvider by delegating to the abstract
            Read method taking a float array
            </summary>
            <param name="buffer">The buffer to fill of wave data.</param>
            <param name="offset">Offset into buffer</param>
            <param name="count">The number of bytes to read</param>
            <returns>
            the number of bytes written to the buffer.
            </returns>
        </member>
        <member name="M:NAudio.Wave.WaveProvider32.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
            Method to override in derived classes
            Supply the requested number of samples into the buffer
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="sampleCount">The sample count.</param>
            <returns>The number of bytes read from the buffer.</returns>
        </member>
        <member name="P:NAudio.Wave.WaveProvider32.WaveFormat">
            <summary>
            Gets The Wave Format
            </summary>
        </member>
        <member name="T:NAudio.Wave.WaveCallbackStrategy">
            <summary>
            Wave Callback Strategy
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveCallbackStrategy.FunctionCallback">
            <summary>
            Use a function
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveCallbackStrategy.NewWindow">
            <summary>
            Create a new window (should only be done if on GUI thread)
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveCallbackStrategy.ExistingWindow">
            <summary>
            Use an existing window handle
            </summary>
        </member>
        <member name="T:NAudio.Manufacturers">
            <summary>
            Manufacturer codes from mmreg.h
            </summary>
        </member>
        <member name="F:NAudio.Manufacturers.Microsoft">
            <summary>Microsoft Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Creative">
            <summary>Creative Labs, Inc</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Mediavision">
            <summary>Media Vision, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Fujitsu">
            <summary>Fujitsu Corp.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Artisoft">
            <summary>Artisoft, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.TurtleBeach">
            <summary>Turtle Beach, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Ibm">
            <summary>IBM Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Vocaltec">
            <summary>Vocaltec LTD.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Roland">
            <summary>Roland option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.DspSolutions">
            <summary>DSP Solutions, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Nec">
            <summary>NEC option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Ati">
            <summary>ATI option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Wanglabs">
            <summary>Wang Laboratories, Inc</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Tandy">
            <summary>Tandy Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Voyetra">
            <summary>Voyetra option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Antex">
            <summary>Antex Electronics Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.IclPS">
            <summary>ICL Personal Systems</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Intel">
            <summary>Intel Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Gravis">
            <summary>Advanced Gravis</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Val">
            <summary>Video Associates Labs, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Interactive">
            <summary>InterActive Inc</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Yamaha">
            <summary>Yamaha Corporation of America</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Everex">
            <summary>Everex Systems, Inc</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Echo">
            <summary>Echo Speech Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Sierra">
            <summary>Sierra Semiconductor Corp</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Cat">
            <summary>Computer Aided Technologies</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Apps">
            <summary>APPS Software International</summary>
        </member>
        <member name="F:NAudio.Manufacturers.DspGroup">
            <summary>DSP Group, Inc</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Melabs">
            <summary>microEngineering Labs</summary>
        </member>
        <member name="F:NAudio.Manufacturers.ComputerFriends">
            <summary>Computer Friends, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Ess">
            <summary>ESS Technology</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Audiofile">
            <summary>Audio, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Motorola">
            <summary>Motorola, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Canopus">
            <summary>Canopus, co., Ltd.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Epson">
            <summary>Seiko Epson Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Truevision">
            <summary>Truevision option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Aztech">
            <summary>Aztech Labs, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Videologic">
            <summary>Videologic option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Scalacs">
            <summary>SCALACS option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Korg">
            <summary>Korg Inc. option</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Apt">
            <summary>Audio Processing Technology</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Ics">
            <summary>Integrated Circuit Systems, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Iteratedsys">
            <summary>Iterated Systems, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Metheus">
            <summary>Metheus option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Logitech">
            <summary>Logitech, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Winnov">
            <summary>Winnov, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Ncr">
            <summary>NCR Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Exan">
            <summary>EXAN option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Ast">
            <summary>AST Research Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Willowpond">
            <summary>Willow Pond Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Sonicfoundry">
            <summary>Sonic Foundry</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Vitec">
            <summary>Vitec Multimedia</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Moscom">
            <summary>MOSCOM Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Siliconsoft">
            <summary>Silicon Soft, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Supermac">
            <summary>Supermac option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Audiopt">
            <summary>Audio Processing Technology</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Speechcomp">
            <summary>Speech Compression</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Ahead">
            <summary>Ahead, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Dolby">
            <summary>Dolby Laboratories</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Oki">
            <summary>OKI option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Auravision">
            <summary>AuraVision Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Olivetti">
            <summary>Ing C. Olivetti &amp; C., S.p.A.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Iomagic">
            <summary>I/O Magic Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Matsushita">
            <summary>Matsushita Electric Industrial Co., LTD.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Controlres">
            <summary>Control Resources Limited</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Xebec">
            <summary>Xebec Multimedia Solutions Limited</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Newmedia">
            <summary>New Media Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Nms">
            <summary>Natural MicroSystems</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Lyrrus">
            <summary>Lyrrus Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Compusic">
            <summary>Compusic option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Opti">
            <summary>OPTi Computers Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Adlacc">
            <summary>Adlib Accessories Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Compaq">
            <summary>Compaq Computer Corp.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Dialogic">
            <summary>Dialogic Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Insoft">
            <summary>InSoft, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Mptus">
            <summary>M.P. Technologies, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Weitek">
            <summary>Weitek option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.LernoutAndHauspie">
            <summary>Lernout &amp; Hauspie</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Qciar">
            <summary>Quanta Computer Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Apple">
            <summary>Apple Computer, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Digital">
            <summary>Digital Equipment Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Motu">
            <summary>Mark of the Unicorn</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Workbit">
            <summary>Workbit Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Ositech">
            <summary>Ositech Communications Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Miro">
            <summary>miro Computer Products AG</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Cirruslogic">
            <summary>Cirrus Logic</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Isolution">
            <summary>ISOLUTION  B.V.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Horizons">
            <summary>Horizons Technology, Inc</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Concepts">
            <summary>Computer Concepts Ltd</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Vtg">
            <summary>Voice Technologies Group, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Radius">
            <summary>Radius option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Rockwell">
            <summary>Rockwell International</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Xyz">
            <summary>Co. XYZ for testing</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Opcode">
            <summary>Opcode Systems</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Voxware">
            <summary>Voxware Inc</summary>
        </member>
        <member name="F:NAudio.Manufacturers.NorthernTelecom">
            <summary>Northern Telecom Limited</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Apicom">
            <summary>APICOM option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Grande">
            <summary>Grande Software</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Addx">
            <summary>ADDX option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Wildcat">
            <summary>Wildcat Canyon Software</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Rhetorex">
            <summary>Rhetorex Inc</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Brooktree">
            <summary>Brooktree Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Ensoniq">
            <summary>ENSONIQ Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Fast">
            <summary>FAST Multimedia AG</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Nvidia">
            <summary>NVidia Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Oksori">
            <summary>OKSORI Co., Ltd.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Diacoustics">
            <summary>DiAcoustics, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Gulbransen">
            <summary>Gulbransen, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.KayElemetrics">
            <summary>Kay Elemetrics, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Crystal">
            <summary>Crystal Semiconductor Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.SplashStudios">
            <summary>Splash Studios</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Quarterdeck">
            <summary>Quarterdeck Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Tdk">
            <summary>TDK Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.DigitalAudioLabs">
            <summary>Digital Audio Labs, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Seersys">
            <summary>Seer Systems, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Picturetel">
            <summary>PictureTel Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.AttMicroelectronics">
            <summary>AT&amp;T Microelectronics</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Osprey">
            <summary>Osprey Technologies, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Mediatrix">
            <summary>Mediatrix Peripherals</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Soundesigns">
            <summary>SounDesignS M.C.S. Ltd.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Aldigital">
            <summary>A.L. Digital Ltd.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.SpectrumSignalProcessing">
            <summary>Spectrum Signal Processing, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Ecs">
            <summary>Electronic Courseware Systems, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Amd">
            <summary>AMD option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Coredynamics">
            <summary>Core Dynamics</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Canam">
            <summary>CANAM Computers</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Softsound">
            <summary>Softsound, Ltd.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Norris">
            <summary>Norris Communications, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Ddd">
            <summary>Danka Data Devices</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Euphonics">
            <summary>EuPhonics option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Precept">
            <summary>Precept Software, Inc.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.CrystalNet">
            <summary>Crystal Net Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Chromatic">
            <summary>Chromatic Research, Inc</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Voiceinfo">
            <summary>Voice Information Systems, Inc</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Viennasys">
            <summary>Vienna Systems</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Connectix">
            <summary>Connectix Corporation</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Gadgetlabs">
            <summary>Gadget Labs LLC</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Frontier">
            <summary>Frontier Design Group LLC</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Viona">
            <summary>Viona Development GmbH</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Casio">
            <summary>Casio Computer Co., LTD</summary>
        </member>
        <member name="F:NAudio.Manufacturers.Diamondmm">
            <summary>Diamond Multimedia</summary>
        </member>
        <member name="F:NAudio.Manufacturers.S3">
            <summary>S3 option.</summary>
        </member>
        <member name="F:NAudio.Manufacturers.FraunhoferIis">
            <summary>Fraunhofer option.</summary>
        </member>
        <member name="T:NAudio.Wave.Compression.AcmFormatSuggestFlags">
            <summary>
            The ACM Format Suggest Flags.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatSuggestFlags.FormatTag">
            <summary>
            Originally known as ACM_FORMATSUGGESTF_WFORMATTAG
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatSuggestFlags.Channels">
            <summary>
            Originally known as ACM_FORMATSUGGESTF_NCHANNELS
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatSuggestFlags.SamplesPerSecond">
            <summary>
            Originally known as ACM_FORMATSUGGESTF_NSAMPLESPERSEC
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatSuggestFlags.BitsPerSample">
            <summary>
            Originally known as ACM_FORMATSUGGESTF_WBITSPERSAMPLE
            </summary>
        </member>
        <member name="F:NAudio.Wave.Compression.AcmFormatSuggestFlags.TypeMask">
            <summary>
            Originally known as ACM_FORMATSUGGESTF_TYPEMASK
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.AsioTimeInfo">
            <summary>
            The ASIO Time Info
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.AsioTimeInfo.speed">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.AsioTimeInfo.systemTime">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.AsioTimeInfo.samplePosition">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.AsioTimeInfo.sampleRate">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.AsioTimeInfo.flags">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.AsioTimeInfo.reserved">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOSampleType">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTInt16MSB">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTInt24MSB">
            <summary>
            used for 20 bits as well
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTInt32MSB">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTFloat32MSB">
            <summary>
            IEEE 754 32 bit float
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTFloat64MSB">
            <summary>
            IEEE 754 64 bit double float
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTInt32MSB16">
            <summary>
            32 bit data with 16 bit alignment
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTInt32MSB18">
            <summary>
            32 bit data with 18 bit alignment
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTInt32MSB20">
            <summary>
            32 bit data with 20 bit alignment
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTInt32MSB24">
            <summary>
            32 bit data with 24 bit alignment
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTInt16LSB">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTInt24LSB">
            <summary>
            used for 20 bits as well
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTInt32LSB">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTFloat32LSB">
            <summary>
            IEEE 754 32 bit float, as found on Intel x86 architecture
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTFloat64LSB">
            <summary>
            IEEE 754 64 bit double float, as found on Intel x86 architecture
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTInt32LSB16">
            <summary>
            32 bit data with 18 bit alignment
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTInt32LSB18">
            <summary>
            32 bit data with 18 bit alignment
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTInt32LSB20">
            <summary>
            32 bit data with 20 bit alignment
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTInt32LSB24">
            <summary>
            32 bit data with 24 bit alignment
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTDSDInt8LSB1">
            <summary>
            DSD 1 bit data, 8 samples per byte. First sample in Least significant bit.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTDSDInt8MSB1">
            <summary>
            DSD 1 bit data, 8 samples per byte. First sample in Most significant bit.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOSampleType.ASIOSTDSDInt8NER8">
            <summary>
            DSD 8 bit data, 1 sample per byte. No Endianness required.
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.PropertyStore">
            <summary>
            Property Store class, only supports reading properties at the moment.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyStore.storeInterface">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyStore.#ctor(NAudio.CoreAudioApi.Interfaces.IPropertyStore)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.PropertyStore"/> class. 
            Creates a new property store
            </summary>
            <param name="store">
            IPropertyStore COM interface
            </param>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyStore.Contains(NAudio.CoreAudioApi.PropertyKey)">
            <summary>
            Determines whether [contains] [the specified property key].
            </summary>
            <param name="propertyKey">The property key.</param>
            <returns>
            <c>true</c> if [contains] [the specified property key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyStore.Get(System.Int32)">
            <summary>
            Gets property key at sepecified index
            </summary>
            <param name="index">The Index to get</param>
            <returns>The Property key</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyStore.GetValue(System.Int32)">
            <summary>
            Gets property value at specified index
            </summary>
            <param name="index">The Index to get</param>
            <returns>Property value</returns>
        </member>
        <member name="P:NAudio.CoreAudioApi.PropertyStore.Count">
            <summary>
            Gets Property Count
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.PropertyStore.Item(System.Int32)">
            <summary>
            Gets property by index
            </summary>
            <param name="index">Property index</param>
            <returns>The property</returns>
        </member>
        <member name="P:NAudio.CoreAudioApi.PropertyStore.Item(NAudio.CoreAudioApi.PropertyKey)">
            <summary>
            Gets the <see cref="T:NAudio.CoreAudioApi.PropertyStoreProperty"/> with the specified property key.
            </summary>
            <param name="propertyKey">The property key to look for.</param>
            <returns>Property or null if not found</returns>
        </member>
        <member name="T:NAudio.CoreAudioApi.PropertyKey">
            <summary>
            PROPERTYKEY is defined in wtypes.h
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKey.FormatId">
            <summary>
            The Format ID
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.PropertyKey.PropertyId">
            <summary>
            The Property ID
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyKey.op_Equality(NAudio.CoreAudioApi.PropertyKey,NAudio.CoreAudioApi.PropertyKey)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="leftPropertyKey">The left property key.</param>
            <param name="rightPropertyKey">The right property key.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyKey.op_Inequality(NAudio.CoreAudioApi.PropertyKey,NAudio.CoreAudioApi.PropertyKey)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="leftPropertyKey">The left property key.</param>
            <param name="rightPropertyKey">The right property key.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.PropertyKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NAudio.Midi.MidiOut">
            <summary>
            Represents a MIDI out device
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOut.hMidiOut">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOut.disposed">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiOut.callback">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiOut.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.MidiOut"/> class. 
            Opens a specified MIDI out device
            </summary>
            <param name="deviceNo">
            The device number
            </param>
        </member>
        <member name="M:NAudio.Midi.MidiOut.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NAudio.Midi.MidiOut"/> class.  Releases unmanaged resources and performs other cleanup operations before the <see cref="T:NAudio.Midi.MidiOut"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiOut.DeviceInfo(System.Int32)">
            <summary>
            Gets the MIDI Out device info
            </summary>
            <param name="midiOutDeviceNumber">The midi out device number.</param>
            <returns>The MIDI Capabilities.</returns>
        </member>
        <member name="M:NAudio.Midi.MidiOut.Close">
            <summary>
            Closes this MIDI out device
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiOut.Dispose">
            <summary>
            Closes this MIDI out device
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiOut.Reset">
            <summary>
            Resets the MIDI out device
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiOut.SendDriverMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends a MIDI out message
            </summary>
            <param name="message">The Message</param>
            <param name="param1">Parameter 1</param>
            <param name="param2">Parameter 2</param>
        </member>
        <member name="M:NAudio.Midi.MidiOut.Send(System.Int32)">
            <summary>
            Sends a MIDI message to the MIDI out device
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:NAudio.Midi.MidiOut.Dispose(System.Boolean)">
            <summary>
            Closes the MIDI out device
            </summary>
            <param name="disposing">True if called from Dispose</param>
        </member>
        <member name="M:NAudio.Midi.MidiOut.Callback(System.IntPtr,NAudio.Midi.MidiInterop.MidiOutMessage,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Callbacks the specified midi in handle.
            </summary>
            <param name="midiInHandle">The midi in handle.</param>
            <param name="message">The message.</param>
            <param name="userData">The user data.</param>
            <param name="messageParameter1">The message parameter1.</param>
            <param name="messageParameter2">The message parameter2.</param>
        </member>
        <member name="P:NAudio.Midi.MidiOut.NumberOfDevices">
            <summary>
            Gets the number of MIDI devices available in the system
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiOut.Volume">
            <summary>
            Gets or sets the volume for this MIDI out device
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiMessage">
            <summary>
            Represents a MIDI message
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiMessage.rawData">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.MidiMessage.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.MidiMessage"/> class. 
            Creates a new MIDI message
            </summary>
            <param name="status">
            The Status
            </param>
            <param name="data1">
            Data parameter 1
            </param>
            <param name="data2">
            Data parameter 2
            </param>
        </member>
        <member name="M:NAudio.Midi.MidiMessage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.MidiMessage"/> class. 
            Creates a new MIDI message from a raw message
            </summary>
            <param name="rawData">
            A packed MIDI message from an MMIO function
            </param>
        </member>
        <member name="M:NAudio.Midi.MidiMessage.StartNote(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a Note On message
            </summary>
            <param name="note">Note number</param>
            <param name="volume">The Volume</param>
            <param name="channel">MIDI channel</param>
            <returns>A new MidiMessage object</returns>
        </member>
        <member name="M:NAudio.Midi.MidiMessage.StopNote(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a Note Off message
            </summary>
            <param name="note">Note number</param>
            <param name="volume">The Volume</param>
            <param name="channel">MIDI channel</param>
            <returns>A new MidiMessage object</returns>
        </member>
        <member name="M:NAudio.Midi.MidiMessage.ChangePatch(System.Int32,System.Int32)">
            <summary>
            Creates a patch change message
            </summary>
            <param name="patch">The patch number</param>
            <param name="channel">The MIDI channel number</param>
            <returns>A new MidiMessageObject</returns>
        </member>
        <member name="M:NAudio.Midi.MidiMessage.ChangeControl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a Control Change message
            </summary>
            <param name="controller">The controller number to change</param>
            <param name="value">The value to set the controller to</param>
            <param name="channel">The MIDI channel number</param>
            <returns>A new MidiMessageObject</returns>
        </member>
        <member name="P:NAudio.Midi.MidiMessage.RawData">
            <summary>
            Gets Returns the raw MIDI message data
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiInCapabilities">
            <summary>
            MIDI In Device Capabilities
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInCapabilities.MaxProductNameLength">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInCapabilities.manufacturerId">
            <summary>
            Originally known as wMid
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInCapabilities.productId">
            <summary>
            Originally known as wPid
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInCapabilities.driverVersion">
            <summary>
            Originally known as vDriverVersion
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInCapabilities.productName">
            <summary>
            Product Name
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiInCapabilities.support">
            <summary>
            Support - Reserved
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiInCapabilities.Manufacturer">
            <summary>
            Gets the manufacturer of this device
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiInCapabilities.ProductId">
            <summary>
            Gets the product identifier (manufacturer specific)
            </summary>
        </member>
        <member name="P:NAudio.Midi.MidiInCapabilities.ProductName">
            <summary>
            Gets the product name
            </summary>
        </member>
        <member name="T:NAudio.Midi.MidiCommandCode">
            <summary>
            MIDI command codes
            </summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.NoteOff">
            <summary>Note Off option.</summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.NoteOn">
            <summary>Note On option.</summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.KeyAfterTouch">
            <summary>Key After-touch</summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.ControlChange">
            <summary>Control change</summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.PatchChange">
            <summary>Patch change</summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.ChannelAfterTouch">
            <summary>Channel after-touch</summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.PitchWheelChange">
            <summary>Pitch wheel change</summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.Sysex">
            <summary>Sysex message</summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.Eox">
            <summary>Eox (comes at end of a sysex message)</summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.TimingClock">
            <summary>Timing clock (used when synchronization is required)</summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.StartSequence">
            <summary>Start sequence</summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.ContinueSequence">
            <summary>Continue sequence</summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.StopSequence">
            <summary>Stop sequence</summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.AutoSensing">
            <summary>Auto-Sensing option.</summary>
        </member>
        <member name="F:NAudio.Midi.MidiCommandCode.MetaEvent">
            <summary>Meta-event option.</summary>
        </member>
        <member name="T:NAudio.Gui.VolumeSlider">
            <summary>
            VolumeSlider control
            </summary>
        </member>
        <member name="F:NAudio.Gui.VolumeSlider.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:NAudio.Gui.VolumeSlider.volume">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.VolumeSlider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.VolumeSlider"/> class. 
            Creates a new VolumeSlider control
            </summary>
        </member>
        <member name="M:NAudio.Gui.VolumeSlider.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Gui.VolumeSlider.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="pe">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NAudio.Gui.VolumeSlider.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.VolumeSlider.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.VolumeSlider.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NAudio.Gui.VolumeSlider.SetVolumeFromMouse(System.Int32)">
            <summary>
            Sets the volume from mouse.
            </summary>
            <param name="x">The x position.</param>
        </member>
        <member name="E:NAudio.Gui.VolumeSlider.VolumeChanged">
            <summary>
            Volume changed event
            </summary>
        </member>
        <member name="P:NAudio.Gui.VolumeSlider.Volume">
            <summary>
            Gets or sets The volume for this control
            </summary>
        </member>
        <member name="T:NAudio.Gui.LcdPanel">
            <summary>
            LCD panel control
            </summary>
        </member>
        <member name="F:NAudio.Gui.LcdPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="F:NAudio.Gui.LcdPanel.pixelSize">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.LcdPanel.onColor">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.LcdPanel.offColor">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Gui.LcdPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.LcdPanel"/> class. 
            Creates a new LCD panel
            </summary>
        </member>
        <member name="M:NAudio.Gui.LcdPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Gui.LcdPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.LcdPanel.DrawCharacter(System.Drawing.Graphics,System.Char,System.Int32,System.Int32)">
            <summary>
            Draws the character.
            </summary>
            <param name="g">The graphics object..</param>
            <param name="c">The character to draw.</param>
            <param name="row">The row to draw at.</param>
            <param name="col">The column to draw at.</param>
        </member>
        <member name="M:NAudio.Gui.LcdPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NAudio.Gui.LcdPanel.OffColor">
            <summary>
            Gets or sets Pixel colour for pixels turned off
            </summary>
        </member>
        <member name="P:NAudio.Gui.LcdPanel.OnColor">
            <summary>
            Gets or sets Pixel colour for pixels turned on
            </summary>
        </member>
        <member name="T:NAudio.Gui.Fader">
            <summary>
            Represents a GUI Fader.
            </summary>
        </member>
        <member name="F:NAudio.Gui.Fader.SliderHeight">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.Fader.SliderWidth">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.Fader.minimum">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.Fader.maximum">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.Fader.percent">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.Fader.orientation">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.Fader.dragging">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.Fader.dragY">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.Fader.sliderRectangle">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Gui.Fader.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NAudio.Gui.Fader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Gui.Fader"/> class. 
            Creates a new Fader control
            </summary>
        </member>
        <member name="M:NAudio.Gui.Fader.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Gui.Fader.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.Fader.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.Fader.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.Fader.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAudio.Gui.Fader.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NAudio.Gui.Fader.DrawSlider(System.Drawing.Graphics)">
            <summary>
            Draws the slider.
            </summary>
            <param name="g">The graphics object.</param>
        </member>
        <member name="P:NAudio.Gui.Fader.Minimum">
            <summary>
            Gets or sets Minimum value of this fader
            </summary>
        </member>
        <member name="P:NAudio.Gui.Fader.Maximum">
            <summary>
            Gets or sets Maximum value of this fader
            </summary>
        </member>
        <member name="P:NAudio.Gui.Fader.Value">
            <summary>
            Gets or sets Current value of this fader
            </summary>
        </member>
        <member name="P:NAudio.Gui.Fader.Orientation">
            <summary>
            Gets or sets Fader orientation
            </summary>
        </member>
        <member name="T:NAudio.FileFormats.Map.CakewalkDrumMapping">
            <summary>
            Represents an entry in a Cakewalk drum map
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkDrumMapping.noteName">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkDrumMapping.inNote">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkDrumMapping.outNote">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkDrumMapping.outPort">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkDrumMapping.channel">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkDrumMapping.velocityAdjust">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Map.CakewalkDrumMapping.velocityScale">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.FileFormats.Map.CakewalkDrumMapping.ToString">
            <summary>
            Describes this drum map entry
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NAudio.FileFormats.Map.CakewalkDrumMapping.NoteName">
            <summary>
            Gets or sets User customisable note name
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Map.CakewalkDrumMapping.InNote">
            <summary>
            Gets or sets Input MIDI note number
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Map.CakewalkDrumMapping.OutNote">
            <summary>
            Gets or sets Output MIDI note number
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Map.CakewalkDrumMapping.OutPort">
            <summary>
            Gets or sets Output port
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Map.CakewalkDrumMapping.Channel">
            <summary>
            Gets or sets Output MIDI Channel
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Map.CakewalkDrumMapping.VelocityAdjust">
            <summary>
            Gets or sets Velocity adjustment
            </summary>
        </member>
        <member name="P:NAudio.FileFormats.Map.CakewalkDrumMapping.VelocityScale">
            <summary>
            Gets or sets Velocity scaling - in percent
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoMediaTypeGuids">
            <summary>
            The dmo media type guids
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaTypeGuids.FORMAT_None">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaTypeGuids.FORMAT_VideoInfo">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaTypeGuids.FORMAT_VideoInfo2">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaTypeGuids.FORMAT_WaveFormatEx">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaTypeGuids.FORMAT_MPEGVideo">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaTypeGuids.FORMAT_MPEGStreams">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaTypeGuids.FORMAT_DvInfo">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoMediaTypeGuids.FORMAT_525WSS">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoInterop">
            <summary>
            The dmo interop
            </summary>
        </member>
        <member name="T:NAudio.Dmo.DmoDescriptor">
            <summary>
            Contains the name and CLSID of a DirectX Media Object
            </summary>
        </member>
        <member name="M:NAudio.Dmo.DmoDescriptor.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Dmo.DmoDescriptor"/> class.
            </summary>
            <param name="name">The name of the descriptor.</param>
            <param name="clsid">The CLSID of the descriptor.</param>
        </member>
        <member name="P:NAudio.Dmo.DmoDescriptor.Name">
            <summary>
            Gets The Name
            </summary>
        </member>
        <member name="P:NAudio.Dmo.DmoDescriptor.Clsid">
            <summary>
            Gets The Clsid
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioVolumeNotificationData">
            <summary>
            Audio Volume Notification Data
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioVolumeNotificationData._EventContext">
            <summary>
            The event context.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioVolumeNotificationData._Muted">
            <summary>
            The muted flag.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioVolumeNotificationData._MasterVolume">
            <summary>
            The master volume level.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioVolumeNotificationData._Channels">
            <summary>
            The channels.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioVolumeNotificationData._ChannelVolume">
            <summary>
            The channels volume.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioVolumeNotificationData.#ctor(System.Guid,System.Boolean,System.Single,System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.AudioVolumeNotificationData"/> class.
            Audio Volume Notification Data
            </summary>
            <param name="eventContext">The event context.</param>
            <param name="muted">if set to <c>true</c> [muted].</param>
            <param name="masterVolume">The master volume.</param>
            <param name="channelVolume">The channel volume.</param>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioVolumeNotificationData.EventContext">
            <summary>
            Gets Event Context
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioVolumeNotificationData.Muted">
            <summary>
            Gets a value indicating whether the Muted state
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioVolumeNotificationData.MasterVolume">
            <summary>
            Gets Master Volume
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioVolumeNotificationData.Channels">
            <summary>
            Gets The Channels
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioVolumeNotificationData.ChannelVolume">
            <summary>
            Gets Channel Volume
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioEndpointVolumeNotificationDelegate">
            <summary>
            Audio Endpoint Volume Notifiaction Delegate
            </summary>
            <param name="data">Audio Volume Notification Data</param>
        </member>
        <member name="T:NAudio.Wave.SampleEventArgs">
            <summary>
            Sample event arguments
            </summary>
        </member>
        <member name="M:NAudio.Wave.SampleEventArgs.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.SampleEventArgs"/> class.
            </summary>
            <param name="left">The left argument.</param>
            <param name="right">The right argument.</param>
        </member>
        <member name="P:NAudio.Wave.SampleEventArgs.Left">
            <summary>
            Gets or sets Left sample
            </summary>
        </member>
        <member name="P:NAudio.Wave.SampleEventArgs.Right">
            <summary>
            Gets or sets Right sample
            </summary>
        </member>
        <member name="T:NAudio.Wave.BlockAlignReductionStream">
            <summary>
            Helper stream that lets us read from compressed audio files with large block alignment
            as though we could read any amount and reposition anywhere
            </summary>
        </member>
        <member name="F:NAudio.Wave.BlockAlignReductionStream.sourceStream">
            <summary>
            The field for the source stream.
            </summary>
        </member>
        <member name="F:NAudio.Wave.BlockAlignReductionStream.position">
            <summary>
            The field for the position.
            </summary>
        </member>
        <member name="F:NAudio.Wave.BlockAlignReductionStream.circularBuffer">
            <summary>
            The field for the circular buffer
            </summary>
        </member>
        <member name="F:NAudio.Wave.BlockAlignReductionStream.bufferStartPosition">
            <summary>
            The field for the buffer start position.
            </summary>
        </member>
        <member name="F:NAudio.Wave.BlockAlignReductionStream.sourceBuffer">
            <summary>
            The field for the source buffer.
            </summary>
        </member>
        <member name="M:NAudio.Wave.BlockAlignReductionStream.#ctor(NAudio.Wave.WaveStream)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.BlockAlignReductionStream"/> class. 
            Creates a new BlockAlignReductionStream
            </summary>
            <param name="sourceStream">
            the input stream
            </param>
        </member>
        <member name="M:NAudio.Wave.BlockAlignReductionStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from this stream
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="offset"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="M:NAudio.Wave.BlockAlignReductionStream.Dispose(System.Boolean)">
            <summary>
            Disposes this WaveStream
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NAudio.Wave.BlockAlignReductionStream.GetSourceBuffer(System.Int32)">
            <summary>
            Gets the source buffer.
            </summary>
            <param name="size">The size of the source buffer.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="P:NAudio.Wave.BlockAlignReductionStream.BlockAlign">
            <summary>
            Block alignment of this stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.BlockAlignReductionStream.WaveFormat">
            <summary>
            Wave Format
            </summary>
        </member>
        <member name="P:NAudio.Wave.BlockAlignReductionStream.Length">
            <summary>
            Length of this Stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.BlockAlignReductionStream.Position">
            <summary>
            Current position within stream
            </summary>
        </member>
        <member name="P:NAudio.Wave.BlockAlignReductionStream.BufferEndPosition">
            <summary>
            Gets the buffer end position.
            </summary>
            <value>The buffer end position.</value>
        </member>
        <member name="T:NAudio.Wave.WaveOutputs.PlaybackState">
            <summary>
            Playback State
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.PlaybackState.Stopped">
            <summary>
            Stopped state
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.PlaybackState.Playing">
            <summary>
            Playing state
            </summary>
        </member>
        <member name="F:NAudio.Wave.WaveOutputs.PlaybackState.Paused">
            <summary>
            Paused state
            </summary>
        </member>
        <member name="T:NAudio.Wave.MmeInterop.WaveWindowNative">
            <summary>
            The wave window native
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.WaveWindowNative.waveCallback">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.MmeInterop.WaveWindowNative.#ctor(NAudio.Wave.MmeInterop.WaveInterop.WaveCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.MmeInterop.WaveWindowNative"/> class.
            </summary>
            <param name="waveCallback">The wave callback.</param>
        </member>
        <member name="M:NAudio.Wave.MmeInterop.WaveWindowNative.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window.
            </summary>
            <param name="m">A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.</param>
        </member>
        <member name="T:NAudio.Wave.MmeInterop.MmException">
            <summary>
            Represents a Multimedia Exception.
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.MmException.result">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.MmeInterop.MmException.function">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.MmeInterop.MmException.#ctor(NAudio.MmResult,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.MmeInterop.MmException"/> class. 
            Creates a new MmException
            </summary>
            <param name="result">
            The result returned by the Windows API call
            </param>
            <param name="function">
            The name of the Windows API that failed
            </param>
        </member>
        <member name="M:NAudio.Wave.MmeInterop.MmException.Try(NAudio.MmResult,System.String)">
            <summary>
            Helper function to automatically raise an exception on failure
            </summary>
            <param name="result">The result of the API call</param>
            <param name="function">The API function name</param>
        </member>
        <member name="M:NAudio.Wave.MmeInterop.MmException.ErrorMessage(NAudio.MmResult,System.String)">
            <summary>
            Errors the message.
            </summary>
            <param name="result">The result.</param>
            <param name="function">The function.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="P:NAudio.Wave.MmeInterop.MmException.Result">
            <summary>
            Gets Returns the Windows API result
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOTime">
            <summary>
            The ASIO Time.
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTime.reserved1">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTime.reserved2">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTime.reserved3">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTime.reserved4">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTime.timeInfo">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIOTime.timeCode">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIOFillBufferCalback">
            <summary>
            Callback used by the ASIODriverExt to get wave data
            </summary>
            <param name="bufferChannels">The buffer channels.</param>
        </member>
        <member name="T:NAudio.Wave.Asio.ASIODriverExt">
            <summary>
            ASIODriverExt is a simplified version of the ASIODriver. It provides an easier
            way to access the capabilities of the Driver and implement the callbacks necessary 
            for feeding the driver.
            Implementation inspired from Rob Philpot's with a managed C++ ASIO wrapper BlueWave.Interop.Asio
            http://www.codeproject.com/KB/mcpp/Asio.Net.aspx
            <para>Contributor: Alexandre Mutel - email: alexandre_mutel at yahoo.fr</para>
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverExt.driver">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverExt.callbacks">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverExt.capability">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverExt.outputBufferInfos">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverExt.isOutputReadySupport">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverExt.currentBuffers">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverExt.nbOutputChannels">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverExt.fillBufferCalback">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Wave.Asio.ASIODriverExt.bufferSize">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriverExt.#ctor(NAudio.Wave.Asio.ASIODriver)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Wave.Asio.ASIODriverExt"/> class based on an already
            instantiated ASIODriver instance.
            </summary>
            <param name="driver">A ASIODriver already instantiated.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriverExt.Start">
            <summary>
            Starts playing the buffers.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriverExt.Stop">
            <summary>
            Stops playing the buffers.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriverExt.ShowControlPanel">
            <summary>
            Shows the control panel.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriverExt.ReleaseDriver">
            <summary>
            Releases this instance.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriverExt.IsSampleRateSupported(System.Double)">
            <summary>
            Determines whether the specified sample rate is supported.
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <returns>
                <c>true</c> if [is sample rate supported]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriverExt.SetSampleRate(System.Double)">
            <summary>
            Sets the sample rate.
            </summary>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriverExt.CreateBuffers(System.Int32,System.Boolean)">
            <summary>
            Creates the buffers for playing.
            </summary>
            <param name="nbOutputChannelsArg">The number of outputs channels.</param>
            <param name="useMaxBufferSize">if set to <c>true</c> [use max buffer size] else use Prefered size</param>
            <returns>The result of the call.</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriverExt.BuildCapabilities">
            <summary>
            Builds the capabilities internally.
            </summary>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriverExt.BufferSwitchCallBack(System.Int32,System.Boolean)">
            <summary>
            Callback called by the ASIODriver on fill buffer demand. Redirect call to external callback.
            </summary>
            <param name="doubleBufferIndex">Index of the double buffer.</param>
            <param name="directProcess">if set to <c>true</c> [direct process].</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriverExt.SampleRateDidChangeCallBack(System.Double)">
            <summary>
            Callback called by the ASIODriver on event "Samples rate changed".
            </summary>
            <param name="sRate">The sample rate.</param>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriverExt.AsioMessageCallBack(NAudio.Wave.Asio.ASIOMessageSelector,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Asio message call back.
            </summary>
            <param name="selector">The selector.</param>
            <param name="value">The value of an <see cref="T:NAudio.Wave.Asio.ASIOMessageSelector"/>.</param>
            <param name="message">The message.</param>
            <param name="opt">The option pointer.</param>
            <returns>The outcome of the call.</returns>
        </member>
        <member name="M:NAudio.Wave.Asio.ASIODriverExt.BufferSwitchTimeInfoCallBack(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Buffers switch time info call back.
            </summary>
            <param name="asioTimeParam">The asio time param.</param>
            <param name="doubleBufferIndex">Index of the double buffer.</param>
            <param name="directProcess">if set to <c>true</c> [direct process].</param>
            <returns>The pointer of the callback.</returns>
        </member>
        <member name="P:NAudio.Wave.Asio.ASIODriverExt.Driver">
            <summary>
            Gets the driver used.
            </summary>
            <value>The ASIOdriver.</value>
        </member>
        <member name="P:NAudio.Wave.Asio.ASIODriverExt.FillBufferCalback">
            <summary>
            Gets or sets the fill buffer calback.
            </summary>
            <value>The fill buffer calback.</value>
        </member>
        <member name="P:NAudio.Wave.Asio.ASIODriverExt.Capabilities">
            <summary>
            Gets the capabilities of the ASIODriver.
            </summary>
            <value>The capabilities.</value>
        </member>
        <member name="T:NAudio.CoreAudioApi.Interfaces.IPropertyStore">
            <summary>
            is defined in propsys.h
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IPropertyStore.GetCount(System.Int32@)">
            <summary>
            Gets the count.
            </summary>
            <param name="propCount">The prop count.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IPropertyStore.GetAt(System.Int32,NAudio.CoreAudioApi.PropertyKey@)">
            <summary>
            Gets the property at the given index.
            </summary>
            <param name="property">The property.</param>
            <param name="key">The property key.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IPropertyStore.GetValue(NAudio.CoreAudioApi.PropertyKey@,NAudio.CoreAudioApi.PropVariant@)">
            <summary>
            Gets the value.
            </summary>
            <param name="key">The property key.</param>
            <param name="value">The value.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IPropertyStore.SetValue(NAudio.CoreAudioApi.PropertyKey@,NAudio.CoreAudioApi.PropVariant@)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The property key.</param>
            <param name="value">The value.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.CoreAudioApi.Interfaces.IPropertyStore.Commit">
            <summary>
            Commits this instance.
            </summary>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="T:NAudio.Utils.Decibels">
            <summary>
            A util class for conversions
            </summary>
        </member>
        <member name="F:NAudio.Utils.Decibels.LOG_2_DB">
            <summary>
            Based on the formula: 20 / ln( 10 )
            </summary>
        </member>
        <member name="F:NAudio.Utils.Decibels.DB_2_LOG">
            <summary>
            Based on the formula: ln( 10 ) / 20
            </summary>
        </member>
        <member name="M:NAudio.Utils.Decibels.LinearToDecibels(System.Double)">
            <summary>
            linear to dB conversion
            </summary>
            <param name="lin">linear value</param>
            <returns>decibel value</returns>
        </member>
        <member name="M:NAudio.Utils.Decibels.DecibelsToLinear(System.Double)">
            <summary>
            dB to linear conversion
            </summary>
            <param name="dB">decibel value</param>
            <returns>linear value</returns>
        </member>
        <member name="T:NAudio.Utils.CircularBuffer">
            <summary>
            A very basic circular buffer implementation
            </summary>
        </member>
        <member name="F:NAudio.Utils.CircularBuffer.buffer">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.CircularBuffer.writePosition">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.CircularBuffer.readPosition">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Utils.CircularBuffer.byteCount">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Utils.CircularBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Utils.CircularBuffer"/> class. 
            Create a new circular buffer
            </summary>
            <param name="size">
            Max buffer size in bytes
            </param>
        </member>
        <member name="M:NAudio.Utils.CircularBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the buffer
            </summary>
            <param name="data">Data to write</param>
            <param name="offset">Offset into data</param>
            <param name="count">Number of bytes to write</param>
        </member>
        <member name="M:NAudio.Utils.CircularBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the buffer
            </summary>
            <param name="data">Buffer to read into</param>
            <param name="offset">Offset into read buffer</param>
            <param name="count">Bytes to read</param>
            <returns>Number of bytes actually read</returns>
        </member>
        <member name="M:NAudio.Utils.CircularBuffer.Reset">
            <summary>
            Resets the buffer
            </summary>
        </member>
        <member name="M:NAudio.Utils.CircularBuffer.Advance(System.Int32)">
            <summary>
            Advances the buffer, discarding bytes
            </summary>
            <param name="count">Bytes to advance</param>
        </member>
        <member name="P:NAudio.Utils.CircularBuffer.MaxLength">
            <summary>
            Gets Maximum length of this circular buffer
            </summary>
        </member>
        <member name="P:NAudio.Utils.CircularBuffer.Count">
            <summary>
            Gets Number of valid bytes currently in the circular buffer
            </summary>
        </member>
        <member name="T:NAudio.Mixer.BooleanMixerControl">
            <summary>
            Boolean mixer control
            </summary>
        </member>
        <member name="F:NAudio.Mixer.BooleanMixerControl.boolDetails">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Mixer.BooleanMixerControl.#ctor(NAudio.Mixer.MixerInterop.MIXERCONTROL,System.IntPtr,NAudio.Mixer.MixerFlags,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Mixer.BooleanMixerControl"/> class.
            </summary>
            <param name="mixerControl">The mixer control.</param>
            <param name="mixerHandle">The mixer handle.</param>
            <param name="mixerHandleType">Type of the mixer handle.</param>
            <param name="nChannels">The n channels.</param>
        </member>
        <member name="M:NAudio.Mixer.BooleanMixerControl.GetDetails(System.IntPtr)">
            <summary>
            Gets the details for this control
            </summary>
            <param name="pDetails">memory pointer</param>
        </member>
        <member name="P:NAudio.Mixer.BooleanMixerControl.Value">
            <summary>
            Gets or sets a value indicating whether the value is toggled or not.
            </summary>
        </member>
        <member name="T:NAudio.Midi.NoteOnEvent">
            <summary>
            Represents a MIDI note on event
            </summary>
        </member>
        <member name="F:NAudio.Midi.NoteOnEvent.offEvent">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Midi.NoteOnEvent.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.NoteOnEvent"/> class. 
            Reads a new Note On event from a stream of MIDI data
            </summary>
            <param name="br">
            Binary reader on the MIDI data stream
            </param>
        </member>
        <member name="M:NAudio.Midi.NoteOnEvent.#ctor(System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Midi.NoteOnEvent"/> class. 
            Creates a NoteOn event with specified parameters
            </summary>
            <param name="absoluteTime">
            Absolute time of this event
            </param>
            <param name="channel">
            MIDI channel number
            </param>
            <param name="noteNumber">
            MIDI note number
            </param>
            <param name="velocity">
            MIDI note velocity
            </param>
            <param name="duration">
            MIDI note duration
            </param>
        </member>
        <member name="M:NAudio.Midi.NoteOnEvent.ToString">
            <summary>
            Calls base class export first, then exports the data
            specific to this event
            <seealso cref="M:NAudio.Midi.MidiEvent.Export(System.Int64@,System.IO.BinaryWriter)">MidiEvent.Export</seealso>
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NAudio.Midi.NoteOnEvent.OffEvent">
            <summary>
            Gets or sets The associated Note off event
            </summary>
        </member>
        <member name="P:NAudio.Midi.NoteOnEvent.NoteNumber">
            <summary>
            Get or set the Note Number, updating the off event at the same time
            </summary>
        </member>
        <member name="P:NAudio.Midi.NoteOnEvent.Channel">
            <summary>
            Get or set the channel, updating the off event at the same time
            </summary>
        </member>
        <member name="P:NAudio.Midi.NoteOnEvent.NoteLength">
            <summary>
            Gets or sets The duration of this note
            </summary>
            <remarks>
            There must be a note off event
            </remarks>
        </member>
        <member name="T:NAudio.SoundFont.ZoneBuilder">
            <summary>
            The zone builder
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.ZoneBuilder.lastZone">
            <summary>
            The field for the last zone.
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.ZoneBuilder.Read(System.IO.BinaryReader)">
            <summary>
            Reads the specified br.
            </summary>
            <param name="br">The binary reader.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.SoundFont.ZoneBuilder.Write(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes the specified bw.
            </summary>
            <param name="bw">The binary writer.</param>
            <param name="o">The object.</param>
        </member>
        <member name="M:NAudio.SoundFont.ZoneBuilder.Load(NAudio.SoundFont.Modulator[],NAudio.SoundFont.Generator[])">
            <summary>
            Loads the specified modulators.
            </summary>
            <param name="modulators">The modulators.</param>
            <param name="generators">The generators.</param>
        </member>
        <member name="P:NAudio.SoundFont.ZoneBuilder.Zones">
            <summary>
            Gets the zones.
            </summary>
            <value>The zones.</value>
        </member>
        <member name="P:NAudio.SoundFont.ZoneBuilder.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:NAudio.SoundFont.Generator">
            <summary>
            Soundfont generator
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Generator.generatorType">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Generator.rawAmount">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Generator.instrument">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.SoundFont.Generator.sampleHeader">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.SoundFont.Generator.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NAudio.SoundFont.Generator.GeneratorType">
            <summary>
            Gets or sets  the generator type
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.Generator.UInt16Amount">
            <summary>
            Gets or sets Generator amount as an unsigned short
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.Generator.Int16Amount">
            <summary>
            Gets or sets Generator amount as a signed short
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.Generator.LowByteAmount">
            <summary>
            Gets or sets Low byte amount
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.Generator.HighByteAmount">
            <summary>
            Gets or sets High byte amount
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.Generator.Instrument">
            <summary>
            Gets or sets The Instrument
            </summary>
        </member>
        <member name="P:NAudio.SoundFont.Generator.SampleHeader">
            <summary>
            Gets or sets Sample Header
            </summary>
        </member>
        <member name="T:NAudio.FileFormats.Ogg.ogg_page">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.ogg_page.header">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.ogg_page.header_len">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.ogg_page.body">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.FileFormats.Ogg.ogg_page.body_len">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.Ogg.OggEncoder">
            <summary>
            Provides access to the unmanaged ogg encoder DLL
            </summary>
        </member>
        <member name="F:NAudio.Ogg.OggEncoder.READ">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Ogg.OggEncoder.MEM_POOL_SIZE">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Ogg.OggEncoder.memPool">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Ogg.OggEncoder.memPos">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Ogg.OggEncoder.os">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Ogg.OggEncoder.op">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Ogg.OggEncoder.vi">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Ogg.OggEncoder.vc">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Ogg.OggEncoder.vd">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Ogg.OggEncoder.vb">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Ogg.OggEncoder.og">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="M:NAudio.Ogg.OggEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.Ogg.OggEncoder"/> class. 
            Creates a new ogg encoder
            </summary>
        </member>
        <member name="M:NAudio.Ogg.OggEncoder.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NAudio.Ogg.OggEncoder"/> class. 
            Finalizer for the ogg encoder
            </summary>
        </member>
        <member name="M:NAudio.Ogg.OggEncoder.Encode(System.String,System.String)">
            <summary>
            Function to encode a Wave file to OGG
            </summary>
            <param name="infile">Wave file name</param>
            <param name="outfile">Ogg file name</param>
        </member>
        <member name="M:NAudio.Ogg.OggEncoder.Dispose">
            <summary>
            Closes the encoder and frees any associated memory
            </summary>
        </member>
        <member name="M:NAudio.Ogg.OggEncoder.WriteOg(System.IntPtr,System.IO.Stream)">
            <summary>
            Writes the og.
            </summary>
            <param name="ogptr">The ogptr.</param>
            <param name="stdout">The stdout.</param>
        </member>
        <member name="M:NAudio.Ogg.OggEncoder.AllocateHGlobal(System.Int32)">
            <summary>
            Allocates the H global.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>TODO: Fill in with actual documentation</returns>
        </member>
        <member name="M:NAudio.Ogg.OggEncoder.FreeHGlobal">
            <summary>
            Frees the H global.
            </summary>
        </member>
        <member name="M:NAudio.Ogg.OggEncoder.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:NAudio.Dsp.FastFourierTransform">
            <summary>
            This performs a Fast Fourier Transform.
            </summary>
        </member>
        <member name="M:NAudio.Dsp.FastFourierTransform.FFT(System.Boolean,System.Int32,NAudio.Dsp.Complex[])">
            <summary>
            This computes an in-place complex-to-complex FFT
            x and y are the real and imaginary arrays of 2^m points.
            </summary>
            <param name="forward">if set to <c>true</c> [forward].</param>
            <param name="m">The numer of iterations.</param>
            <param name="data">The data to process.</param>
        </member>
        <member name="T:NAudio.Dmo.DmoEnumFlags">
            <summary>
            The DMO Enum Flags.
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoEnumFlags.None">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="F:NAudio.Dmo.DmoEnumFlags.DMO_ENUMF_INCLUDE_KEYED">
            <summary>
            TODO: Fill in with actual documentation
            </summary>
        </member>
        <member name="T:NAudio.CoreAudioApi.AudioEndpointVolumeChannel">
            <summary>
            Audio Endpoint Volume Channel
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioEndpointVolumeChannel._Channel">
            <summary>
            The field for the channel.
            </summary>
        </member>
        <member name="F:NAudio.CoreAudioApi.AudioEndpointVolumeChannel._AudioEndpointVolume">
            <summary>
            The audio endpoint volume.
            </summary>
        </member>
        <member name="M:NAudio.CoreAudioApi.AudioEndpointVolumeChannel.#ctor(NAudio.CoreAudioApi.Interfaces.IAudioEndpointVolume,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAudio.CoreAudioApi.AudioEndpointVolumeChannel"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeChannel.VolumeLevel">
            <summary>
            Gets or sets Volume Level
            </summary>
        </member>
        <member name="P:NAudio.CoreAudioApi.AudioEndpointVolumeChannel.VolumeLevelScalar">
            <summary>
            Gets or sets Volume Level Scalar
            </summary>
        </member>
    </members>
</doc>
